
const Token = 
{
    IDENT  : 1,
    NUMBER : 2,

    PLUS     : 3, // +
    MINUS    : 4, // -
    SLASH    : 5, // /
    ASTERISK : 6, // *

    LPAREN : 7, // (
    RPAREN : 8, // )

    EOF    : 9,
    UNKOWN : 10
};

function isspace(ch) 
{
    if(ch == " " || ch == "\t" || ch == "\r" || ch == "\n")
    {
        return 1;
    }
    return 0;
}

function isdigit(ch)
{
    if(ch.ord >= 0 && ch.ord <= 9)
    {
        return 1;
    }
    return 0;
}



function Lexer(input)
{
        this.input = input;
        this.index = 0;
        this.number = 0;
        this.lastchar = " ";

    function nextchar()
    {
        if (this.index >= len(this.input))
        {
            this.lastchar = chr(0);
        }
        else
        {
            this.lastchar = this.input[this.index];
            this.index = this.index + 1;
        }

        return this.lastchar;
    }

    function gettokken()
    {
        while (isspace(this.lastchar))
        {
            this.nextchar(); // eaat white space
        }
        if (this.lastchar == chr(0))
        {
            return Token.EOF;
        }
        else if (isdigit(this.lastchar))
        {
            var value = 0.0;
            while (isdigit(this.lastchar))
            {
                value = value * 10 + (ord(this.lastchar) - ord("0"));
                this.nextchar();
            }

            this.number = value;

            return Token.NUMBER;
        }

        var tmp = Token.UNKOWN;

        if(this.lastchar == "+")
        {
            tmp = Token.PLUS;
        }   
        else if(this.lastchar == "-")
        {
            tmp = Token.MINUS;
        }   
        else if(this.lastchar == "/") 
        {
            tmp = Token.SLASH;
        }
        else if(this.lastchar == "*") 
        {
            tmp = Token.ASTERISK;
        }
        else if(this.lastchar == "(")
        {
            tmp = Token.LPAREN;
        }   
        else if(this.lastchar == ")")
        {
            tmp = Token.RPAREN;
        }
        this.nextchar();
        return tmp;  
    }
}

class NumberNode
{
    function NumberNode(value)
    {
        this.value = value;
    }

    function run()
    {
        return this.value;
    }

    function print() 
    {
        print("number ", this.value);
    }
}

class BinaryNode
{
    function BinaryNode(op, lhs, rhs)
    {
        this.op = op;
        this.lhs = lhs;
        this.rhs = rhs;
    }

    function run() 
    {
        var lhs = this.lhs.run();
        var rhs = this.rhs.run();
        if(this.op == Token.PLUS)
        {
            return lhs + rhs;
        }
        else if(this.op == Token.MINUS)
        {
            return lhs - rhs;
        }
        else if(this.op == Token.ASTERISK)
        {
            return lhs * rhs;
        }
        else if(this.op == Token.SLASH)
        {
            return lhs / rhs;
        }        
        throw("Unexpected operator");
    }

    function print() 
    {
        print("binary ", this.op);
        this.lhs.print();
        this.rhs.print();
    }
}

function Parser(input)
{
    var state = {}
    state.lexer = Lexer(input);
    state.lasttoken = 0;
    state.lexer.nextchar();
    state.nexttoken();
    

    state.nexttoken = function()
    {
        state.lasttoken = state.lexer.gettokken();
        return state.lasttoken;
    }

    state.match = function(token)
    {
        if (state.lasttoken != token)
        {
            throw("Unexpected token");
        }
    }

    state.primary = function()
    {
        if (state.lasttoken == Token.NUMBER)
        {
            var prim = NumberNode(state.lexer.number);
            state.nexttoken();
            return prim;
        }
        else if (state.lasttoken == Token.LPAREN)
        {
            state.nexttoken();
            var prim = state.expr(0);
            state.match(Token.RPAREN);
            state.nexttoken();
            return prim;
        }
        else 
        {
            throw("Not a primary");
        }
    }

    state.expr = function(min)
    {
        var pre = [
            1, // +
            2, // -
            3, // /
            3  // *
        ];
        
        var lhs = state.primary();

        while (1)
        {
            if (state.lasttoken < Token.PLUS  || state.lasttoken > Token.ASTERISK)
            {
                break;
            }
            if(pre[state.lasttoken - Token.PLUS] < min)
            {
                break;
            }
            var op = state.lasttoken;
            var prec = pre[state.lasttoken - Token.PLUS];
            state.nexttoken();
            var rhs = state.expr(prec + 1);
            lhs = BinaryNode(op, lhs, rhs);
        }
        
        return lhs;
    }
    return state
}

function calc(input)
{
    var p = Parser(input);
    var e = p.expr(0);
    return e.run();
}

while(true) 
{
    var text = input(">");
    if(text == "quit")
    {
        break;
    }
    print(calc(text));
}


