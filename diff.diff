commit a25bdc05cf22ca232f0b74d05cdb57351e5f3e27
Author: John Doe <root@localhost>
Date:   Tue Dec 6 02:54:27 2022 +0100

    compiles as ANSI C (again)

diff --git a/ape.h b/ape.h
index c7acd0b..4df825d 100755
--- a/ape.h
+++ b/ape.h
@@ -83,7 +83,11 @@ THE SOFTWARE.
 #endif
 
 #if defined(APE_CCENV_ANSIMODE)
-    #define APE_INLINE
+    #if defined(__GNUC__)
+        #define APE_INLINE __inline__ __attribute__ ((__gnu_inline__))
+    #else
+        #define APE_INLINE
+    #endif
 #else
     #define APE_INLINE inline
 #endif
@@ -111,7 +115,7 @@ THE SOFTWARE.
 #define APE_STRNEQ(a, b, n) (strncmp((a), (b), (n)) == 0)
 #define APE_ARRAY_LEN(array) ((int)(sizeof(array) / sizeof(array[0])))
 
-//#define APE_DEBUG
+#define APE_DEBUG 0
 
 #if 1
 #define APE_DBLEQ(a, b) \
@@ -126,7 +130,7 @@ THE SOFTWARE.
 
 #define APE_ASSERT(x) assert((x))
 
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     #define APE_FILENAME (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)
     #define APE_LOG(...) ape_log(APE_FILENAME, __LINE__, __VA_ARGS__)
 #else
@@ -335,7 +339,6 @@ enum ApeTokenType_t
     TOKEN_TYPE_MAX
 };
 
-
 enum ApeOperator_t
 {
     APE_OPERATOR_NONE,
@@ -393,7 +396,6 @@ enum ApeExprType_t
     APE_EXPR_RECOVER,
 };
 
-
 enum ApeSymbolType_t
 {
     APE_SYMBOL_NONE = 0,
diff --git a/builtins.c b/builtins.c
old mode 100644
new mode 100755
index 483f543..34dbb79
--- a/builtins.c
+++ b/builtins.c
@@ -767,7 +767,7 @@ static ApeObject_t cfn_error(ApeVM_t* vm, void* data, ApeSize_t argc, ApeObject_
     {
         msg = ape_object_string_getdata(args[0]);
     }
-    //return ape_object_make_error(vm->context, msg);
+    /*return ape_object_make_error(vm->context, msg);*/
     ape_vm_adderror(vm, APE_ERROR_RUNTIME, "%s", msg);
     return ape_object_make_null(vm->context);
 }
diff --git a/cclex.c b/cclex.c
old mode 100644
new mode 100755
index e3da281..0f00b18
--- a/cclex.c
+++ b/cclex.c
@@ -572,7 +572,6 @@ bool ape_lexer_expectcurrent(ApeLexer_t* lex, ApeTokenType_t type)
     return true;
 }
 
-// INTERNAL
 static bool ape_lexer_readchar(ApeLexer_t* lex)
 {
     bool ok;
diff --git a/ccom.c b/ccom.c
index 2e6e839..cb88b5e 100755
--- a/ccom.c
+++ b/ccom.c
@@ -270,7 +270,7 @@ bool ape_compiler_compilecode(ApeCompiler_t* comp, const char* code)
     statements = ape_parser_parseall(filescope->parser, code, filescope->file);
     if(!statements)
     {
-        // errors are added by parser
+        /* errors are added by parser */
         return false;
     }
     if(comp->context->config.dumpast)
@@ -314,7 +314,8 @@ ApeCompResult_t* ape_compiler_compilesource(ApeCompiler_t* comp, const char* cod
     {
         goto err;
     }
-    compscope = ape_compiler_getcompscope(comp);// might've changed
+    /* might've changed */
+    compscope = ape_compiler_getcompscope(comp);
     APE_ASSERT(compscope->outer == NULL);
     compscope = ape_compiler_getcompscope(comp);
     res = ape_compscope_orphanresult(compscope);
@@ -341,7 +342,7 @@ ApeCompResult_t* ape_compiler_compilefile(ApeCompiler_t* comp, const char* path)
     code = NULL;
     file = NULL;
     res = NULL;
-    // todo: read code function
+    /* todo: read code function */
     if(!comp->config->fileio.ioreader.fnreadfile)
     {
         ape_errorlist_add(comp->errors, APE_ERROR_COMPILATION, g_ccpriv_srcposinvalid, "file read function not configured");
@@ -370,7 +371,7 @@ ApeCompResult_t* ape_compiler_compilefile(ApeCompiler_t* comp, const char* path)
     {
         goto err;
     }
-    // todo: push file scope instead?
+    /* todo: push file scope instead? */
     prevfile = filescope->file;
     filescope->file = file;
     res = ape_compiler_compilesource(comp, code);
@@ -422,7 +423,6 @@ ApeValArray_t* ape_compiler_getconstants(ApeCompiler_t* comp)
     return comp->constants;
 }
 
-// INTERNAL
 bool ape_compiler_init(ApeCompiler_t* comp, ApeContext_t* ctx, const ApeConfig_t* cfg, ApeGCMemory_t* mem, ApeErrorList_t* el, ApePtrArray_t* fl, ApeGlobalStore_t* gs)
 {
     bool ok;
@@ -725,7 +725,7 @@ static bool ape_compiler_compilestmtlist(ApeCompiler_t* comp, ApePtrArray_t* sta
 
 bool ape_compiler_includemodule(ApeCompiler_t* comp, ApeExpression_t* includestmt)
 {
-    // todo: split into smaller functions
+    /* todo: split into smaller functions */
     ApeSize_t i;
     bool ok;
     bool result;
@@ -807,7 +807,7 @@ bool ape_compiler_includemodule(ApeCompiler_t* comp, ApeExpression_t* includestm
     module = (ApeModule_t*)ape_strdict_getbyname(comp->modules, filepath);
     if(!module)
     {
-        // todo: create new module function
+        /* todo: create new module function */
         if(!comp->config->fileio.ioreader.fnreadfile)
         {
             ape_errorlist_addformat(comp->errors, APE_ERROR_COMPILATION, includestmt->pos,
@@ -994,7 +994,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                     {
                         goto statementiferror;
                     }
-                    // don't ape_compiler_emit jump for the last statement
+                    /* don't emit jump for the last statement */
                     if(i < (ape_ptrarray_count(ifstmt->cases) - 1) || ifstmt->alternative)
                     {
                         jumptoendip = ape_compiler_emit(comp, APE_OPCODE_JUMP, 1, make_u64_array((ApeOpByte_t)(0xbeef)));
@@ -1139,7 +1139,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                 {
                     return false;
                 }
-                // Init
+                /* init */
                 indexsymbol = ape_compiler_definesym(comp, stmt->pos, "@i", false, true);
                 if(!indexsymbol)
                 {
@@ -1184,7 +1184,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                         return false;
                     }
                 }
-                // Update
+                /* update */
                 jumptoafterupdateip = ape_compiler_emit(comp, APE_OPCODE_JUMP, 1, make_u64_array((ApeOpByte_t)0xbeef));
                 if(jumptoafterupdateip < 0)
                 {
@@ -1213,7 +1213,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                 }
                 afterupdateip = ape_compiler_getip(comp);
                 ape_compiler_moduint16operand(comp, jumptoafterupdateip + 1, afterupdateip);
-                // Test
+                /* test */
                 ok = ape_valarray_push(comp->srcpositionsstack, &foreach->source->pos);
                 if(!ok)
                 {
@@ -1281,7 +1281,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                 {
                     return false;
                 }
-                // Body
+                /* body */
                 ok = ape_compiler_pushcontip(comp, updateip);
                 if(!ok)
                 {
@@ -1317,7 +1317,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                 {
                     return false;
                 }
-                // Init
+                /* init */
                 jumptoafterupdateip = 0;
                 ok = false;
                 if(forloop->init)
@@ -1333,7 +1333,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                         return false;
                     }
                 }
-                // Update
+                /* update */
                 updateip = ape_compiler_getip(comp);
                 if(forloop->update)
                 {
@@ -1353,7 +1353,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                     afterupdateip = ape_compiler_getip(comp);
                     ape_compiler_moduint16operand(comp, jumptoafterupdateip + 1, afterupdateip);
                 }
-                // Test
+                /* test */
                 if(forloop->test)
                 {
                     ok = ape_compiler_compileexpression(comp, forloop->test);
@@ -1381,7 +1381,7 @@ static bool ape_compiler_compilestatement(ApeCompiler_t* comp, ApeExpression_t*
                 {
                     return false;
                 }
-                // Body
+                /* body */
                 ok = ape_compiler_pushcontip(comp, updateip);
                 if(!ok)
                 {
@@ -1934,7 +1934,8 @@ static bool ape_compiler_compileexpression(ApeCompiler_t* comp, ApeExpression_t*
                     }
                 }
                 freesymbols = symtable->freesymbols;
-                symtable->freesymbols = NULL;// because it gets destroyed with compiler_pop_compilation_scope()
+                /* because it gets destroyed with compiler_pop_compilation_scope() */
+                symtable->freesymbols = NULL;
                 numlocals = symtable->maxnumdefinitions;
                 compres = ape_compscope_orphanresult(compscope);
                 if(!compres)
@@ -2038,9 +2039,11 @@ static bool ape_compiler_compileexpression(ApeCompiler_t* comp, ApeExpression_t*
                     symbol = ape_symtable_resolve(symtable, ident->value);
                     if(!symbol)
                     {
-                        //ape_errorlist_addformat(comp->errors, APE_ERROR_COMPILATION, assign->dest->pos, "symbol '%s' could not be resolved", ident->value);
-                        //goto error;
-                        //ape_symtable_define(ApeSymTable_t* table, const char* name, bool assignable)
+                        /*
+                        ape_errorlist_addformat(comp->errors, APE_ERROR_COMPILATION, assign->dest->pos, "symbol '%s' could not be resolved", ident->value);
+                        goto error;
+                        ape_symtable_define(ApeSymTable_t* table, const char* name, bool assignable)
+                        */
                         symbol = ape_symtable_define(symtable, ident->value, true);
                     }
                     if(!symbol->assignable)
diff --git a/ccopt.c b/ccopt.c
index 5c97105..1abf6f4 100755
--- a/ccopt.c
+++ b/ccopt.c
@@ -125,8 +125,11 @@ ApeExpression_t* ape_optimizer_optinfixexpr(ApeExpression_t* expr)
                 break;
             case APE_OPERATOR_MODULUS:
                 {
-                    //res = ape_ast_make_numberliteralexpr(expr->context, fmod(leftval, rightval));
+                    #if 0
+                    res = ape_ast_make_numberliteralexpr(expr->context, fmod(leftval, rightval));
+                    #else
                     res = ape_ast_make_numberliteralexpr(expr->context, (leftint % rightint));
+                    #endif
                 }
                 break;
             case APE_OPERATOR_BITAND:
diff --git a/ccparse.c b/ccparse.c
index b8fcff1..fcd5d39 100755
--- a/ccparse.c
+++ b/ccparse.c
@@ -11,7 +11,8 @@ static ApeExpression_t *ape_ast_wrapexprinfunccall(ApeContext_t *ctx, ApeExpress
 
 static ApeIdent_t* ape_ast_make_ident(ApeContext_t* ctx, ApeToken_t tok)
 {
-    ApeIdent_t* res = (ApeIdent_t*)ape_allocator_alloc(&ctx->alloc, sizeof(ApeIdent_t));
+    ApeIdent_t* res;
+    res = (ApeIdent_t*)ape_allocator_alloc(&ctx->alloc, sizeof(ApeIdent_t));
     if(!res)
     {
         return NULL;
@@ -30,7 +31,8 @@ static ApeIdent_t* ape_ast_make_ident(ApeContext_t* ctx, ApeToken_t tok)
 
 static ApeIdent_t* ape_ast_copy_ident(ApeIdent_t* ident)
 {
-    ApeIdent_t* res = (ApeIdent_t*)ape_allocator_alloc(ident->alloc, sizeof(ApeIdent_t));
+    ApeIdent_t* res;
+    res = (ApeIdent_t*)ape_allocator_alloc(ident->alloc, sizeof(ApeIdent_t));
     if(!res)
     {
         return NULL;
@@ -49,7 +51,8 @@ static ApeIdent_t* ape_ast_copy_ident(ApeIdent_t* ident)
 
 ApeExpression_t* ape_ast_make_identexpr(ApeContext_t* ctx, ApeIdent_t* ident)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_IDENT);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_IDENT);
     if(!res)
     {
         return NULL;
@@ -60,7 +63,8 @@ ApeExpression_t* ape_ast_make_identexpr(ApeContext_t* ctx, ApeIdent_t* ident)
 
 ApeExpression_t* ape_ast_make_numberliteralexpr(ApeContext_t* ctx, ApeFloat_t val)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALNUMBER);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALNUMBER);
     if(!res)
     {
         return NULL;
@@ -71,7 +75,8 @@ ApeExpression_t* ape_ast_make_numberliteralexpr(ApeContext_t* ctx, ApeFloat_t va
 
 ApeExpression_t* ape_ast_make_boolliteralexpr(ApeContext_t* ctx, bool val)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALBOOL);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALBOOL);
     if(!res)
     {
         return NULL;
@@ -82,7 +87,8 @@ ApeExpression_t* ape_ast_make_boolliteralexpr(ApeContext_t* ctx, bool val)
 
 ApeExpression_t* ape_ast_make_stringliteralexpr(ApeContext_t* ctx, char* value, ApeSize_t len, bool wasallocd)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALSTRING);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALSTRING);
     if(!res)
     {
         return NULL;
@@ -95,7 +101,8 @@ ApeExpression_t* ape_ast_make_stringliteralexpr(ApeContext_t* ctx, char* value,
 
 ApeExpression_t* ape_ast_make_nullliteralexpr(ApeContext_t* ctx)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALNULL);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALNULL);
     if(!res)
     {
         return NULL;
@@ -105,7 +112,8 @@ ApeExpression_t* ape_ast_make_nullliteralexpr(ApeContext_t* ctx)
 
 ApeExpression_t* ape_ast_make_arrayliteralexpr(ApeContext_t* ctx, ApePtrArray_t * values)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALARRAY);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALARRAY);
     if(!res)
     {
         return NULL;
@@ -116,7 +124,8 @@ ApeExpression_t* ape_ast_make_arrayliteralexpr(ApeContext_t* ctx, ApePtrArray_t
 
 ApeExpression_t* ape_ast_make_mapliteralexpr(ApeContext_t* ctx, ApePtrArray_t * keys, ApePtrArray_t * values)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALMAP);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALMAP);
     if(!res)
     {
         return NULL;
@@ -128,7 +137,8 @@ ApeExpression_t* ape_ast_make_mapliteralexpr(ApeContext_t* ctx, ApePtrArray_t *
 
 ApeExpression_t* ape_ast_make_prefixexpr(ApeContext_t* ctx, ApeOperator_t op, ApeExpression_t* right)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_PREFIX);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_PREFIX);
     if(!res)
     {
         return NULL;
@@ -140,7 +150,8 @@ ApeExpression_t* ape_ast_make_prefixexpr(ApeContext_t* ctx, ApeOperator_t op, Ap
 
 ApeExpression_t* ape_ast_make_infixexpr(ApeContext_t* ctx, ApeOperator_t op, ApeExpression_t* left, ApeExpression_t* right)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_INFIX);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_INFIX);
     if(!res)
     {
         return NULL;
@@ -153,7 +164,8 @@ ApeExpression_t* ape_ast_make_infixexpr(ApeContext_t* ctx, ApeOperator_t op, Ape
 
 ApeExpression_t* ape_ast_make_fnliteralexpr(ApeContext_t* ctx, ApePtrArray_t * params, ApeCodeblock_t* body)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_LITERALFUNCTION);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_LITERALFUNCTION);
     if(!res)
     {
         return NULL;
@@ -166,7 +178,8 @@ ApeExpression_t* ape_ast_make_fnliteralexpr(ApeContext_t* ctx, ApePtrArray_t * p
 
 ApeExpression_t* ape_ast_make_callexpr(ApeContext_t* ctx, ApeExpression_t* function, ApePtrArray_t * args)
 {
-    ApeExpression_t* res = ape_ast_make_expression(ctx, APE_EXPR_CALL);
+    ApeExpression_t* res;
+    res = ape_ast_make_expression(ctx, APE_EXPR_CALL);
     if(!res)
     {
         return NULL;
@@ -234,6 +247,7 @@ ApeExpression_t* ape_ast_make_ternaryexpr(ApeContext_t* ctx, ApeExpression_t* te
 void* ape_ast_destroy_expr(ApeExpression_t* expr)
 {
     ApeFnLiteral_t* fn;
+    ApeDataCallback_t destroyfn;
     if(!expr)
     {
         return NULL;
@@ -274,8 +288,9 @@ void* ape_ast_destroy_expr(ApeExpression_t* expr)
             break;
         case APE_EXPR_LITERALMAP:
             {
-                ape_ptrarray_destroywithitems(expr->map.keys, (ApeDataCallback_t)ape_ast_destroy_expr);
-                ape_ptrarray_destroywithitems(expr->map.values, (ApeDataCallback_t)ape_ast_destroy_expr);
+                destroyfn = (ApeDataCallback_t)ape_ast_destroy_expr;
+                ape_ptrarray_destroywithitems(expr->map.keys, destroyfn);
+                ape_ptrarray_destroywithitems(expr->map.values, destroyfn);
             }
             break;
         case APE_EXPR_PREFIX:
@@ -434,7 +449,6 @@ ApeExpression_t* ape_ast_copy_expr(ApeExpression_t* expr)
     {
         return NULL;
     }
-    //fprintf(stderr, "copying AST from expr=%p (%s)...?\n", expr, ape_tostring_exprtype(expr->type));
     res = NULL;
     switch(expr->type)
     {
@@ -500,7 +514,7 @@ ApeExpression_t* ape_ast_copy_expr(ApeExpression_t* expr)
                 res = ape_ast_make_arrayliteralexpr(expr->context, valuescopy);
                 if(!res)
                 {
-                    ape_ptrarray_destroywithitems(valuescopy, (ApeDataCallback_t)ape_ast_destroy_expr);
+                    ape_ptrarray_destroywithitems(valuescopy, destroyfn);
                     return NULL;
                 }
             }
@@ -702,18 +716,20 @@ ApeExpression_t* ape_ast_copy_expr(ApeExpression_t* expr)
             break;
         case APE_EXPR_IF:
             {
-                casescopy = ape_ptrarray_copywithitems(expr->ifstatement.cases, (ApeDataCallback_t)ape_ast_copy_ifcase, (ApeDataCallback_t)ape_ast_destroy_ifcase);
+                copyfn = (ApeDataCallback_t)ape_ast_copy_ifcase;
+                destroyfn = (ApeDataCallback_t)ape_ast_destroy_ifcase;
+                casescopy = ape_ptrarray_copywithitems(expr->ifstatement.cases, copyfn, destroyfn);
                 alternativecopy = ape_ast_copy_codeblock(expr->ifstatement.alternative);
                 if(!casescopy || !alternativecopy)
                 {
-                    ape_ptrarray_destroywithitems(casescopy, (ApeDataCallback_t)ape_ast_destroy_ifcase);
+                    ape_ptrarray_destroywithitems(casescopy, destroyfn);
                     ape_ast_destroy_codeblock(alternativecopy);
                     return NULL;
                 }
                 res = ape_ast_make_ifstmt(expr->context, casescopy, alternativecopy);
                 if(res)
                 {
-                    ape_ptrarray_destroywithitems(casescopy, (ApeDataCallback_t)ape_ast_destroy_ifcase);
+                    ape_ptrarray_destroywithitems(casescopy, destroyfn);
                     ape_ast_destroy_codeblock(alternativecopy);
                     return NULL;
                 }
@@ -883,7 +899,7 @@ ApeExpression_t* ape_ast_copy_expr(ApeExpression_t* expr)
 ApeExpression_t* ape_ast_make_definestmt(ApeContext_t* ctx, ApeIdent_t* name, ApeExpression_t* value, bool assignable)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_DEFINE);
+    res = ape_ast_make_expression(ctx, APE_EXPR_DEFINE);
     if(!res)
     {
         return NULL;
@@ -897,7 +913,7 @@ ApeExpression_t* ape_ast_make_definestmt(ApeContext_t* ctx, ApeIdent_t* name, Ap
 ApeExpression_t* ape_ast_make_ifstmt(ApeContext_t* ctx, ApePtrArray_t * cases, ApeCodeblock_t* alternative)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_IF);
+    res = ape_ast_make_expression(ctx, APE_EXPR_IF);
     if(!res)
     {
         return NULL;
@@ -910,7 +926,7 @@ ApeExpression_t* ape_ast_make_ifstmt(ApeContext_t* ctx, ApePtrArray_t * cases, A
 ApeExpression_t* ape_ast_make_returnstmt(ApeContext_t* ctx, ApeExpression_t* value)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_RETURNVALUE);
+    res = ape_ast_make_expression(ctx, APE_EXPR_RETURNVALUE);
     if(!res)
     {
         return NULL;
@@ -922,7 +938,7 @@ ApeExpression_t* ape_ast_make_returnstmt(ApeContext_t* ctx, ApeExpression_t* val
 ApeExpression_t* ape_ast_make_expressionstmt(ApeContext_t* ctx, ApeExpression_t* value)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_EXPRESSION);
+    res = ape_ast_make_expression(ctx, APE_EXPR_EXPRESSION);
     if(!res)
     {
         return NULL;
@@ -934,7 +950,7 @@ ApeExpression_t* ape_ast_make_expressionstmt(ApeContext_t* ctx, ApeExpression_t*
 ApeExpression_t* ape_ast_make_whileloopstmt(ApeContext_t* ctx, ApeExpression_t* test, ApeCodeblock_t* body)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_WHILELOOP);
+    res = ape_ast_make_expression(ctx, APE_EXPR_WHILELOOP);
     if(!res)
     {
         return NULL;
@@ -947,7 +963,7 @@ ApeExpression_t* ape_ast_make_whileloopstmt(ApeContext_t* ctx, ApeExpression_t*
 ApeExpression_t* ape_ast_make_breakstmt(ApeContext_t* ctx)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_BREAK);
+    res = ape_ast_make_expression(ctx, APE_EXPR_BREAK);
     if(!res)
     {
         return NULL;
@@ -958,7 +974,7 @@ ApeExpression_t* ape_ast_make_breakstmt(ApeContext_t* ctx)
 ApeExpression_t* ape_ast_make_foreachstmt(ApeContext_t* ctx, ApeIdent_t* iterator, ApeExpression_t* source, ApeCodeblock_t* body)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_FOREACH);
+    res = ape_ast_make_expression(ctx, APE_EXPR_FOREACH);
     if(!res)
     {
         return NULL;
@@ -972,7 +988,7 @@ ApeExpression_t* ape_ast_make_foreachstmt(ApeContext_t* ctx, ApeIdent_t* iterato
 ApeExpression_t* ape_ast_make_forloopstmt(ApeContext_t* ctx, ApeExpression_t* init, ApeExpression_t* test, ApeExpression_t* update, ApeCodeblock_t* body)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_FORLOOP);
+    res = ape_ast_make_expression(ctx, APE_EXPR_FORLOOP);
     if(!res)
     {
         return NULL;
@@ -987,7 +1003,7 @@ ApeExpression_t* ape_ast_make_forloopstmt(ApeContext_t* ctx, ApeExpression_t* in
 ApeExpression_t* ape_ast_make_continuestmt(ApeContext_t* ctx)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_CONTINUE);
+    res = ape_ast_make_expression(ctx, APE_EXPR_CONTINUE);
     if(!res)
     {
         return NULL;
@@ -998,7 +1014,7 @@ ApeExpression_t* ape_ast_make_continuestmt(ApeContext_t* ctx)
 ApeExpression_t* ape_ast_make_blockstmt(ApeContext_t* ctx, ApeCodeblock_t* block)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_BLOCK);
+    res = ape_ast_make_expression(ctx, APE_EXPR_BLOCK);
     if(!res)
     {
         return NULL;
@@ -1010,7 +1026,7 @@ ApeExpression_t* ape_ast_make_blockstmt(ApeContext_t* ctx, ApeCodeblock_t* block
 ApeExpression_t* ape_ast_make_includestmt(ApeContext_t* ctx, char* path)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_INCLUDE);
+    res = ape_ast_make_expression(ctx, APE_EXPR_INCLUDE);
     if(!res)
     {
         return NULL;
@@ -1022,7 +1038,7 @@ ApeExpression_t* ape_ast_make_includestmt(ApeContext_t* ctx, char* path)
 ApeExpression_t* ape_ast_make_recoverstmt(ApeContext_t* ctx, ApeIdent_t* errorident, ApeCodeblock_t* body)
 {
     ApeExpression_t* res;
-    res = ape_ast_make_statement(ctx, APE_EXPR_RECOVER);
+    res = ape_ast_make_expression(ctx, APE_EXPR_RECOVER);
     if(!res)
     {
         return NULL;
@@ -1062,11 +1078,15 @@ ApeCodeblock_t* ape_ast_copy_codeblock(ApeCodeblock_t* block)
 {
     ApeCodeblock_t* res;
     ApePtrArray_t* statementscopy;
+    ApeDataCallback_t copyfn;
+    ApeDataCallback_t destroyfn;
+    copyfn = (ApeDataCallback_t)ape_ast_copy_expr;
+    destroyfn = (ApeDataCallback_t)ape_ast_destroy_expr;
     if(!block)
     {
         return NULL;
     }
-    statementscopy = ape_ptrarray_copywithitems(block->statements, (ApeDataCallback_t)ape_ast_copy_expr, (ApeDataCallback_t)ape_ast_destroy_expr);
+    statementscopy = ape_ptrarray_copywithitems(block->statements, copyfn, destroyfn);
     if(!statementscopy)
     {
         return NULL;
@@ -1074,7 +1094,7 @@ ApeCodeblock_t* ape_ast_copy_codeblock(ApeCodeblock_t* block)
     res = ape_ast_make_code_block(block->alloc, statementscopy);
     if(!res)
     {
-        ape_ptrarray_destroywithitems(statementscopy, (ApeDataCallback_t)ape_ast_destroy_expr);
+        ape_ptrarray_destroywithitems(statementscopy, destroyfn);
         return NULL;
     }
     return res;
@@ -1154,7 +1174,6 @@ err:
     return NULL;
 }
 
-// INTERNAL
 ApeExpression_t* ape_ast_make_expression(ApeContext_t* ctx, ApeExprType_t type)
 {
     ApeExpression_t* res;
@@ -1170,20 +1189,6 @@ ApeExpression_t* ape_ast_make_expression(ApeContext_t* ctx, ApeExprType_t type)
     return res;
 }
 
-ApeExpression_t* ape_ast_make_statement(ApeContext_t* ctx, ApeExprType_t type)
-{
-    ApeExpression_t* res = (ApeExpression_t*)ape_allocator_alloc(&ctx->alloc, sizeof(ApeExpression_t));
-    if(!res)
-    {
-        return NULL;
-    }
-    res->context = ctx;
-    res->alloc = &ctx->alloc;
-    res->type = type;
-    res->pos = g_prspriv_srcposinvalid;
-    return res;
-}
-
 ApeParser_t* ape_ast_make_parser(ApeContext_t* ctx, const ApeConfig_t* config, ApeErrorList_t* errors)
 {
     ApeParser_t* parser;
@@ -1311,7 +1316,6 @@ err:
     return NULL;
 }
 
-// INTERNAL
 ApeExpression_t* ape_parser_parsestmt(ApeParser_t* p)
 {
     ApePosition_t pos;
@@ -1561,11 +1565,17 @@ err:
 
 ApeExpression_t* ape_parser_parsereturnstmt(ApeParser_t* p)
 {
+    bool isexprblock;
     ApeExpression_t* expr;
     ApeExpression_t* res;
     expr = NULL;
     ape_lexer_nexttoken(&p->lexer);
-    if(!ape_lexer_currenttokenis(&p->lexer, TOKEN_OPSEMICOLON) && !ape_lexer_currenttokenis(&p->lexer, TOKEN_OPRIGHTBRACE) && !ape_lexer_currenttokenis(&p->lexer, TOKEN_EOF))
+    isexprblock = (
+        (!ape_lexer_currenttokenis(&p->lexer, TOKEN_OPSEMICOLON)) &&
+        (!ape_lexer_currenttokenis(&p->lexer, TOKEN_OPRIGHTBRACE)) &&
+        (!ape_lexer_currenttokenis(&p->lexer, TOKEN_EOF))
+    );
+    if(isexprblock)
     {
         expr = ape_parser_parseexpr(p, PRECEDENCE_LOWEST);
         if(!expr)
@@ -2282,7 +2292,6 @@ ApeExpression_t* ape_parser_parseliteralmap(ApeParser_t* p)
             ape_ast_destroy_expr(key);
             goto err;
         }
-
         if(!ape_lexer_expectcurrent(&p->lexer, TOKEN_OPCOLON))
         {
             goto err;
@@ -2747,7 +2756,6 @@ ApeExpression_t* ape_parser_parseincdecprefixexpr(ApeParser_t* p)
         goto err;
     }
     operation->pos = pos;
-
     res = ape_ast_make_assignexpr(p->context, dest, operation, false);
     if(!res)
     {
@@ -3104,5 +3112,3 @@ static ApeExpression_t* ape_ast_wrapexprinfunccall(ApeContext_t* ctx, ApeExpress
     callexpr->pos = expr->pos;
     return callexpr;
 }
-
-
diff --git a/context.c b/context.c
index 2cfb3b5..f105f6c 100755
--- a/context.c
+++ b/context.c
@@ -1,7 +1,6 @@
 
 #include "ape.h"
 
-//implcontext
 ApeContext_t* ape_make_context()
 {
     return ape_make_contextex(NULL, NULL, NULL);
@@ -18,11 +17,14 @@ ApeContext_t* ape_make_contextex(ApeMemAllocFunc_t malloc_fn, ApeMemFreeFunc_t f
         return NULL;
     }
     memset(ctx, 0, sizeof(ApeContext_t));
-    // NB. this currently does not work. need to figure this out eventually.
+    /* NB. this currently does not work. need to figure this out eventually. */
     {
-        //ctx->alloc = ape_make_allocator(ape_mem_defaultmalloc, ape_mem_defaultfree, ctx);
+        #if 0
+        ctx->alloc = ape_make_allocator(ape_mem_defaultmalloc, ape_mem_defaultfree, ctx);
+        #else
         ctx->alloc = ape_make_allocator(NULL, NULL, ctx);
         ctx->custom_allocator = custom_alloc;
+        #endif
     }
     ape_context_setdefaultconfig(ctx);
     ctx->debugwriter = ape_make_writerio(ctx, stderr, false, true);
@@ -191,7 +193,6 @@ ApeObject_t ape_context_executesource(ApeContext_t* ctx, const char* code, bool
     {
         goto err;
     }
-    //APE_ASSERT(ctx->vm->sp == 0);
     objres = ape_vm_getlastpopped(ctx->vm);
     if(ape_object_value_type(objres) == APE_OBJECT_NONE)
     {
@@ -263,8 +264,6 @@ ApeError_t* ape_context_geterror(ApeContext_t* ctx, int index)
     return ape_errorlist_getat(&ctx->errors, index);
 }
 
-
-
 bool ape_context_setglobal(ApeContext_t* ctx, const char* name, ApeObject_t obj)
 {
     return ape_globalstore_set(ctx->globalstore, name, obj);
@@ -272,31 +271,39 @@ bool ape_context_setglobal(ApeContext_t* ctx, const char* name, ApeObject_t obj)
 
 char* ape_context_errortostring(ApeContext_t* ctx, ApeError_t* err)
 {
-    const char* type_str = ape_error_gettypestring(err);
-    const char* filename = ape_error_getfile(err);
-    const char* line = ape_error_getsource(err);
-    int line_num = ape_error_getline(err);
-    int col_num = ape_error_getcolumn(err);
-    ApeWriter_t* buf = ape_make_writer(ctx);
+    int j;
+    int lineno;
+    int colno;
+    const char* typstr;
+    const char* filename;
+    const char* linesrc;
+    ApeWriter_t* buf;
+    ApeTraceback_t* traceback;
+    typstr = ape_error_gettypestring(err);
+    filename = ape_error_getfile(err);
+    linesrc = ape_error_getsource(err);
+    lineno = ape_error_getline(err);
+    colno = ape_error_getcolumn(err);
+    buf = ape_make_writer(ctx);
     if(!buf)
     {
         return NULL;
     }
-    if(line)
+    if(linesrc)
     {
-        ape_writer_append(buf, line);
+        ape_writer_append(buf, linesrc);
         ape_writer_append(buf, "\n");
-        if(col_num >= 0)
+        if(colno >= 0)
         {
-            for(int j = 0; j < (col_num - 1); j++)
+            for(j = 0; j < (colno - 1); j++)
             {
                 ape_writer_append(buf, " ");
             }
             ape_writer_append(buf, "^\n");
         }
     }
-    ape_writer_appendf(buf, "%s ERROR in \"%s\" on %d:%d: %s\n", type_str, filename, line_num, col_num, ape_error_getmessage(err));
-    ApeTraceback_t* traceback = ape_error_gettraceback(err);
+    ape_writer_appendf(buf, "%s ERROR in \"%s\" on %d:%d: %s\n", typstr, filename, lineno, colno, ape_error_getmessage(err));
+    traceback = ape_error_gettraceback(err);
     if(traceback)
     {
         ape_writer_appendf(buf, "traceback:\n");
@@ -317,7 +324,6 @@ static ApeObject_t ape_context_wrapnativefunc(ApeVM_t* vm, void* data, ApeSize_t
     (void)vm;
     wrapper = (ApeNativeFuncWrapper_t*)data;
     wrapper->context = vm->context;
-    //APE_ASSERT(vm == wrapper->context->vm);
     objres = wrapper->wrappedfnptr(wrapper->context, wrapper->data, argc, (ApeObject_t*)args);
     if(ape_context_haserrors(wrapper->context))
     {
diff --git a/error.c b/error.c
old mode 100644
new mode 100755
index 65f954a..377158c
--- a/error.c
+++ b/error.c
@@ -1,6 +1,5 @@
 
-#include "ape.h"
-
+#include "inline.h"
 
 ApeTraceback_t* ape_make_traceback(ApeContext_t* ctx)
 {
diff --git a/inline.h b/inline.h
index b8dd15e..1063841 100755
--- a/inline.h
+++ b/inline.h
@@ -4,9 +4,28 @@
 * this file contains code that is intended to be inlined.
 * it is *not* required in production code; only ape.h is.
 */
+#define _ISOC99_SOURCE
+#define _POSIX_C_SOURCE 200112L
 
+#include <signal.h>
+#include <math.h>
 #include "ape.h"
 
+#if defined(__GNUC__)
+    #if !defined(isfinite)
+        #define isfinite(v) (__builtin_isfinite(v))
+    #endif
+#endif
+
+#if !defined(va_copy)
+    #if defined(__GNUC__)
+        #define va_copy(d,s) __builtin_va_copy(d,s)
+    #else
+        /* https://stackoverflow.com/questions/558223/va-copy-porting-to-visual-c */
+        #define va_copy(d,s) ((d) = (s))
+    #endif
+#endif
+
 static APE_INLINE int ape_util_doubletoint(double n)
 {
     if(n == 0)
@@ -59,7 +78,7 @@ static APE_INLINE unsigned int ape_util_numbertouint32(double n)
     return (unsigned int)ape_util_numbertoint32(n);
 }
 
-// fixme
+/* fixme */
 static APE_INLINE ApeUInt_t ape_util_floattouint(ApeFloat_t val)
 {
     return val;
diff --git a/libarray.c b/libarray.c
index bbe9691..c9a4da3 100755
--- a/libarray.c
+++ b/libarray.c
@@ -241,11 +241,6 @@ void ape_valarray_orphandata(ApeValArray_t* arr)
     ape_valarray_initcapacity(arr, arr->context, 0, arr->elemsize);
 }
 
-
-//-----------------------------------------------------------------------------
-// Pointer Array
-//-----------------------------------------------------------------------------
-
 ApePtrArray_t* ape_make_ptrarray(ApeContext_t* ctx)
 {
     return ape_make_ptrarraycapacity(ctx, 0);
@@ -280,7 +275,7 @@ void ape_ptrarray_destroy(ApePtrArray_t* arr)
     ape_allocator_free(arr->alloc, arr);
 }
 
-// todo: destroy and copy in make fn
+/* todo: destroy and copy in make fn */
 void ape_ptrarray_destroywithitems(ApePtrArray_t* arr, ApeDataCallback_t destroy_fn)
 {
     if(arr == NULL)
@@ -476,8 +471,6 @@ bool ape_object_array_pushvalue(ApeObject_t object, ApeObject_t val)
     return ape_valarray_add(array, &val);
 }
 
-//bool ape_valarray_pop(ApeValArray_t *arr, void *out_value);
-
 bool ape_object_array_popvalue(ApeObject_t object, ApeObject_t* dest)
 {
 
@@ -660,10 +653,14 @@ static ApeObject_t objfn_array_map(ApeVM_t* vm, void* data, ApeSize_t argc, ApeO
     {
         val = ape_object_array_getvalue(self, i);
         ape_context_debugvalue(vm->context, "array->val", val);
-        //ape_vm_pushstack(vm, fn);
-        //ape_vm_pushstack(vm, val);
+        #if 0
+        ape_vm_pushstack(vm, fn);
+        ape_vm_pushstack(vm, val);
+        if(!ape_vm_callobjectstack(vm, fn, 1))
+        #else
         fwdargs[0] = ape_object_value_copyflat(vm->context, val);
         if(!ape_vm_callobjectargs(vm, fn, 1, fwdargs))
+        #endif
         {
             fprintf(stderr, "failed to call function\n");
             return ape_object_make_null(vm->context);
@@ -747,13 +744,13 @@ void ape_builtins_install_array(ApeVM_t* vm)
         {"map", true, objfn_array_map},
         {"join", true, objfn_array_join},
 
-        // pseudo funcs
+        /* pseudo funcs */
         {"first", false, objfn_array_first},
         {"last", false, objfn_array_last},
 
         /* TODO: implement me! */
         #if 0
-        //{"", true, objfn_array_},
+        /* {"", true, objfn_array_}, */
         {"map", true, objfn_array_map},
         {"sort", true, objfn_array_sort},
         {"grep", true, objfn_array_grep},
@@ -764,7 +761,6 @@ void ape_builtins_install_array(ApeVM_t* vm)
     psc = ape_context_make_pseudoclass(vm->context, vm->context->objarrayfuncs, APE_OBJECT_ARRAY, classname);
     for(i=0; memberfuncs[i].name != NULL; i++)
     {
-        //ape_strdict_set(vm->context->objarrayfuncs, classname, memberfuncs[i].name, &memberfuncs[i]);
         ape_pseudoclass_setmethod(psc, memberfuncs[i].name, &memberfuncs[i]);
     }
 }
diff --git a/libfunction.c b/libfunction.c
old mode 100644
new mode 100755
index f0b8d38..109ee2b
--- a/libfunction.c
+++ b/libfunction.c
@@ -57,8 +57,11 @@ ApeObject_t ape_object_make_nativefuncmemory(ApeContext_t* ctx, const char* name
     obj->valnatfunc.nativefnptr = fn;
     if(data)
     {
-        //memcpy(obj->valnatfunc.data, data, dlen);
+        #if 0
+        memcpy(obj->valnatfunc.data, data, dlen);
+        #else
         obj->valnatfunc.dataptr = data;
+        #endif
     }
     obj->valnatfunc.datalen = dlen;
     return object_make_from_data(ctx, APE_OBJECT_NATIVEFUNCTION, obj);
diff --git a/libio.c b/libio.c
old mode 100644
new mode 100755
index 3654dae..cc5e0a1
--- a/libio.c
+++ b/libio.c
@@ -208,7 +208,6 @@ static ApeObject_t cfn_file_stat(ApeVM_t* vm, void* data, ApeSize_t argc, ApeObj
             map = ape_object_make_map(vm->context);
         }
         for_field_string("name", path);
-        //ape_object_array_pushstring(ary, dent->d_name);
         for_field_string("name", path);
         for_field_string("path", path);
         for_field_number("dev", st.st_dev);
@@ -275,7 +274,6 @@ static ApeObject_t cfn_dir_readdir(ApeVM_t* vm, void* data, ApeSize_t argc, ApeO
         isfile = (dent->d_type == DT_REG);
         isdir = (dent->d_type == DT_DIR);
         subm = ape_object_make_map(vm->context);
-        //ape_object_array_pushstring(ary, dent->d_name);
         ape_object_map_setnamedstring(subm, "name", dent->d_name);
         ape_object_map_setnamednumber(subm, "ino", dent->d_ino);
         ape_object_map_setnamednumber(subm, "type", dent->d_type);
@@ -303,7 +301,6 @@ void ape_builtins_install_io(ApeVM_t* vm)
 
     static ApeNativeItem_t g_core_dirfuncs[]=
     {
-        // filesystem
         #if !defined(CORE_NODIRENT)
         {"read", cfn_dir_readdir},
         #endif
diff --git a/libmap.c b/libmap.c
old mode 100644
new mode 100755
index 968bc2e..9fb2512
--- a/libmap.c
+++ b/libmap.c
@@ -1,7 +1,6 @@
 
 #include "ape.h"
 
-// Public
 ApeValDict_t* ape_make_valdict_actual(ApeContext_t* ctx, ApeSize_t ksz, ApeSize_t vsz)
 {
     return ape_make_valdictcapacity(ctx, APE_CONF_DICT_INITIAL_SIZE, ksz, vsz);
@@ -245,7 +244,9 @@ ApeSize_t ape_valdict_getcellindex(const ApeValDict_t* dict, const void* key, un
     unsigned long checkhash;
     void* keycheck;
     *out_found = false;
-    //fprintf(stderr, "ape_valdict_getcellindex: dict=%p, dict->cellcap=%d\n", dict, dict->cellcap);
+    #if 0
+    fprintf(stderr, "ape_valdict_getcellindex: dict=%p, dict->cellcap=%d\n", dict, dict->cellcap);
+    #endif
     ofs = 0;
     if(dict->cellcap > 1)
     {
@@ -256,7 +257,9 @@ ApeSize_t ape_valdict_getcellindex(const ApeValDict_t* dict, const void* key, un
     {
         cell = APE_CONF_INVALID_VALDICT_IX;
         ix = (cell_ix + i) & ofs;
-        //fprintf(stderr, "(cell_ix=%d + i=%d) & ofs=%d == %d\n", cell_ix, i, ofs, ix);
+        #if 0
+        fprintf(stderr, "(cell_ix=%d + i=%d) & ofs=%d == %d\n", cell_ix, i, ofs, ix);
+        #endif
         cell = dict->cells[ix];
         if(cell == APE_CONF_INVALID_VALDICT_IX)
         {
@@ -391,7 +394,6 @@ ApeValDict_t* ape_valdict_copywithitems(ApeValDict_t* dict)
     return dict_copy;
 }
 
-// Public
 ApeStrDict_t* ape_make_strdict(ApeContext_t* ctx, ApeDataCallback_t copy_fn, ApeDataCallback_t destroy_fn)
 {
     bool ok;
diff --git a/libobject.c b/libobject.c
index 8da00a2..5b33d3f 100755
--- a/libobject.c
+++ b/libobject.c
@@ -226,8 +226,11 @@ void ape_tostring_object(ApeWriter_t* buf, ApeObject_t obj, bool quote_str)
                 #if 1
                 if(fltnum == ((ApeInt_t)fltnum))
                 {
-                    //ape_writer_appendf(buf, "%" PRId64, (ApeInt_t)fltnum);
+                    #if 0
+                    ape_writer_appendf(buf, "%" PRId64, (ApeInt_t)fltnum);
+                    #else
                     ape_writer_appendf(buf, "%" PRIi64, (ApeInt_t)fltnum);
+                    #endif
                 }
                 else
                 {
@@ -570,7 +573,6 @@ ApeObject_t ape_object_getkvpairat(ApeContext_t* ctx, ApeObject_t object, int ix
     return res;
 }
 
-// INTERNAL
 ApeObject_t ape_object_value_internalcopydeep(ApeContext_t* ctx, ApeObject_t obj, ApeValDict_t * copies)
 {
     ApeSize_t i;
@@ -644,7 +646,7 @@ ApeObject_t ape_object_value_internalcopydeep(ApeContext_t* ctx, ApeObject_t obj
                     return ape_object_make_null(ctx);
                 }
                 memcpy(src_positions_copy, function->compiledcode->srcpositions, sizeof(ApePosition_t) * function->compiledcode->count);
-                // todo: add compilation result copy function
+                /* todo: add compilation result copy function */
                 comp_res_copy = ape_make_compresult(ctx, bytecode_copy, src_positions_copy, function->compiledcode->count);
                 if(!comp_res_copy)
                 {
diff --git a/libpseudo.c b/libpseudo.c
old mode 100644
new mode 100755
index eb00c3d..a888c66
--- a/libpseudo.c
+++ b/libpseudo.c
@@ -66,7 +66,7 @@ ApePseudoClass_t* ape_context_findpseudoclassbytype(ApeContext_t* ctx, ApeObjTyp
     void* raw;
     const char* stag;
     ApePseudoClass_t* psc;
-    //if(typ == APE_OBJECT_)
+    /* if(typ == APE_OBJECT_) */
     stag = ape_object_value_typename(typ);
     raw = ape_strdict_getbyname(ctx->classmapping, stag);
     if(raw == NULL)
@@ -80,7 +80,6 @@ ApePseudoClass_t* ape_context_findpseudoclassbytype(ApeContext_t* ctx, ApeObjTyp
 ApeObjMemberItem_t* ape_builtin_find_objectfunc(ApeContext_t* ctx, ApeStrDict_t* dict, const char* idxname, unsigned long idxhash)
 {
     ApeObjMemberItem_t* p;
-    ApeInt_t i;
     (void)ctx;
     p = (ApeObjMemberItem_t*)ape_strdict_getbyhash(dict, idxname, idxhash);
     if(p != NULL)
@@ -94,7 +93,7 @@ ApeObjMemberItem_t* builtin_get_object(ApeContext_t* ctx, ApeObjType_t objt, con
 {
     ApePseudoClass_t* psc;
     ApeObjMemberItem_t* aom;
-    // todo: currently maps are explicitly not supported.
+    /* todo: currently maps are explicitly not supported. */
     if(objt == APE_OBJECT_MAP)
     {
         return NULL;
diff --git a/libstring.c b/libstring.c
index 92dde47..3f80f77 100755
--- a/libstring.c
+++ b/libstring.c
@@ -84,8 +84,10 @@ bool ape_object_string_reservecapacity(ApeObjData_t* data, ApeSize_t capacity)
     {
         if(string->is_allocated)
         {
-            APE_ASSERT(false);// should never happen
-            ape_allocator_free(data->mem->alloc, string->value_allocated);// just in case
+            /* should never happen */
+            APE_ASSERT(false);
+            /* just in case */
+            ape_allocator_free(data->mem->alloc, string->value_allocated);
         }
         string->capacity = APE_CONF_SIZE_STRING_BUFSIZE - 1;
         string->is_allocated = false;
@@ -384,6 +386,7 @@ ApeObject_t ape_builtins_stringformat(ApeContext_t* ctx, const char* fmt, ApeSiz
     ApeObject_t srt;
     ApeArgCheck_t check;
     ApeWriter_t* buf;
+    (void)pch;
     idx = 0;
     cch = -1;
     pch = -1;
@@ -477,7 +480,6 @@ ApeObject_t ape_builtins_stringformat(ApeContext_t* ctx, const char* fmt, ApeSiz
 
 static ApeObject_t objfn_string_format(ApeVM_t* vm, void* data, ApeSize_t argc, ApeObject_t* args)
 {
-    char ch;
     const char* inpstr;
     ApeSize_t inplen;
     ApeObject_t self;
@@ -584,7 +586,7 @@ void ape_builtins_install_string(ApeVM_t* vm)
         {"chr", cfn_string_chr},
         {"ord", cfn_string_ord},
 
-        // js-isms
+        /* js-isms */
         {"fromCharCode", cfn_string_chr},
 
         #if 0
@@ -600,17 +602,17 @@ void ape_builtins_install_string(ApeVM_t* vm)
         {"index", true, objfn_string_indexof},
         {"substr", true, objfn_string_substr},
 
-        // js-isms
+        /* js-isms */
         {"charAt", true, objfn_string_charat},
         {"charCodeAt", true, objfn_string_byteat},
         {"indexOf", true, objfn_string_indexof},
 
-        // utilities
+        /* utilities */
         {"format", true, objfn_string_format},
 
         /* TODO: implement me! */
         #if 0
-        //{"", true, objfn_string_},
+        /* {"", true, objfn_string_}, */
         {"upper", true, objfn_string_toupper},
         {"lower", true, objfn_string_tolower},
         {"toupper", true, objfn_string_toupper},
diff --git a/main.c b/main.c
old mode 100644
new mode 100755
index 9a54534..bd61480
--- a/main.c
+++ b/main.c
@@ -12,8 +12,6 @@
 
 #include "ape.h"
 
-// endtypes
-
 enum
 {
     MAX_RESTARGS = 1024,
diff --git a/mem.c b/mem.c
old mode 100644
new mode 100755
index e0bf440..bdaf40c
--- a/mem.c
+++ b/mem.c
@@ -160,8 +160,10 @@ ApeObjData_t* ape_gcmem_allocobjdata(ApeGCMemory_t* mem, ApeObjType_t type)
     }
     memset(data, 0, sizeof(ApeObjData_t));
     APE_ASSERT(ape_ptrarray_count(mem->objects_back) >= ape_ptrarray_count(mem->objects));
+    /*
     // we want to make sure that appending to objects_back never fails in sweep
     // so this only reserves space there.
+    */
     ok = ape_ptrarray_add(mem->objects_back, data);
     if(!ok)
     {
@@ -185,7 +187,7 @@ bool ape_gcmem_canputinpool(ApeGCMemory_t* mem, ApeObjData_t* data)
     ApeObject_t obj;
     ApeObjPool_t* pool;
     obj = object_make_from_data(mem->context, data->type, data);
-    // this is to ensure that large objects won't be kept in pool indefinitely
+    /* this is to ensure that large objects won't be kept in pool indefinitely */
     switch(data->type)
     {
         case APE_OBJECT_ARRAY:
@@ -225,7 +227,6 @@ bool ape_gcmem_canputinpool(ApeGCMemory_t* mem, ApeObjData_t* data)
     return true;
 }
 
-// INTERNAL
 ApeObjPool_t* ape_gcmem_getpoolfor(ApeGCMemory_t* mem, ApeObjType_t type)
 {
     switch(type)
@@ -266,8 +267,10 @@ ApeObjData_t* ape_gcmem_getfrompool(ApeGCMemory_t* mem, ApeObjType_t type)
     }
     data = pool->datapool[pool->count - 1];
     APE_ASSERT(ape_ptrarray_count(mem->objects_back) >= ape_ptrarray_count(mem->objects));
+    /*
     // we want to make sure that appending to objects_back never fails in sweep
     // so this only reserves space there.
+    */
     ok = ape_ptrarray_add(mem->objects_back, data);
     if(!ok)
     {
@@ -416,7 +419,7 @@ void ape_gcmem_sweep(ApeGCMemory_t* mem)
         data = (ApeObjData_t*)ape_ptrarray_get(mem->objects, i);
         if(data->gcmark)
         {
-            // this should never fail because objects_back's size should be equal to objects
+            /* this should never fail because objects_back's size should be equal to objects */
             ok = ape_ptrarray_add(mem->objects_back, data);
             (void)ok;
             APE_ASSERT(ok);
diff --git a/prot.inc b/prot.inc
index 688bf50..b75e427 100644
--- a/prot.inc
+++ b/prot.inc
@@ -268,8 +268,6 @@ ApeExpression_t *ape_ast_make_continuestmt(ApeContext_t *ctx);
 ApeExpression_t *ape_ast_make_blockstmt(ApeContext_t *ctx, ApeCodeblock_t *block);
 ApeExpression_t *ape_ast_make_includestmt(ApeContext_t *ctx, char *path);
 ApeExpression_t *ape_ast_make_recoverstmt(ApeContext_t *ctx, ApeIdent_t *errorident, ApeCodeblock_t *body);
-void *ape_ast_destroy_stmt(ApeExpression_t *stmt);
-ApeExpression_t *ape_ast_copy_stmt(const ApeExpression_t *stmt);
 ApeCodeblock_t *ape_ast_make_code_block(ApeAllocator_t *alloc, ApePtrArray_t *statements);
 void *ape_ast_destroy_codeblock(ApeCodeblock_t *block);
 ApeCodeblock_t *ape_ast_copy_codeblock(ApeCodeblock_t *block);
@@ -278,7 +276,6 @@ ApeIfCase_t *ape_ast_make_if_case(ApeAllocator_t *alloc, ApeExpression_t *test,
 void *ape_ast_destroy_ifcase(ApeIfCase_t *cond);
 ApeIfCase_t *ape_ast_copy_ifcase(ApeIfCase_t *ifcase);
 ApeExpression_t *ape_ast_make_expression(ApeContext_t *ctx, ApeExprType_t type);
-ApeExpression_t *ape_ast_make_statement(ApeContext_t *ctx, ApeExprType_t type);
 ApeParser_t *ape_ast_make_parser(ApeContext_t *ctx, const ApeConfig_t *config, ApeErrorList_t *errors);
 void ape_parser_destroy(ApeParser_t *parser);
 ApePtrArray_t *ape_parser_parseall(ApeParser_t *parser, const char *input, ApeCompFile_t *file);
@@ -473,7 +470,7 @@ bool ape_writer_grow(ApeWriter_t *buf, ApeSize_t new_capacity);
 /* tostring.c */
 const char *ape_tostring_operator(ApeOperator_t op);
 const char *ape_tostring_exprtype(ApeExprType_t type);
-bool ape_tostring_stmtlist(ApeWriter_t *buf, ApePtrArray_t *statements);
+bool ape_tostring_exprlist(ApeWriter_t *buf, ApePtrArray_t *statements);
 bool ape_tostring_expression(ApeWriter_t *buf, ApeExpression_t *expr);
 bool ape_tostring_codeblock(ApeWriter_t *buf, ApeCodeblock_t *stmt);
 bool ape_tostring_compresult(ApeWriter_t *buf, ApeCompResult_t *res);
diff --git a/tostring.c b/tostring.c
index 323785c..60708d8 100755
--- a/tostring.c
+++ b/tostring.c
@@ -233,16 +233,22 @@ bool ape_tostring_expression(ApeWriter_t* buf, ApeExpression_t* expr)
         case APE_EXPR_LITERALNUMBER:
             {
                 fltnum = expr->numberliteral;
-                //ape_writer_appendf(buf, "%1.17g", fltnum);
+                #if 0
+                ape_writer_appendf(buf, "%1.17g", fltnum);
+                #else
                 if(fltnum == ((ApeInt_t)fltnum))
                 {
-                    //ape_writer_appendf(buf, "%" PRId64, (ApeInt_t)fltnum);
+                    #if 0
+                    ape_writer_appendf(buf, "%" PRId64, (ApeInt_t)fltnum);
+                    #else
                     ape_writer_appendf(buf, "%" PRIi64, (ApeInt_t)fltnum);
+                    #endif
                 }
                 else
                 {
                     ape_writer_appendf(buf, "%g", fltnum);
                 }
+                #endif
             }
             break;
         case APE_EXPR_LITERALBOOL:
@@ -582,18 +588,27 @@ bool ape_tostring_bytecode(ApeWriter_t* buf, ApeUShort_t* code, ApePosition_t* s
             ape_writer_append(buf, " ");
             if(op == APE_OPCODE_MKNUMBER)
             {
-                //dv = ape_util_uinttofloat(operands[i]);
+                #if 0
+                dv = ape_util_uinttofloat(operands[i]);
+                #else
                 dv = (ApeFloat_t)operands[i];
-                //ape_writer_appendf(buf, "%1.17g", dv);
+                #endif
+                #if 0
+                ape_writer_appendf(buf, "%1.17g", dv);
+                #else
                 if(dv == ((ApeInt_t)dv))
                 {
-                    //ape_writer_appendf(buf, "%" PRId64, (ApeInt_t)fltnum);
+                    #if 0
+                    ape_writer_appendf(buf, "%" PRId64, (ApeInt_t)fltnum);
+                    #else
                     ape_writer_appendf(buf, "int<%" PRIi64 ">", (ApeInt_t)dv);
+                    #endif
                 }
                 else
                 {
                     ape_writer_appendf(buf, "flt<%f>", dv);
                 }
+                #endif
             }
             else
             {
diff --git a/util.c b/util.c
index 6b87ad1..49307e5 100755
--- a/util.c
+++ b/util.c
@@ -1,4 +1,5 @@
 
+#define _XOPEN_SOURCE 500
 #include <time.h>
 #if defined(__linux__)
     #include <sys/time.h>
@@ -42,46 +43,47 @@ ApeTimer_t ape_util_timerstart()
 {
     ApeTimer_t timer;
     memset(&timer, 0, sizeof(ApeTimer_t));
-/*
-#if defined(APE_POSIX)
-    // At some point it should be replaced with more accurate per-platform timers
-    struct timeval start_time;
-    gettimeofday(&start_time, NULL);
-    timer.start_offset = start_time.tv_sec;
-    timer.start_time_ms = start_time.tv_usec / 1000.0;
-#elif defined(APE_WINDOWS)
-    LARGE_INTEGER li;
-    QueryPerformanceFrequency(&li);// not sure what to do if it fails
-    timer.pc_frequency = (ApeFloat_t)(li.QuadPart) / 1000.0;
-    QueryPerformanceCounter(&li);
-    timer.start_time_ms = li.QuadPart / timer.pc_frequency;
-#elif defined(APE_EMSCRIPTEN)
-    timer.start_time_ms = emscripten_get_now();
-#endif
-*/
+    #if 0
+        #if defined(APE_POSIX)
+            /* At some point it should be replaced with more accurate per-platform timers */
+            struct timeval start_time;
+            gettimeofday(&start_time, NULL);
+            timer.start_offset = start_time.tv_sec;
+            timer.start_time_ms = start_time.tv_usec / 1000.0;
+        #elif defined(APE_WINDOWS)
+            LARGE_INTEGER li;
+            /* not sure what to do if it fails */
+            QueryPerformanceFrequency(&li);
+            timer.pc_frequency = (ApeFloat_t)(li.QuadPart) / 1000.0;
+            QueryPerformanceCounter(&li);
+            timer.start_time_ms = li.QuadPart / timer.pc_frequency;
+        #elif defined(APE_EMSCRIPTEN)
+            timer.start_time_ms = emscripten_get_now();
+        #endif
+    #endif
     return timer;
 }
 
 ApeFloat_t ape_util_timergetelapsed(const ApeTimer_t* timer)
 {
     (void)timer;
-/*
-#if defined(APE_POSIX)
-    struct timeval current_time;
-    gettimeofday(&current_time, NULL);
-    int time_s = (int)((ApeInt_t)current_time.tv_sec - timer->start_offset);
-    ApeFloat_t current_time_ms = (time_s * 1000) + (current_time.tv_usec / 1000.0);
-    return current_time_ms - timer->start_time_ms;
-#elif defined(APE_WINDOWS)
-    LARGE_INTEGER li;
-    QueryPerformanceCounter(&li);
-    ApeFloat_t current_time_ms = li.QuadPart / timer->pc_frequency;
-    return current_time_ms - timer->start_time_ms;
-#elif defined(APE_EMSCRIPTEN)
-    ApeFloat_t current_time_ms = emscripten_get_now();
-    return current_time_ms - timer->start_time_ms;
-#endif
-*/
+    #if 0
+        #if defined(APE_POSIX)
+            struct timeval current_time;
+            gettimeofday(&current_time, NULL);
+            int time_s = (int)((ApeInt_t)current_time.tv_sec - timer->start_offset);
+            ApeFloat_t current_time_ms = (time_s * 1000) + (current_time.tv_usec / 1000.0);
+            return current_time_ms - timer->start_time_ms;
+        #elif defined(APE_WINDOWS)
+            LARGE_INTEGER li;
+            QueryPerformanceCounter(&li);
+            ApeFloat_t current_time_ms = li.QuadPart / timer->pc_frequency;
+            return current_time_ms - timer->start_time_ms;
+        #elif defined(APE_EMSCRIPTEN)
+            ApeFloat_t current_time_ms = emscripten_get_now();
+            return current_time_ms - timer->start_time_ms;
+        #endif
+    #endif
     return 0;
 }
 
diff --git a/vm.c b/vm.c
index d4098d2..ea44bf2 100755
--- a/vm.c
+++ b/vm.c
@@ -24,7 +24,6 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
 
-#include <signal.h>
 #include "inline.h"
 
 static const ApePosition_t g_vmpriv_srcposinvalid = { NULL, -1, -1 };
@@ -396,7 +395,8 @@ bool ape_symtable_addmodulesymbol(ApeSymTable_t* st, ApeSymbol_t* symbol)
     }
     if(ape_symtable_symbol_is_defined(st, symbol->name))
     {
-        return true;// todo: make sure it should be true in this case
+        /* todo: make sure it should be true in this case */
+        return true;
     }
     ApeSymbol_t* copy = ape_symbol_copy(symbol);
     if(!copy)
@@ -430,11 +430,13 @@ ApeSymbol_t* ape_symtable_define(ApeSymTable_t* table, const char* name, bool as
     }
     if(strchr(name, ':'))
     {
-        return NULL;// module symbol
+        /* module symbol */
+        return NULL;
     }
     if(APE_STREQ(name, "this"))
     {
-        return NULL;// "this" is reserved
+        /* "this" is reserved */
+        return NULL;
     }
     symbol_type = table->outer == NULL ? APE_SYMBOL_MODULEGLOBAL : APE_SYMBOL_LOCAL;
     ix = ape_vm_nextsymbolindex(table);
@@ -523,7 +525,8 @@ ApeSymbol_t* ape_symtable_definefuncname(ApeSymTable_t* st, const char* name, bo
     ApeSymbol_t* symbol;
     if(strchr(name, ':'))
     {
-        return NULL;// module symbol
+        /* module symbol */
+        return NULL;
     }
     symbol = ape_make_symbol(st->context, name, APE_SYMBOL_FUNCTION, 0, assignable);
     if(!symbol)
@@ -603,7 +606,7 @@ bool ape_symtable_symbol_is_defined(ApeSymTable_t* table, const char* name)
 {
     ApeBlockScope_t* top_scope;
     ApeSymbol_t* symbol;
-    // todo: rename to something more obvious
+    /* todo: rename to something more obvious */
     symbol = ape_globalstore_getsymbol(table->globalstore, name);
     if(symbol)
     {
@@ -689,7 +692,6 @@ const ApeSymbol_t* ape_symtable_getmoduleglobalsymbolat(const ApeSymTable_t* tab
     return (ApeSymbol_t*)ape_ptrarray_get(table->module_global_symbols, ix);
 }
 
-// INTERNAL
 ApeBlockScope_t* ape_make_blockscope(ApeContext_t* ctx, int offset)
 {
     ApeBlockScope_t* new_scope;
@@ -967,21 +969,23 @@ ApeObject_t ape_vm_getglobal(ApeVM_t* vm, ApeSize_t ix)
     return vm->globals[ix];
 }
 
-// INTERNAL
 void ape_vm_setstackpointer(ApeVM_t* vm, int new_sp)
 {
+    int count;
+    size_t bytescount;
+    /* to avoid gcing freed objects */
     if(new_sp > vm->sp)
-    {// to avoid gcing freed objects
-        int count = new_sp - vm->sp;
-        size_t bytes_count = count * sizeof(ApeObject_t);
-        memset(vm->stack + vm->sp, 0, bytes_count);
+    {
+        count = new_sp - vm->sp;
+        bytescount = count * sizeof(ApeObject_t);
+        memset(vm->stack + vm->sp, 0, bytescount);
     }
     vm->sp = new_sp;
 }
 
 void ape_vm_pushstack(ApeVM_t* vm, ApeObject_t obj)
 {
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     if(vm->sp >= APE_CONF_SIZE_VM_STACK)
     {
         APE_ASSERT(false);
@@ -1002,7 +1006,7 @@ void ape_vm_pushstack(ApeVM_t* vm, ApeObject_t obj)
 
 ApeObject_t ape_vm_popstack(ApeVM_t* vm)
 {
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     if(vm->sp == 0)
     {
         ape_errorlist_add(vm->errors, APE_ERROR_RUNTIME, ape_frame_srcposition(vm->currentframe), "stack underflow");
@@ -1026,7 +1030,7 @@ ApeObject_t ape_vm_popstack(ApeVM_t* vm)
 ApeObject_t ape_vm_getstack(ApeVM_t* vm, int nth_item)
 {
     int ix = vm->sp - 1 - nth_item;
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     if(ix < 0 || ix >= APE_CONF_SIZE_VM_STACK)
     {
         ape_errorlist_addformat(vm->errors, APE_ERROR_RUNTIME, ape_frame_srcposition(vm->currentframe), "invalid stack index: %d", nth_item);
@@ -1039,7 +1043,7 @@ ApeObject_t ape_vm_getstack(ApeVM_t* vm, int nth_item)
 
 void ape_vm_pushthisstack(ApeVM_t* vm, ApeObject_t obj)
 {
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     if(vm->this_sp >= APE_CONF_SIZE_VM_THISSTACK)
     {
         APE_ASSERT(false);
@@ -1053,11 +1057,10 @@ void ape_vm_pushthisstack(ApeVM_t* vm, ApeObject_t obj)
 
 ApeObject_t ape_vm_popthisstack(ApeVM_t* vm)
 {
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     if(vm->this_sp == 0)
     {
         ape_errorlist_add(vm->errors, APE_ERROR_RUNTIME, ape_frame_srcposition(vm->currentframe), "this stack underflow");
-        //APE_ASSERT(false);
         return ape_object_make_null(vm->context);
     }
 #endif
@@ -1073,7 +1076,7 @@ ApeObject_t ape_vm_getthisstack(ApeVM_t* vm, int nth_item)
     {
         ix = nth_item;
     }
-#ifdef APE_DEBUG
+#if defined(APE_DEBUG) && (APE_DEBUG == 1)
     if(ix < 0 || ix >= APE_CONF_SIZE_VM_THISSTACK)
     {
         ape_errorlist_addformat(vm->errors, APE_ERROR_RUNTIME, ape_frame_srcposition(vm->currentframe), "invalid this stack index: %d", nth_item);
@@ -1279,7 +1282,7 @@ ApeObject_t ape_vm_callnativefunction(ApeVM_t* vm, ApeObject_t callee, ApePositi
         traceback = ape_make_traceback(vm->context);
         if(traceback)
         {
-            // error builtin is treated in a special way
+            /* error builtin is treated in a special way */
             if(!APE_STREQ(nfunc->name, "error"))
             {
                 ape_traceback_append(traceback, nfunc->name, g_vmpriv_srcposinvalid);
@@ -1487,7 +1490,7 @@ bool ape_vm_appendstring(ApeVM_t* vm, ApeObject_t left, ApeObject_t right, ApeOb
     {
         leftlen = (int)ape_object_string_getlength(left);
         rightlen = (int)ape_object_string_getlength(right);
-        // avoid doing unnecessary copying by reusing the origin as-is
+        /* avoid doing unnecessary copying by reusing the origin as-is */
         if(leftlen == 0)
         {
             ape_vm_pushstack(vm, right);
@@ -1666,7 +1669,7 @@ bool ape_vm_math(ApeVM_t* vm, ApeObject_t left, ApeObject_t right, ApeOpcodeValu
     ApeInt_t rightint;
     ApeObjType_t lefttype;
     ApeObjType_t righttype;
-    // NULL to 0 coercion
+    /* NULL to 0 coercion */
     if(ape_object_value_isnumeric(left) && ape_object_value_isnull(right))
     {
         right = ape_object_make_number(vm->context, 0);
@@ -1708,8 +1711,11 @@ bool ape_vm_math(ApeVM_t* vm, ApeObject_t left, ApeObject_t right, ApeOpcodeValu
                 break;
             case APE_OPCODE_MOD:
                 {
-                    //bigres = fmod(leftval, rightval);
+                    #if 0
+                    bigres = fmod(leftval, rightval);
+                    #else
                     bigres = (leftint % rightint);
+                    #endif
                 }
                 break;
             case APE_OPCODE_BITOR:
@@ -1874,7 +1880,8 @@ bool ape_vm_executefunction(ApeVM_t* vm, ApeObject_t function, ApeValArray_t * c
         return false;
     }
     #endif
-    function_function = ape_object_value_asfunction(function);// naming is hard
+    /* naming is hard */
+    function_function = ape_object_value_asfunction(function);
     ok = false;
     ok = ape_frame_init(&new_frame, function, vm->sp - function_function->numargs);
     if(!ok)
@@ -1971,7 +1978,9 @@ bool ape_vm_executefunction(ApeVM_t* vm, ApeObject_t function, ApeValArray_t * c
                     {
                         comparison_res = ape_object_value_compare(left, right, &ok);
                         if(ok || opcode == APE_OPCODE_COMPAREEQUAL)
-                        //if(opcode == APE_OPCODE_COMPAREEQUAL)
+                        #if 0
+                        if(opcode == APE_OPCODE_COMPAREEQUAL)
+                        #endif
                         {
                             objres = ape_object_make_number(vm->context, comparison_res);
                             ape_vm_pushstack(vm, objres);
@@ -2204,13 +2213,14 @@ bool ape_vm_executefunction(ApeVM_t* vm, ApeObject_t function, ApeValArray_t * c
             case APE_OPCODE_GETTHIS:
                 {
                     objval = ape_vm_getthisstack(vm, 0);
-                    //objval = ape_vm_popthisstack(vm);
+                    #if 0
+                    objval = ape_vm_popthisstack(vm);
+                    #endif
                     ape_vm_pushstack(vm, objval);
                 }
                 break;
             case APE_OPCODE_GETINDEX:
                 {
-                    //raise(SIGINT);
                     index = ape_vm_popstack(vm);
                     left = ape_vm_popstack(vm);
                     /*if(ape_object_value_isnull(left))
@@ -2487,10 +2497,13 @@ bool ape_vm_executefunction(ApeVM_t* vm, ApeObject_t function, ApeValArray_t * c
                 break;
             case APE_OPCODE_MKNUMBER:
                 {
-                    // FIXME: why does ape_util_uinttofloat break things here?
+                    /* FIXME: why does ape_util_uinttofloat break things here? */
                     val = ape_frame_readuint64(vm->currentframe);
-                    //valdouble = ape_util_uinttofloat(val);
+                    #if 0
+                    valdouble = ape_util_uinttofloat(val);
+                    #else
                     valdouble = val;
+                    #endif
                     objval = ape_object_make_number(vm->context, valdouble);
                     ape_vm_pushstack(vm, objval);
                 }
diff --git a/writer.c b/writer.c
index 4828c5e..c362c16 100755
--- a/writer.c
+++ b/writer.c
@@ -112,7 +112,7 @@ bool ape_writer_appendlen(ApeWriter_t* buf, const char* str, ApeSize_t str_len)
         (buf->iowriter)(buf->context, buf->iohandle, str, str_len);
         if(buf->iomustflush)
         {
-            // todo: this should also be a function pointer. just in case.
+            /* todo: this should also be a function pointer. just in case. */
             fflush((FILE*)buf->iohandle);
         }
         return true;
