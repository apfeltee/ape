
// this is what `a >>> b` does ...
function unshiftright(a, b) {
    if((b >= 32) || (b < -32)) {
        m = (b / 32)
        b = b - (m * 32)
    }
    if(b < 0) {
        b = 32 + b
    }
    if (b == 0) {
        return ((a >> 1) & 2147483647) * 2 + ((a >> b) & 1)
    }
    if (a < 0)  {
        a = (a >> 1) 
        a = a & 2147483647
        a = a | 1073741824 
        a = (a >> (b - 1)) 
    } else {
        a = (a >> b)
    } 
    return a
}


g_upperhex = 0
g_b64pad = ""
g_chrsz =   8


function fn_safe_add(x, y)
{
    var lsw = (x & 65535) + (y & 65535)
    var msw = ((x >> 16) + (y >> 16)) + (lsw >> 16)
    return ((msw << 16) | (lsw & 65535))
}

function fn_bit_rol(num, cnt) {
    return (num << cnt) | unshiftright(num, (32 - cnt))
}

function fn_md5_cmn(q, a, b, x, s, t)
{
    return fn_safe_add(fn_bit_rol(fn_safe_add(fn_safe_add(a, q), fn_safe_add(x, t)), s),b)
}

function fn_md5_ff(a, b, c, d, x, s, t)
{
    return fn_md5_cmn((b & c) | (bitnot(b) & d), a, b, x, s, t)
}

function fn_md5_gg(a, b, c, d, x, s, t)
{
    return fn_md5_cmn((b & d) | (c & bitnot(d)), a, b, x, s, t)
}

function fn_md5_hh(a, b, c, d, x, s, t)
{
    return fn_md5_cmn(b ^ c ^ d, a, b, x, s, t)
}

function fn_md5_ii(a, b, c, d, x, s, t)
{
    return fn_md5_cmn(c ^ (b | bitnot(d)), a, b, x, s, t)
}


function fn_core_md5(x, slen) {
    x[slen >> 5] |= 128 << ((slen) % 32)
    x[(unshiftright((slen + 64), 9) << 4) + 14] = slen
    var a =  1732584193
    var b = -271733879
    var c = -1732584194
    var d =  271733878
    var i = 0
    for(i = 0; i < len(x); i += 16)
    {
        var olda = a
        var oldb = b
        var oldc = c
        var oldd = d
        a = fn_md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936)
        d = fn_md5_ff(d, a, b, c, x[i+ 1], 12, -389564586)
        c = fn_md5_ff(c, d, a, b, x[i+ 2], 17,  606105819)
        b = fn_md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330)
        a = fn_md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897)
        d = fn_md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426)
        c = fn_md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341)
        b = fn_md5_ff(b, c, d, a, x[i+ 7], 22, -45705983)
        a = fn_md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416)
        d = fn_md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417)
        c = fn_md5_ff(c, d, a, b, x[i+10], 17, -42063)
        b = fn_md5_ff(b, c, d, a, x[i+11], 22, -1990404162)
        a = fn_md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682)
        d = fn_md5_ff(d, a, b, c, x[i+13], 12, -40341101)
        c = fn_md5_ff(c, d, a, b, x[i+14], 17, -1502002290)
        b = fn_md5_ff(b, c, d, a, x[i+15], 22,  1236535329)
        a = fn_md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510)
        d = fn_md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632)
        c = fn_md5_gg(c, d, a, b, x[i+11], 14,  643717713)
        b = fn_md5_gg(b, c, d, a, x[i+ 0], 20, -373897302)
        a = fn_md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691)
        d = fn_md5_gg(d, a, b, c, x[i+10], 9 ,  38016083)
        c = fn_md5_gg(c, d, a, b, x[i+15], 14, -660478335)
        b = fn_md5_gg(b, c, d, a, x[i+ 4], 20, -405537848)
        a = fn_md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438)
        d = fn_md5_gg(d, a, b, c, x[i+14], 9 , -1019803690)
        c = fn_md5_gg(c, d, a, b, x[i+ 3], 14, -187363961)
        b = fn_md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501)
        a = fn_md5_gg(a, b, c, d, x[i+13], 5 , -1444681467)
        d = fn_md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784)
        c = fn_md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473)
        b = fn_md5_gg(b, c, d, a, x[i+12], 20, -1926607734)
        a = fn_md5_hh(a, b, c, d, x[i+ 5], 4 , -378558)
        d = fn_md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463)
        c = fn_md5_hh(c, d, a, b, x[i+11], 16,  1839030562)
        b = fn_md5_hh(b, c, d, a, x[i+14], 23, -35309556)
        a = fn_md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060)
        d = fn_md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353)
        c = fn_md5_hh(c, d, a, b, x[i+ 7], 16, -155497632)
        b = fn_md5_hh(b, c, d, a, x[i+10], 23, -1094730640)
        a = fn_md5_hh(a, b, c, d, x[i+13], 4 ,  681279174)
        d = fn_md5_hh(d, a, b, c, x[i+ 0], 11, -358537222)
        c = fn_md5_hh(c, d, a, b, x[i+ 3], 16, -722521979)
        b = fn_md5_hh(b, c, d, a, x[i+ 6], 23,  76029189)
        a = fn_md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487)
        d = fn_md5_hh(d, a, b, c, x[i+12], 11, -421815835)
        c = fn_md5_hh(c, d, a, b, x[i+15], 16,  530742520)
        b = fn_md5_hh(b, c, d, a, x[i+ 2], 23, -995338651)
        a = fn_md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844)
        d = fn_md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415)
        c = fn_md5_ii(c, d, a, b, x[i+14], 15, -1416354905)
        b = fn_md5_ii(b, c, d, a, x[i+ 5], 21, -57434055)
        a = fn_md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571)
        d = fn_md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606)
        c = fn_md5_ii(c, d, a, b, x[i+10], 15, -1051523)
        b = fn_md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799)
        a = fn_md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359)
        d = fn_md5_ii(d, a, b, c, x[i+15], 10, -30611744)
        c = fn_md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380)
        b = fn_md5_ii(b, c, d, a, x[i+13], 21,  1309151649)
        a = fn_md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070)
        d = fn_md5_ii(d, a, b, c, x[i+11], 10, -1120210379)
        c = fn_md5_ii(c, d, a, b, x[i+ 2], 15,  718787259)
        b = fn_md5_ii(b, c, d, a, x[i+ 9], 21, -343485551)
        a = fn_safe_add(a, olda)
        b = fn_safe_add(b, oldb)
        c = fn_safe_add(c, oldc)
        d = fn_safe_add(d, oldd)
    }
    return [a, b, c, d]
}

function fn_str2binl(str) {
    var i = 0
    var bin = []
    for(i=0; i<256; i++)
    {
        append(bin, 0)
    }
    var mask = (1 << g_chrsz) - 1
    while(i < (len(str) * g_chrsz))
    {
        bin[i>>5] = bin[i>>5] | (ord(str[(i / g_chrsz)]) & mask) << (i % 32)
        i += g_chrsz
    }
    return bin
}

function fn_core_hmac_md5(key, data) {
    var i = 0
    var ipad = []
    var opad = []
    var bkey = fn_str2binl(key)
    if(len(bkey) > 16)
    {
        bkey = fn_core_md5(bkey, len(key) * g_chrsz)
    }
    for(i = 0; i < 16; i++)
    {
        ipad[i] = bkey[i] ^ 909522486
        opad[i] = bkey[i] ^ 1549556828
    }
    println("concat?");
    var hash = fn_core_md5(ipad.concat(fn_str2binl(data)), 512 + len(data) * g_chrsz)
    return fn_core_md5(opad.concat(hash), 512 + 128)
}


function fn_binl2hex(binarray) {
    var hex_tab = null
    if(g_upperhex)
    {
        hex_tab = "0123456789ABCDEF"
    }
    else
    {
        hex_tab = "0123456789abcdef"
    }
    var str = ""
    var i = 0
    for(i = 0; i < (len(binarray) * 4); i++)
    {
        str += (hex_tab[(binarray[i >> 2] >> (((i % 4) * 8) + 4)) & 15] + hex_tab[(binarray[i >> 2] >> ((i % 4) * 8)) & 15]);
    }
    return str
}

function fn_binl2b64(binarray) {
    var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    var str = ""
    var i = 0
    for(i = 0; i < (len(binarray) * 4); i += 3)
    {
        var triplet = (
            ((((binarray[i >> 2] >> (8 * (i % 4))) & 255) << 16) |
            (((binarray[(i + 1) >> 2] >> (8 * ((i + 1) % 4))) & 255) << 8)) |
            ((binarray[(i + 2) >> 2] >> (8 * ((i + 2) % 4))) & 255)
        );
        var j = 0
        for(j = 0; j < 4; j++) {
            if(((i * 8) + (j * 6)) > (len(binarray) * 32))
            {
                str += g_b64pad
            }
            else
            {
                str += tab[((triplet >> (6*(3-j))) & 63)]
            }
        }
    }
    return str
}

function fn_hex_md5(s)
{
    return fn_binl2hex(fn_core_md5(fn_str2binl(s), len(s) * g_chrsz))
}

function fn_b64_md5(s)
{
    return fn_binl2b64(fn_core_md5(fn_str2binl(s), len(s) * g_chrsz))
}

function fn_hex_hmac_md5(key, data)
{
    return fn_binl2hex(fn_core_hmac_md5(key, data))
}

function fn_b64_hmac_md5(key, data) {
    return fn_binl2b64(fn_core_hmac_md5(key, data))
}

function domd5(str) {
    return fn_hex_md5(str)
}

vs = domd5("hello")
println("vs = ", vs)

