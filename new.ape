"do not edit this file directly, edit testinput.inc!"
var _check_result = 0
const trailing_comma_array = [1, 2, 3]
println("Object.length(trailing_comma_array)=", Object["length"](trailing_comma_array))
_check_result = (Object["length"](trailing_comma_array) == 3)
println((("checking (" + tostring("Object.length(trailing_comma_array)")) + ((" " + tostring("==")) + ((" " + tostring(3)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const trailing_comma_dict = {"a" : 1, "b" : 2, "c" : 3}
_check_result = (Object["length"](trailing_comma_dict) == 3)
println((("checking (" + tostring("Object.length(trailing_comma_dict)")) + ((" " + tostring("==")) + ((" " + tostring(3)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const test_gc_fail = function(a, b, c) { const x = []
const y = []
const z = []
 }
test_gc_fail(1, 2, 3)
test_gc_fail(1, 2, 3)
const fun = function() { const arr = [1, 2, 3]
const dict = {"a" : 1, "b" : 2}
const str = "lorem ipsum"
dict["a"] = 1
const res = function(a, b, c) { const res_str = ((tostring(a) + tostring(b)) + tostring(c))
return res_str
 }
return res(1, 2, 3)
 }
println(fun())
const make_person = function(name) { return {"name" : name, "hello" : function() { println(("hello " + this["name"]))
 }, "make_hello" : function() { return ("hello " + this["name"])
 }}
 }
const person = make_person("Krzysztof")
person["hello"]()
_check_result = (Object["keys"]({"a" : 1, "b" : 2})[1] == "b")
println((("checking (" + tostring("Object.keys({"a": 1, "b": 2})[1]")) + ((" " + tostring("==")) + ((" " + tostring("b")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (tostring(1) == "1")
println((("checking (" + tostring("tostring(1)")) + ((" " + tostring("==")) + ((" " + tostring("1")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const popular_names = ["Krzysztof", "Zbigniew", "Grzegorz"]
for (name in popular_names){ println(name)
if ((name == "Zbigniew")) { break
 }
 }
{ println("args: ", 1, [1, 2, 3], {"a" : 1}, "lorem", true, function() {  }, println)
if (true) {  }
if (false) {  }
var i = 0
var j = 0
while ((i = (i + 1) < 10)){ break
 }
while ((j = (j + 1) < 10)){  }
 }
const val = 123
_check_result = ("abc"[0] == "a")
println((("checking (" + tostring(""abc"[0]")) + ((" " + tostring("==")) + ((" " + tostring("a")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ("abc"[0] != "b")
println((("checking (" + tostring(""abc"[0]")) + ((" " + tostring("!=")) + ((" " + tostring("b")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const contains_item = function(to_find, items) { for (item in items){ if ((item == to_find)) { return true
 }
 }
return false
 }
const cities = ["Kraków", "Warsaw", "Gdańsk"]
if (contains_item("Kraków", cities)) { println("found!")
 }
const block_test = function() { var x = 0
{ x = 1
 }
return x
 }
_check_result = (block_test() == 1)
println((("checking (" + tostring("block_test()")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const big_array = array(1000)
_check_result = (Object["length"](big_array) == 1000)
println((("checking (" + tostring("Object.length(big_array)")) + ((" " + tostring("==")) + ((" " + tostring(1000)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const return_no_semicolon = function() { return 
 }
const vec2 = function(x, y) { return {"x" : x, "y" : y, "__operator_add__" : function(a, b) { return vec2((a["x"] + b["x"]), (a["y"] + b["y"]))
 }, "__operator_sub__" : function(a, b) { return vec2((a["x"] - b["x"]), (a["y"] - b["y"]))
 }, "__operator_minus__" : function(a) { return vec2(-a["x"], -a["y"])
 }, "__operator_mul__" : function(a, b) { if (Object["isnumber"](a)) { return vec2((b["x"] * a), (b["y"] * a))
 } elif ((Object["isnumber"](b) == true)) { return vec2((a["x"] * b), (a["y"] * b))
 } else { return vec2((a["x"] * b["x"]), (a["y"] * b["y"]))
 }
 }}
 }
const va = vec2(1, 2)
const vb = vec2(3, 4)
var v = (va + vb)
_check_result = (v["x"] == 4)
println((("checking (" + tostring("v.x")) + ((" " + tostring("==")) + ((" " + tostring(4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (v["y"] == 6)
println((("checking (" + tostring("v.y")) + ((" " + tostring("==")) + ((" " + tostring(6)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
v = (va * 2)
_check_result = (v["x"] == 2)
println((("checking (" + tostring("v.x")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (v["y"] == 4)
println((("checking (" + tostring("v.y")) + ((" " + tostring("==")) + ((" " + tostring(4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
v = -va
_check_result = (v["x"] == -1)
println((("checking (" + tostring("v.x")) + ((" " + tostring("==")) + ((" " + tostring(-1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (v["y"] == -2)
println((("checking (" + tostring("v.y")) + ((" " + tostring("==")) + ((" " + tostring(-2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((1 | 2) == 3)
println((("checking (" + tostring("(1|2)")) + ((" " + tostring("==")) + ((" " + tostring(3)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((1 & 2) == 0)
println((("checking (" + tostring("(1&2)")) + ((" " + tostring("==")) + ((" " + tostring(0)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((1 ^ 3) == 2)
println((("checking (" + tostring("(1^3)")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((1 << 16) == 65536)
println((("checking (" + tostring("( 1 << 16)")) + ((" " + tostring("==")) + ((" " + tostring(65536)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((-1 << 2) == -4)
println((("checking (" + tostring("(-1 << 2)")) + ((" " + tostring("==")) + ((" " + tostring(-4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((8 >> 1) == 4)
println((("checking (" + tostring("( 8 >> 1)")) + ((" " + tostring("==")) + ((" " + tostring(4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((-8 >> 1) == -4)
println((("checking (" + tostring("(-8 >> 1)")) + ((" " + tostring("==")) + ((" " + tostring(-4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const recover_test_1 = function() { recover (e){ return 1
 }
return 2
 }
_check_result = (recover_test_1() == 2)
println((("checking (" + tostring("recover_test_1()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const recover_test_2 = function() { recover (e){ return 1
 }
return crash()
 }
_check_result = (recover_test_2() == 1)
println((("checking (" + tostring("recover_test_2()")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const recover_test_3 = function() { recover (e){ return 1
 }
recover (e){ return 2
 }
const recover_inner = function() { return crash()
 }
return recover_inner()
 }
_check_result = (recover_test_3() == 2)
println((("checking (" + tostring("recover_test_3()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const recover_test_4 = function() { recover (e){ return 2
 }
const recover_test_inner = function() { recover (e){ return crash()
 }
return crash()
 }
return recover_test_inner()
 }
_check_result = (recover_test_4() == 2)
println((("checking (" + tostring("recover_test_4()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
var this_test = {"inner" : {"name" : "lorem", "get_name" : function() { return this["name"]
 }}, "get_inner_name" : function() { return this["inner"]["get_name"]()
 }}
_check_result = (this_test["get_inner_name"]() == "lorem")
println((("checking (" + tostring("this_test.get_inner_name()")) + ((" " + tostring("==")) + ((" " + tostring("lorem")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const add = function(x, y) { return (x + y)
 }
var templ_var = 3
_check_result = ((("foo" + tostring(templ_var)) + "bar") == "foo3bar")
println((("checking (" + tostring("`foo${templ_var}bar`")) + ((" " + tostring("==")) + ((" " + tostring("foo3bar")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((("lorem" + tostring(add((("" + tostring(add("x", "y"))) + ""), "z"))) + "ipsum") == "loremxyzipsum")
println((("checking (" + tostring("`lorem${add(`${add(`x`, "y")}`, `z`)}ipsum`")) + ((" " + tostring("==")) + ((" " + tostring("loremxyzipsum")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((("" + tostring((4 * 2))) + "") == "8")
println((("checking (" + tostring("`${4 * 2}`")) + ((" " + tostring("==")) + ((" " + tostring("8")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((("" + tostring({})) + "") == "{}")
println((("checking (" + tostring("`${{}}`")) + ((" " + tostring("==")) + ((" " + tostring("{}")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ("foo${x}bar" == "foo${x}bar")
println((("checking (" + tostring("`foo${x}bar`")) + ((" " + tostring("==")) + ((" " + tostring("foo${x}bar")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = ((("" + tostring(1)) + ((" " + tostring(2)) + "")) == "1 2")
println((("checking (" + tostring("`${1} ${2}`")) + ((" " + tostring("==")) + ((" " + tostring("1 2")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const test_ternary = function(x) { var res = (x == 1) ? 1 : 2
return res
 }
_check_result = (test_ternary(1) == 1)
println((("checking (" + tostring("test_ternary(1)")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (test_ternary(3) == 2)
println((("checking (" + tostring("test_ternary(3)")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (true ? true ? 1 : 2 : 3 == 1)
println((("checking (" + tostring("(true ? true ? 1 : 2 : 3)")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (true ? false ? 1 : 2 : 3 == 2)
println((("checking (" + tostring("(true ? false ? 1 : 2 : 3)")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (add(true ? 1 : 2, true ? 3 : 5) == 4)
println((("checking (" + tostring("add(true ? 1 : 2, true ? 3 : 5)")) + ((" " + tostring("==")) + ((" " + tostring(4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (add(true ? 1 : 2, 3) == 4)
println((("checking (" + tostring("add(true ? 1 : 2, 3)")) + ((" " + tostring("==")) + ((" " + tostring(4)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (add(1, true ? 2 : 3) == 3)
println((("checking (" + tostring("add(1, true ? 2 : 3)")) + ((" " + tostring("==")) + ((" " + tostring(3)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
var test_obj = {"fun" : function() { return 2
 }}
_check_result = (test_obj["fun"]() == 2)
println((("checking (" + tostring("test_obj.fun()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (test_obj["fun"] != 2)
println((("checking (" + tostring("test_obj["fun"]")) + ((" " + tostring("!=")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (test_obj["fun"]() == 2)
println((("checking (" + tostring("test_obj["fun"]()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
const get_test_arr = function() { var test_arr = [function() { return 0
 }, function() { return 1
 }, function() { return 2
 }]
return test_arr
 }
var fun_i = 0
_check_result = (get_test_arr()[fun_i = (fun_i + 1)]() == 0)
println((("checking (" + tostring("get_test_arr()[fun_i++]()")) + ((" " + tostring("==")) + ((" " + tostring(0)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (get_test_arr()[fun_i = (fun_i + 1)]() == 1)
println((("checking (" + tostring("get_test_arr()[fun_i++]()")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (get_test_arr()[fun_i = (fun_i + 1)]() == 2)
println((("checking (" + tostring("get_test_arr()[fun_i++]()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (get_test_arr()[fun_i = (fun_i - 1)]() == 2)
println((("checking (" + tostring("get_test_arr()[--fun_i]()")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (get_test_arr()[fun_i = (fun_i - 1)]() == 1)
println((("checking (" + tostring("get_test_arr()[--fun_i]()")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (get_test_arr()[fun_i = (fun_i - 1)]() == 0)
println((("checking (" + tostring("get_test_arr()[--fun_i]()")) + ((" " + tostring("==")) + ((" " + tostring(0)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
{ var a = 10
var b = (((a = (a + 1) + a = (a + 1)) + a = (a + 1)) + a)
_check_result = (b == 48)
println((("checking (" + tostring("b")) + ((" " + tostring("==")) + ((" " + tostring(48)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
 }
{ var a = 0
var b = 0
_check_result = ((a = (a - 1) - b = (b - 1)) == 1)
println((("checking (" + tostring("(a-- - --b)")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
 }
{ var obj = {"foo" : 1}
obj["foo"] = (obj["foo"] + 1)
_check_result = (obj["foo"] == 2)
println((("checking (" + tostring("obj.foo")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (obj["foo"] = (obj["foo"] + 1) == 2)
println((("checking (" + tostring("obj.foo++")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (obj["foo"] == 3)
println((("checking (" + tostring("obj.foo")) + ((" " + tostring("==")) + ((" " + tostring(3)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (obj["foo"] = (obj["foo"] - 1) == 2)
println((("checking (" + tostring("--obj.foo")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (obj["foo"] = (obj["foo"] - 1) == 2)
println((("checking (" + tostring("obj.foo--")) + ((" " + tostring("==")) + ((" " + tostring(2)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (obj["foo"] == 1)
println((("checking (" + tostring("obj.foo")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
 }
_check_result = (1 == 1)
println((("checking (" + tostring("1")) + ((" " + tostring("==")) + ((" " + tostring(1)) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (1 != "1")
println((("checking (" + tostring("1")) + ((" " + tostring("!=")) + ((" " + tostring("1")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (1 != {})
println((("checking (" + tostring("1")) + ((" " + tostring("!=")) + ((" " + tostring({})) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
_check_result = (("a" + "b") == "ab")
println((("checking (" + tostring(""a" + "b"")) + ((" " + tostring("==")) + ((" " + tostring("ab")) + ((") = " + tostring(_check_result)) + "")))))
assert(_check_result)
{ var n = 256
var str = ""
for (var i = 0 ;(i < n);i = (i + 1)){ str = (str + "x")
 }
println("str = ", Object["length"](str))
for (var i = 0 ;(i < n);i = (i + 1)){ assert((str[i] == "x"))
 }
 }
println("all is well")