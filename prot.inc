/* cclexer.c */
void ape_lexer_token_init(ApeAstToken *tok, ApeAstTokType type, const char *literal, int len);
char *ape_lexer_tokendupliteral(ApeContext *ctx, const ApeAstToken *tok);
bool ape_lexer_init(ApeAstLexer *lex, ApeContext *ctx, ApeErrorList *errs, const char *input, size_t inlen, ApeAstCompFile *file);
bool ape_lexer_failed(ApeAstLexer *lex);
void ape_lexer_continuetemplatestring(ApeAstLexer *lex);
bool ape_lexer_currenttokenis(ApeAstLexer *lex, ApeAstTokType type);
bool ape_lexer_peektokenis(ApeAstLexer *lex, ApeAstTokType type);
bool ape_lexer_nexttoken(ApeAstLexer *lex);
bool ape_lexer_previous_token(ApeAstLexer *lex);
ApeAstToken ape_lexer_internalnexttoken(ApeAstLexer *lex);
bool ape_lexer_expectcurrent(ApeAstLexer *lex, ApeAstTokType type);
/* util.c */
uint64_t pack754(long double f, unsigned bits, unsigned expbits);
long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
ApeFloat ape_util_uinttofloat(ApeUInt val);
ApeUInt ape_util_floattouint(ApeFloat val);
char *ape_util_stringfmt(ApeContext *ctx, const char *format, ...);
char *ape_util_strndup(ApeContext *ctx, const char *string, size_t n);
char *ape_util_strdup(ApeContext *ctx, const char *string);
unsigned long ape_util_hashstring(const void *ptr, size_t len);
unsigned long ape_util_hashfloat(ApeFloat val);
unsigned int ape_util_upperpoweroftwo(unsigned int v);
char *ape_util_default_readhandle(ApeContext *ctx, FILE *hnd, long int wantedamount, size_t *dlen);
char *ape_util_default_readfile(ApeContext *ctx, const char *filename, long int thismuch, size_t *dlen);
size_t ape_util_default_writefile(ApeContext *ctx, const char *path, const char *string, size_t string_size);
size_t ape_util_default_stdoutwrite(ApeContext *ctx, const void *data, size_t size);
ApePtrArray *ape_util_splitstring(ApeContext *ctx, const char *str, const char *delimiter);
char *ape_util_joinarray(ApeContext *ctx, ApePtrArray *items, const char *with);
char *ape_util_canonicalisepath(ApeContext *ctx, const char *path);
bool ape_util_isabspath(const char *path);
bool ape_util_strequal(const char *a, const char *b);
/* mempool.c */
int wrap_munmap(void *addr, size_t length);
void ape_mempool_debugprintv(ApeMemPool *mp, const char *fmt, va_list va);
void ape_mempool_debugprintf(ApeMemPool *mp, const char *fmt, ...);
void **ape_mempool_newpool(ApeMemPool *mp, ApeSize sz, ApeSize total_sz);
ApeMemPool *ape_mempool_initdebughandle(int min2, int max2, FILE *hnd, bool mustclose);
ApeMemPool *ape_mempool_init(ApeSize min2, ApeSize max2);
void ape_mempool_destroy(ApeMemPool *mp);
bool ape_mempool_setdebughandle(ApeMemPool *mp, FILE *handle, bool mustclose);
bool ape_mempool_setdebugfile(ApeMemPool *mp, const char *path);
void *ape_mempool_alloc(ApeMemPool *mp, ApeSize sz);
void ape_mempool_free(ApeMemPool *mp, void *p);
void ape_mempool_repool(ApeMemPool *mp, void *p, ApeSize sz);
void *ape_mempool_realloc(ApeMemPool *mp, void *oldptr, ApeSize old_sz, ApeSize new_sz);
/* libobject.c */
ApeGCObjData *ape_object_make_objdata(ApeContext *ctx, ApeObjType type);
ApeObject ape_object_make_external(ApeContext *ctx, void *ptr);
bool ape_object_value_ishashable(ApeObject obj);
void ape_tostring_quotechar(ApeWriter *buf, int ch);
void ape_tostring_quotestring(ApeWriter *buf, const char *str, ApeSize len, bool withquotes);
void ape_tostring_object(ApeWriter *buf, ApeObject obj, bool quote_str);
const char *ape_object_value_typename(const ApeObjType type);
void ape_object_data_deinit(ApeContext *ctx, ApeGCObjData *data);
char *ape_object_value_typeunionname(ApeContext *ctx, const ApeObjType type);
char *ape_object_value_serialize(ApeContext *ctx, ApeObject object, ApeSize *lendest);
bool ape_object_extern_setdestroyfunc(ApeObject object, ApeDataCallback destroy_fn);
bool ape_object_extern_setdata(ApeObject object, void *ext_data);
bool ape_object_extern_setcopyfunc(ApeObject object, ApeDataCallback copy_fn);
ApeObject ape_object_getkvpairat(ApeContext *ctx, ApeObject object, int ix);
ApeObject ape_object_value_internalcopydeep(ApeContext *ctx, ApeObject obj, ApeValDict *copies);
ApeObject ape_object_value_copydeep(ApeContext *ctx, ApeObject obj);
ApeObject ape_object_value_copyflat(ApeContext *ctx, ApeObject obj);
bool ape_object_value_wrapequals(const ApeObject *a_ptr, const ApeObject *b_ptr);
unsigned long ape_object_value_hash(ApeObject *obj_ptr);
ApeFloat ape_object_value_asnumerica(ApeObject obj, ApeObjType t);
ApeFloat ape_object_value_asnumeric(ApeObject obj);
ApeFloat ape_object_value_compare(ApeObject a, ApeObject b, bool *out_ok);
bool ape_object_value_equals(ApeObject a, ApeObject b);
/* context.c */
ApeContext *ape_make_context(void);
ApeContext *ape_make_contextex(ApeMemAllocFunc malloc_fn, ApeMemFreeFunc free_fn, void *optr);
void ape_context_destroy(ApeContext *ctx);
void ape_context_deinit(ApeContext *ctx);
void ape_context_freeallocated(ApeContext *ctx, void *ptr);
void ape_context_debugvalue(ApeContext *ctx, const char *name, ApeObject val);
bool ape_context_settimeout(ApeContext *ctx, ApeFloat max_execution_time_ms);
void ape_context_setstdoutwrite(ApeContext *ctx, ApeIOStdoutWriteFunc stdout_write, void *ptr);
void ape_context_setfilewrite(ApeContext *ctx, ApeIOWriteFunc file_write, void *ptr);
void ape_context_setfileread(ApeContext *ctx, ApeIOReadFunc file_read, void *ptr);
void ape_context_dumpast(ApeContext *ctx, ApePtrArray *statements);
void ape_context_dumpbytecode(ApeContext *ctx, ApeAstCompResult *cres);
ApeObject ape_context_executesource(ApeContext *ctx, const char *code, size_t clen, bool alsoreset);
ApeObject ape_context_executefile(ApeContext *ctx, const char *path);
bool ape_context_haserrors(ApeContext *ctx);
ApeSize ape_context_errorcount(ApeContext *ctx);
void ape_context_clearerrors(ApeContext *ctx);
ApeError *ape_context_geterror(ApeContext *ctx, int index);
bool ape_context_setglobal(ApeContext *ctx, const char *name, ApeObject obj);
char *ape_context_errortostring(ApeContext *ctx, ApeError *err);
ApeObject ape_context_makenamednative(ApeContext *ctx, const char *name, ApeWrappedNativeFunc fn, void *data);
bool ape_context_setnativefunction(ApeContext *ctx, const char *name, ApeWrappedNativeFunc fn, void *data);
void ape_context_resetstate(ApeContext *ctx);
void ape_context_setdefaultconfig(ApeContext *ctx);
/* libpseudo.c */
ApePseudoClass *ape_make_pseudoclass(ApeContext *ctx, ApeStrDict *dictref, const char *classname);
void *ape_pseudoclass_destroy(ApeContext *ctx, ApePseudoClass *psc);
bool ape_pseudoclass_setmethod(ApePseudoClass *psc, const char *name, ApeObjMemberItem *itm);
ApeObjMemberItem *ape_pseudoclass_getmethodbyhash(ApePseudoClass *psc, const char *name, unsigned long hash);
ApeObjMemberItem *ape_pseudoclass_getmethodbyname(ApePseudoClass *psc, const char *name);
ApePseudoClass *ape_context_make_pseudoclass(ApeContext *ctx, ApeStrDict *dictref, ApeObjType typ, const char *classname);
ApePseudoClass *ape_context_findpseudoclassbytype(ApeContext *ctx, ApeObjType typ);
ApeObjMemberItem *ape_builtin_find_objectfunc(ApeContext *ctx, ApeStrDict *dict, const char *idxname, unsigned long idxhash);
ApeObjMemberItem *builtin_get_object(ApeContext *ctx, ApeObjType objt, const char *idxname, unsigned long idxhash);
/* vm.c */
ApeOpcodeDef *ape_vm_opcodefind(ApeOpByte op);
const char *ape_vm_opcodename(ApeOpByte op);
void ape_vm_adderrorv(ApeVM *vm, ApeErrorType etype, const char *fmt, va_list va);
void ape_vm_adderror(ApeVM *vm, ApeErrorType etype, const char *fmt, ...);
ApeGlobalStore *ape_make_globalstore(ApeContext *ctx, ApeGCMemory *mem);
void ape_globalstore_destroy(ApeGlobalStore *store);
ApeSymbol *ape_globalstore_getsymbol(ApeGlobalStore *store, const char *name);
bool ape_globalstore_set(ApeGlobalStore *store, const char *name, ApeObject object);
ApeObject ape_globalstore_getat(ApeGlobalStore *store, int ix, bool *out_ok);
ApeObject *ape_globalstore_getobjectdata(ApeGlobalStore *store);
ApeSize ape_globalstore_getobjectcount(ApeGlobalStore *store);
int ape_make_code(ApeOpByte op, ApeSize operands_count, ApeOpByte *operands, ApeValArray *res);
ApeOpcodeValue ape_frame_readopcode(ApeFrame *frame);
ApeOpByte ape_frame_readuint64(ApeFrame *frame);
uint16_t ape_frame_readuint16(ApeFrame *frame);
ApeUShort ape_frame_readuint8(ApeFrame *frame);
ApePosition ape_frame_srcposition(const ApeFrame *frame);
ApeObject ape_vm_getlastpopped(ApeVM *vm);
bool ape_vm_haserrors(ApeVM *vm);
bool ape_vm_setglobal(ApeVM *vm, ApeSize ix, ApeObject val);
ApeObject ape_vm_getglobal(ApeVM *vm, ApeSize ix);
void ape_vm_setstackpointer(ApeVM *vm, int new_sp);
void ape_vm_pushstack(ApeVM *vm, ApeObject obj);
ApeObject ape_vm_popstack(ApeVM *vm);
ApeObject ape_vm_getstack(ApeVM *vm, int nth_item);
void ape_vm_thispush(ApeVM *vm, ApeObject obj);
ApeObject ape_vm_thisget(ApeVM *vm, int nth_item);
ApeObject ape_vm_thispop(ApeVM *vm);
ApeObject ape_vm_thisparent(ApeVM *vm, bool letfail);
void ape_vm_dumpstack(ApeVM *vm);
ApeObject ape_vm_callnativefunction(ApeVM *vm, ApeObject callee, ApePosition src_pos, int argc, ApeObject *args);
bool ape_vm_callobjectargs(ApeVM *vm, ApeObject callee, ApeInt nargs, ApeObject *args);
bool ape_vm_callobjectstack(ApeVM *vm, ApeObject callee, ApeInt nargs);
bool ape_vm_checkassign(ApeVM *vm, ApeObject oldval, ApeObject newval);
bool ape_vm_tryoverloadoperator(ApeVM *vm, ApeObject left, ApeObject right, ApeOpByte op, bool *out_overload_found);
ApeVM *ape_make_vm(ApeContext *ctx, const ApeConfig *config, ApeGCMemory *mem, ApeErrorList *errors, ApeGlobalStore *global_store);
void ape_vm_destroy(ApeVM *vm);
void ape_vm_reset(ApeVM *vm);
bool ape_vm_frameinit(ApeFrame *frame, ApeObject funcobj, int bptr);
ApeFrame *ape_frame_update(ApeVM *vm, ApeFrame *rt, ApeFrame *from);
ApeFrame *ape_frame_copyalloc(ApeVM *vm, ApeFrame *from);
bool ape_vm_framepush(ApeVM *vm, ApeFrame frame);
bool ape_vm_framepop(ApeVM *vm);
void ape_vm_collectgarbage(ApeVM *vm, ApeValArray *constants, bool alsostack);
bool ape_vm_run(ApeVM *vm, ApeAstCompResult *comp_res, ApeValArray *constants);
ApeObject ape_object_string_copy(ApeContext *ctx, ApeObject obj);
bool ape_vm_appendstring(ApeVM *vm, ApeObject left, ApeObject right, ApeObjType lefttype, ApeObjType righttype);
bool ape_vm_getindex(ApeVM *vm, ApeObject left, ApeObject index, ApeObjType lefttype, ApeObjType indextype);
bool ape_vm_math(ApeVM *vm, ApeObject left, ApeObject right, ApeOpcodeValue opcode);
bool ape_vm_execfunc(ApeVM *vm, ApeObject function, ApeValArray *constants);
/* ccparse.c */
ApeAstParser *ape_ast_make_parser(ApeContext *ctx, const ApeConfig *config, ApeErrorList *errors);
void ape_parser_destroy(ApeAstParser *parser);
ApePtrArray *ape_parser_parseall(ApeAstParser *parser, const char *input, size_t inlen, ApeAstCompFile *file);
ApeAstIdentExpr *ape_ast_make_ident(ApeContext *ctx, ApeAstToken tok);
ApeAstExpression *ape_ast_make_expression(ApeContext *ctx, ApeAstExprType type);
ApeAstExpression *ape_ast_make_identexpr(ApeContext *ctx, ApeAstIdentExpr *ident);
ApeAstExpression *ape_ast_make_literalnumberexpr(ApeContext *ctx, ApeFloat val);
ApeAstExpression *ape_ast_make_literalboolexpr(ApeContext *ctx, bool val);
ApeAstExpression *ape_ast_make_literalstringexpr(ApeContext *ctx, char *value, ApeSize len, bool wasallocd);
ApeAstExpression *ape_ast_make_literalnullexpr(ApeContext *ctx);
ApeAstExpression *ape_ast_make_literalarrayexpr(ApeContext *ctx, ApePtrArray *values);
ApeAstExpression *ape_ast_make_literalmapexpr(ApeContext *ctx, ApePtrArray *keys, ApePtrArray *values);
ApeAstExpression *ape_ast_make_prefixexpr(ApeContext *ctx, ApeOperator op, ApeAstExpression *right);
ApeAstExpression *ape_ast_make_infixexpr(ApeContext *ctx, ApeOperator op, ApeAstExpression *left, ApeAstExpression *right);
ApeAstExpression *ape_ast_make_literalfuncexpr(ApeContext *ctx, ApePtrArray *params, ApeAstBlockExpr *body);
ApeAstExpression *ape_ast_make_callexpr(ApeContext *ctx, ApeAstExpression *function, ApePtrArray *args);
ApeAstExpression *ape_ast_make_indexexpr(ApeContext *ctx, ApeAstExpression *left, ApeAstExpression *index);
ApeAstExpression *ape_ast_make_assignexpr(ApeContext *ctx, ApeAstExpression *dest, ApeAstExpression *source, bool ispostfix);
ApeAstExpression *ape_ast_make_logicalexpr(ApeContext *ctx, ApeOperator op, ApeAstExpression *left, ApeAstExpression *right);
ApeAstExpression *ape_ast_make_ternaryexpr(ApeContext *ctx, ApeAstExpression *test, ApeAstExpression *iftrue, ApeAstExpression *iffalse);
ApeAstExpression *ape_ast_make_definestmt(ApeContext *ctx, ApeAstIdentExpr *name, ApeAstExpression *value, bool assignable);
ApeAstExpression *ape_ast_make_ifstmt(ApeContext *ctx, ApePtrArray *cases, ApeAstBlockExpr *alternative);
ApeAstExpression *ape_ast_make_returnstmt(ApeContext *ctx, ApeAstExpression *value);
ApeAstExpression *ape_ast_make_expressionstmt(ApeContext *ctx, ApeAstExpression *value);
ApeAstExpression *ape_ast_make_whilestmt(ApeContext *ctx, ApeAstExpression *test, ApeAstBlockExpr *body);
ApeAstExpression *ape_ast_make_breakstmt(ApeContext *ctx);
ApeAstExpression *ape_ast_make_foreachstmt(ApeContext *ctx, ApeAstIdentExpr *iterator, ApeAstExpression *source, ApeAstBlockExpr *body);
ApeAstExpression *ape_ast_make_forstmt(ApeContext *ctx, ApeAstExpression *init, ApeAstExpression *test, ApeAstExpression *update, ApeAstBlockExpr *body);
ApeAstExpression *ape_ast_make_continuestmt(ApeContext *ctx);
ApeAstExpression *ape_ast_make_blockstmt(ApeContext *ctx, ApeAstBlockExpr *block);
ApeAstExpression *ape_ast_make_includestmt(ApeContext *ctx, char *path);
ApeAstExpression *ape_ast_make_recoverstmt(ApeContext *ctx, ApeAstIdentExpr *errorident, ApeAstBlockExpr *body);
ApeAstBlockExpr *ape_ast_make_codeblock(ApeContext *ctx, ApePtrArray *statements);
ApeAstIdentExpr *ape_ast_copy_ident(ApeContext *ctx, ApeAstIdentExpr *ident);
ApeAstBlockExpr *ape_ast_copy_codeblock(ApeContext *ctx, ApeAstBlockExpr *block);
ApeAstIfCaseExpr *ape_ast_copy_ifcase(ApeContext *ctx, ApeAstIfCaseExpr *ifcase);
ApeAstExpression *ape_ast_copy_expr(ApeContext *ctx, ApeAstExpression *expr);
ApeAstIfCaseExpr *ape_ast_make_ifcase(ApeContext *ctx, ApeAstExpression *test, ApeAstBlockExpr *consequence);
void *ape_ast_destroy_ifcase(ApeContext *ctx, ApeAstIfCaseExpr *cond);
void *ape_ast_destroy_expr(ApeContext *ctx, ApeAstExpression *expr);
void *ape_ast_destroy_codeblock(ApeAstBlockExpr *block);
void *ape_ast_destroy_ident(ApeContext *ctx, ApeAstIdentExpr *ident);
ApeAstExpression *ape_parser_parsestmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parsevarstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseifstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parsereturnstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseexprstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parsewhileloopstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parsebreakstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parsecontinuestmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseblockstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseincludestmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parserecoverstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseforloopstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseforeachstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parseclassicforstmt(ApeAstParser *p);
ApeAstExpression *ape_parser_parsefuncstmt(ApeAstParser *p);
ApeAstBlockExpr *ape_parser_parsecodeblock(ApeAstParser *p);
ApeAstExpression *ape_parser_parseexpr(ApeAstParser *p, ApeAstPrecedence prec);
ApeAstExpression *ape_parser_parseident(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralnumber(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralbool(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralstring(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteraltplstring(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralnull(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralarray(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralmap(ApeAstParser *p);
ApeAstExpression *ape_parser_parseprefixexpr(ApeAstParser *p);
ApeAstExpression *ape_parser_parseinfixexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstExpression *ape_parser_parsegroupedexpr(ApeAstParser *p);
ApeAstExpression *ape_parser_parseliteralfunc(ApeAstParser *p);
bool ape_parser_parsefuncparams(ApeAstParser *p, ApePtrArray *outparams);
ApeAstExpression *ape_parser_parsecallexpr(ApeAstParser *p, ApeAstExpression *left);
ApePtrArray *ape_parser_parseexprlist(ApeAstParser *p, ApeAstTokType starttoken, ApeAstTokType endtoken, bool trailingcommaallowed);
ApeAstExpression *ape_parser_parseindexexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstExpression *ape_parser_parseassignexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstExpression *ape_parser_parselogicalexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstExpression *ape_parser_parseternaryexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstExpression *ape_parser_parseincdecprefixexpr(ApeAstParser *p);
ApeAstExpression *ape_parser_parseincdecpostfixexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstExpression *ape_parser_parsedotexpr(ApeAstParser *p, ApeAstExpression *left);
ApeAstPrecedence ape_parser_getprecedence(ApeAstTokType tk);
ApeOperator ape_parser_tokentooperator(ApeAstTokType tk);
char ape_parser_escapechar(const char c);
char *ape_ast_processandcopystring(ApeAllocator *alloc, const char *input, size_t len, ApeSize *destlen);
ApeAstExpression *ape_ast_wrapexprinfunccall(ApeContext *ctx, ApeAstExpression *expr, const char *functionname);
/* ccoptimize.c */
ApeAstExpression *ape_optimizer_optexpr(ApeAstExpression *expr);
ApeAstExpression *ape_optimizer_optinfixexpr(ApeAstExpression *expr);
ApeAstExpression *ape_optimizer_optprefixexpr(ApeAstExpression *expr);
/* libio.c */
void ape_builtins_install_io(ApeVM *vm);
/* ccutils.c */
ApeAstCompFile *ape_make_compfile(ApeContext *ctx, const char *path);
void *ape_compfile_destroy(ApeContext *ctx, ApeAstCompFile *file);
ApeAstCompScope *ape_make_compscope(ApeContext *ctx, ApeAstCompScope *outer);
void ape_compscope_destroy(ApeAstCompScope *scope);
ApeAstCompResult *ape_compscope_orphanresult(ApeAstCompScope *scope);
ApeAstCompResult *ape_make_compresult(ApeContext *ctx, ApeUShort *bytecode, ApePosition *src_positions, int count);
void ape_compresult_destroy(ApeAstCompResult *res);
ApeAstBlockScope *ape_make_blockscope(ApeContext *ctx, int offset);
void *ape_blockscope_destroy(ApeContext *ctx, ApeAstBlockScope *scope);
ApeAstBlockScope *ape_blockscope_copy(ApeContext *ctx, ApeAstBlockScope *scope);
/* error.c */
ApeTraceback *ape_make_traceback(ApeContext *ctx);
void ape_traceback_destroy(ApeTraceback *traceback);
bool ape_traceback_append(ApeTraceback *traceback, const char *function_name, ApePosition pos);
bool ape_traceback_appendfromvm(ApeTraceback *traceback, ApeVM *vm);
const char *ape_traceback_itemgetfilepath(ApeTracebackItem *item);
bool ape_tostring_traceback(ApeWriter *buf, ApeTraceback *traceback);
const char *ape_tostring_errortype(ApeErrorType type);
ApeErrorType ape_error_gettype(ApeError *error);
const char *ape_error_gettypestring(ApeError *error);
ApeObject ape_object_make_error(ApeContext *ctx, const char *error);
ApeObject ape_object_make_error_nocopy(ApeContext *ctx, char *error);
void ape_errorlist_initerrors(ApeErrorList *errors);
void ape_errorlist_destroy(ApeErrorList *errors);
void ape_errorlist_add(ApeErrorList *errors, ApeErrorType type, ApePosition pos, const char *message);
void ape_errorlist_addformat(ApeErrorList *errors, ApeErrorType type, ApePosition pos, const char *format, ...);
void ape_errorlist_addformatv(ApeErrorList *errors, ApeErrorType type, ApePosition pos, const char *format, va_list va);
void ape_errorlist_clear(ApeErrorList *errors);
ApeSize ape_errorlist_count(ApeErrorList *errors);
ApeError *ape_errorlist_getat(ApeErrorList *errors, ApeInt ix);
ApeError *ape_errorlist_lasterror(ApeErrorList *errors);
bool ape_errorlist_haserrors(ApeErrorList *errors);
const char *ape_error_getmessage(ApeError *error);
const char *ape_error_getfile(ApeError *error);
const char *ape_error_getsource(ApeError *error);
int ape_error_getline(ApeError *error);
int ape_error_getcolumn(ApeError *error);
ApeTraceback *ape_error_gettraceback(ApeError *error);
const char *ape_object_value_geterrormessage(ApeObject object);
void ape_object_value_seterrortraceback(ApeObject object, ApeTraceback *traceback);
ApeTraceback *ape_object_value_geterrortraceback(ApeObject object);
/* tostring.c */
const char *ape_tostring_operator(ApeOperator op);
const char *ape_tostring_exprtype(ApeAstExprType type);
bool ape_tostring_exprlist(ApeWriter *buf, ApePtrArray *statements);
bool ape_tostring_expression(ApeWriter *buf, ApeAstExpression *expr);
bool ape_tostring_codeblock(ApeWriter *buf, ApeAstBlockExpr *stmt);
bool ape_tostring_compresult(ApeWriter *buf, ApeAstCompResult *res, bool sparse);
bool ape_tostring_bytecode(ApeWriter *buf, ApeUShort *code, ApePosition *source_positions, size_t code_size, bool sparse);
const char *ape_tostring_tokentype(ApeAstTokType type);
/* ccsymtab.c */
ApeSymbol *ape_make_symbol(ApeContext *ctx, const char *name, ApeSymbolType type, ApeSize index, bool assignable);
void *ape_symbol_destroy(ApeContext *ctx, ApeSymbol *symbol);
ApeSymbol *ape_symbol_copy(ApeContext *ctx, ApeSymbol *symbol);
ApeSymTable *ape_make_symtable(ApeContext *ctx, ApeSymTable *outer, ApeGlobalStore *global_store, int mgo);
void ape_symtable_destroy(ApeSymTable *table);
ApeSymTable *ape_symtable_copy(ApeContext *ctx, ApeSymTable *table);
bool ape_symtable_setsymbol(ApeSymTable *table, ApeSymbol *symbol);
int ape_symtable_nextsymbolindex(ApeSymTable *table);
int ape_symtable_count(ApeSymTable *table);
bool ape_symtable_addmodulesymbol(ApeSymTable *st, ApeSymbol *symbol);
ApeSymbol *ape_symtable_define(ApeSymTable *table, const char *name, bool assignable);
ApeSymbol *ape_symtable_deffree(ApeSymTable *st, ApeSymbol *original);
ApeSymbol *ape_symtable_definefuncname(ApeSymTable *st, const char *name, bool assignable);
ApeSymbol *ape_symtable_definethis(ApeSymTable *st);
ApeSymbol *ape_symtable_resolve(ApeSymTable *table, const char *name);
bool ape_symtable_symbol_is_defined(ApeSymTable *table, const char *name);
bool ape_symtable_pushblockscope(ApeSymTable *table);
void ape_symtable_popblockscope(ApeSymTable *table);
ApeAstBlockScope *ape_symtable_getblockscope(ApeSymTable *table);
bool ape_symtable_ismoduleglobalscope(ApeSymTable *table);
bool ape_symtable_istopblockscope(ApeSymTable *table);
bool ape_symtable_istopglobalscope(ApeSymTable *table);
ApeSize ape_symtable_getmoduleglobalsymbolcount(const ApeSymTable *table);
const ApeSymbol *ape_symtable_getmoduleglobalsymbolat(const ApeSymTable *table, int ix);
/* memgc.c */
void *ds_extmalloc(size_t size, void *userptr);
void *ds_extrealloc(void *ptr, size_t oldsz, size_t newsz, void *userptr);
void ds_extfree(void *ptr, void *userptr);
void poolinit(ApeContext *ctx, ApeGCObjPool *pool);
void pooldestroy(ApeContext *ctx, ApeGCObjPool *pool);
void poolput(ApeContext* ctx, ApeGCObjPool *pool, ApeInt idx, ApeGCObjData *data);
ApeGCObjData *poolget(ApeGCObjPool *pool, ApeInt idx);
void *ape_mem_defaultmalloc(ApeContext *ctx, void *userptr, size_t size);
void ape_mem_defaultfree(ApeContext *ctx, void *userptr, void *objptr);
void *ape_allocator_alloc_real(ApeAllocator *alloc, const char *str, const char *func, const char *file, int line, ApeInt size);
void ape_allocator_free(ApeAllocator *alloc, void *ptr);
void *ape_allocator_realloc_real(ApeAllocator *alloc, const char *str, const char *func, const char *file, int line, void *ptr, size_t oldsz, size_t newsz);
ApeAllocator *ape_make_allocator(ApeContext *ctx, ApeAllocator *dest, ApeMemAllocFunc malloc_fn, ApeMemFreeFunc free_fn, void *optr);
bool ape_allocator_setdebughandle(ApeAllocator *alloc, FILE *hnd, bool mustclose);
bool ape_allocator_setdebugfile(ApeAllocator *alloc, const char *path);
void ape_allocator_destroy(ApeAllocator *alloc);
ApeGCMemory *ape_make_gcmem(ApeContext *ctx);
void ape_gcmem_destroy(ApeGCMemory *mem);
ApeGCObjData *ape_gcmem_allocobjdata(ApeGCMemory *mem, ApeObjType type);
bool ape_gcmem_canputinpool(ApeGCMemory *mem, ApeGCObjData *data);
ApeGCObjPool *ape_gcmem_getpoolfor(ApeGCMemory *mem, ApeObjType type);
ApeGCObjData *ape_gcmem_getfrompool(ApeGCMemory *mem, ApeObjType type);
void ape_gcmem_unmarkall(ApeGCMemory *mem);
void ape_gcmem_markobjlist(ApeObject *objects, ApeSize count);
void ape_gcmem_markobject(ApeObject obj);
void ape_gcmem_sweep(ApeGCMemory *mem);
int ape_gcmem_shouldsweep(ApeGCMemory *mem);
/* ccompile.c */
void ape_compiler_setsymtable(ApeAstCompiler *comp, ApeSymTable *table);
ApeValArray *ape_compiler_getconstants(ApeAstCompiler *comp);
ApeSymTable *ape_compiler_getsymboltable(ApeAstCompiler *comp);
ApeSymbol *ape_compiler_definesym(ApeAstCompiler *comp, ApePosition pos, const char *name, bool assignable, bool canshadow);
ApeAstCompiler *ape_compiler_make(ApeContext *ctx, const ApeConfig *cfg, ApeGCMemory *mem, ApeErrorList *el, ApePtrArray *files, ApeGlobalStore *gs);
void ape_compiler_destroy(ApeAstCompiler *comp);
bool ape_compiler_compilecode(ApeAstCompiler *comp, const char *code, size_t csize);
ApeAstCompResult *ape_compiler_compilesource(ApeAstCompiler *comp, const char *code, size_t csize);
ApeAstCompResult *ape_compiler_compilefile(ApeAstCompiler *comp, const char *path);
bool ape_compiler_init(ApeAstCompiler *comp, ApeContext *ctx, const ApeConfig *cfg, ApeGCMemory *mem, ApeErrorList *el, ApePtrArray *fl, ApeGlobalStore *gs);
void ape_compiler_deinit(ApeAstCompiler *comp);
bool ape_compiler_initshallowcopy(ApeAstCompiler *copy, ApeAstCompiler *src);
ApeInt ape_compiler_emit(ApeAstCompiler *comp, ApeOpByte op, ApeSize operandscount, ApeOpByte *operands);
ApeAstCompScope *ape_compiler_getcompscope(ApeAstCompiler *comp);
bool ape_compiler_pushcompscope(ApeAstCompiler *comp);
void ape_compiler_popcompscope(ApeAstCompiler *comp);
bool ape_compiler_pushsymtable(ApeAstCompiler *comp, ApeInt globaloffset);
void ape_compiler_popsymtable(ApeAstCompiler *comp);
ApeOpByte ape_compiler_getlastopcode(ApeAstCompiler *comp);
bool ape_compiler_compilestmtlist(ApeAstCompiler *comp, ApePtrArray *statements);
bool ape_compiler_includemodule(ApeAstCompiler *comp, ApeAstExpression *includestmt);
bool ape_compiler_compilestatement(ApeAstCompiler *comp, ApeAstExpression *stmt);
bool ape_compiler_compileexpression(ApeAstCompiler *comp, ApeAstExpression *expr);
bool ape_compiler_compilecodeblock(ApeAstCompiler *comp, ApeAstBlockExpr *block);
ApeInt ape_compiler_addconstant(ApeAstCompiler *comp, ApeObject obj);
void ape_compiler_moduint16operand(ApeAstCompiler *comp, ApeInt ip, ApeOpByte operand);
bool ape_compiler_lastopcodeis(ApeAstCompiler *comp, ApeOpByte op);
bool ape_compiler_readsym(ApeAstCompiler *comp, ApeSymbol *symbol);
bool ape_compiler_writesym(ApeAstCompiler *comp, ApeSymbol *symbol, bool define);
bool ape_compiler_pushbreakip(ApeAstCompiler *comp, ApeInt ip);
void ape_compiler_popbreakip(ApeAstCompiler *comp);
ApeInt ape_compiler_getbreakip(ApeAstCompiler *comp);
bool ape_compiler_pushcontip(ApeAstCompiler *comp, ApeInt ip);
void ape_compiler_popcontip(ApeAstCompiler *comp);
ApeInt ape_compiler_getcontip(ApeAstCompiler *comp);
ApeInt ape_compiler_getip(ApeAstCompiler *comp);
ApeValArray *ape_compiler_getsrcpositions(ApeAstCompiler *comp);
ApeValArray *ape_compiler_getbytecode(ApeAstCompiler *comp);
ApeAstFileScope *ape_compiler_makefilescope(ApeAstCompiler *comp, ApeAstCompFile *file);
void ape_compiler_destroyfilescope(ApeAstFileScope *scope);
bool ape_compiler_pushfilescope(ApeAstCompiler *comp, const char *filepath);
void ape_compiler_popfilescope(ApeAstCompiler *comp);
void ape_compiler_setcompscope(ApeAstCompiler *comp, ApeAstCompScope *scope);
/* libmap.c */
ApeValDict *ape_make_valdict(ApeContext *ctx, ApeSize ksz, ApeSize vsz);
ApeValDict *ape_make_valdictcapacity(ApeContext *ctx, ApeSize min_capacity, ApeSize ksz, ApeSize vsz);
bool ape_valdict_init(ApeContext *ctx, ApeValDict *dict, ApeSize ksz, ApeSize vsz, ApeSize initial_capacity);
void ape_valdict_deinit(ApeValDict *dict);
void ape_valdict_destroy(ApeValDict *dict);
void ape_valdict_destroywithitems(ApeContext *ctx, ApeValDict *dict);
void ape_valdict_sethashfunction(ApeValDict *dict, ApeDataHashFunc hash_fn);
void ape_valdict_setequalsfunction(ApeValDict *dict, ApeDataEqualsFunc equals_fn);
bool ape_valdict_set(ApeValDict *dict, void *key, void *value);
void *ape_valdict_getbyhash(const ApeValDict *dict, const void *key, unsigned long hash);
void *ape_valdict_getbykey(const ApeValDict *dict, const void *key);
ApeSize ape_valdict_getcellindex(const ApeValDict *dict, const void *key, unsigned long hash, bool *out_found);
bool ape_valdict_growandrehash(ApeValDict *dict);
bool ape_valdict_setkeyat(ApeValDict *dict, ApeSize ix, void *key);
bool ape_valdict_keysareequal(const ApeValDict *dict, const void *a, const void *b);
unsigned long ape_valdict_hashkey(const ApeValDict *dict, const void *key);
void ape_valdict_setcopyfunc(ApeValDict *dict, ApeDataCallback fn);
void ape_valdict_setdeletefunc(ApeValDict *dict, ApeDataCallback fn);
ApeValDict *ape_valdict_copywithitems(ApeContext *ctx, ApeValDict *dict);
ApeStrDict *ape_make_strdict(ApeContext *ctx, ApeDataCallback copy_fn, ApeDataCallback destroy_fn);
bool ape_strdict_init(ApeStrDict *dict, ApeContext *ctx, ApeSize initial_capacity, ApeDataCallback copy_fn, ApeDataCallback destroy_fn);
void ape_strdict_deinit(ApeStrDict *dict, bool free_keys);
void ape_strdict_destroy(ApeStrDict *dict);
void ape_strdict_destroywithitems(ApeContext *ctx, ApeStrDict *dict);
ApeStrDict *ape_strdict_copywithitems(ApeContext *ctx, ApeStrDict *dict);
bool ape_strdict_set(ApeStrDict *dict, const char *key, void *value);
ApeSize ape_strdict_getcellindex(const ApeStrDict *dict, const char *key, unsigned long keyhash, bool *out_found);
void *ape_strdict_getbyhash(const ApeStrDict *dict, const char *key, unsigned long hash);
void *ape_strdict_getbyname(const ApeStrDict *dict, const char *key);
void *ape_strdict_getvalueat(const ApeStrDict *dict, ApeSize ix);
const char *ape_strdict_getkeyat(const ApeStrDict *dict, ApeSize ix);
ApeSize ape_strdict_count(const ApeStrDict *dict);
bool ape_strdict_growandrehash(ApeStrDict *dict);
bool ape_strdict_setinternal(ApeStrDict *dict, const char *ckey, char *mkey, void *value);
ApeObject ape_object_make_map(ApeContext *ctx);
ApeObject ape_object_make_mapcapacity(ApeContext *ctx, unsigned capacity);
ApeSize ape_object_map_getlength(ApeObject object);
ApeObject ape_object_map_getkeyat(ApeObject object, ApeSize ix);
ApeObject ape_object_map_getvalueat(ApeObject object, ApeSize ix);
bool ape_object_map_setvalue(ApeObject object, ApeObject key, ApeObject val);
ApeObject ape_object_map_getvalueobject(ApeObject object, ApeObject key);
bool ape_object_map_setnamedvalue(ApeContext *ctx, ApeObject obj, const char *key, ApeObject value);
bool ape_object_map_setnamedstringlen(ApeContext *ctx, ApeObject obj, const char *key, const char *string, size_t len);
bool ape_object_map_setnamedstring(ApeContext *ctx, ApeObject obj, const char *key, const char *string);
bool ape_object_map_setnamednumber(ApeContext *ctx, ApeObject obj, const char *key, ApeFloat number);
bool ape_object_map_setnamedbool(ApeContext *ctx, ApeObject obj, const char *key, bool value);
/* main.c */
void print_types(void);
bool casecmplen(const char *s1, size_t l1, const char *s2, size_t l2);
bool casecmp(const char *s1, const char *s2);
bool icontains(const char **strlist, const char *findme);
int main(int argc, char *argv[]);
/* libstring.c */
char *ape_object_string_getinternalobjdata(ApeGCObjData *data);
const char *ape_object_string_getdata(ApeObject object);
char *ape_object_string_getmutable(ApeObject object);
ApeObject ape_object_make_string(ApeContext *ctx, const char *string);
ApeObject ape_object_make_stringlen(ApeContext *ctx, const char *string, ApeSize len);
ApeObject ape_object_make_stringcapacity(ApeContext *ctx, ApeSize capacity);
bool ape_object_string_reservecapacity(ApeContext *ctx, ApeGCObjData *data, ApeSize capacity);
ApeSize ape_object_string_getlength(ApeObject object);
void ape_object_string_setlength(ApeObject object, ApeSize len);
bool ape_object_string_append(ApeContext *ctx, ApeObject obj, const char *src, ApeSize len);
unsigned long ape_object_string_gethash(ApeObject obj);
ApeObject ape_builtins_stringformat(ApeContext *ctx, const char *fmt, ApeSize fmtlen, ApeSize argc, ApeObject *args);
void ape_builtins_install_string(ApeVM *vm);
/* libarray.c */
ApeValArray *ape_make_valarray(ApeContext *ctx, ApeSize elsz);
ApeValArray *ape_make_valarraycapacity(ApeContext *ctx, ApeSize capacity, ApeSize elsz);
bool ape_valarray_init(ApeContext *ctx, ApeValArray *arr, ApeSize capacity);
void ape_valarray_deinit(ApeValArray *arr);
void ape_valarray_destroy(ApeValArray *arr);
ApeSize ape_valarray_count(ApeValArray *arr);
ApeSize ape_valarray_capacity(ApeValArray *arr);
ApeSize ape_valarray_size(ApeValArray *arr);
bool ape_valarray_canappend(ApeValArray *arr);
bool ape_valarray_push(ApeValArray *arr, void *value);
void *ape_valarray_get(ApeValArray *arr, ApeSize ix);
bool ape_valarray_setcheck(ApeValArray* arr, ApeSize ix, void* value, bool check);
bool ape_valarray_set(ApeValArray *arr, ApeSize ix, void *value);
void *ape_valarray_pop(ApeValArray *arr);
bool ape_valarray_popinto(ApeValArray *arr, void *out_value);
void *ape_valarray_top(ApeValArray *arr);
ApeValArray *ape_valarray_copy(ApeContext *ctx, ApeValArray *arr);
bool ape_valarray_removeat(ApeValArray *arr, ApeSize ix);
void ape_valarray_clear(ApeValArray *arr);
void *ape_valarray_data(ApeValArray *arr);
void ape_valarray_reset(ApeValArray *arr);
ApePtrArray *ape_make_ptrarray(ApeContext *ctx);
ApePtrArray *ape_make_ptrarraycapacity(ApeContext *ctx, ApeSize capacity);
void ape_ptrarray_destroy(ApePtrArray *arr);
void ape_ptrarray_destroywithitems(ApeContext *ctx, ApePtrArray *arr, ApeDataCallback destroyfn);
void ape_ptrarray_clearanddestroyitems(ApeContext *ctx, ApePtrArray *arr, ApeDataCallback destroyfn);
ApePtrArray *ape_ptrarray_copywithitems(ApeContext *ctx, ApePtrArray *arr, ApeDataCallback copyfn, ApeDataCallback destroyfn);
ApeSize ape_ptrarray_count(ApePtrArray *arr);
void *ape_ptrarray_pop(ApePtrArray *arr);
void *ape_ptrarray_top(ApePtrArray *arr);
bool ape_ptrarray_push(ApePtrArray *arr, void *ptr);
void *ape_ptrarray_get(ApePtrArray *arr, ApeSize ix);
bool ape_ptrarray_removeat(ApePtrArray *arr, ApeSize ix);
void ape_ptrarray_clear(ApePtrArray *arr);
ApeObject ape_object_make_array(ApeContext *ctx);
ApeObject ape_object_make_arraycapacity(ApeContext *ctx, unsigned capacity);
ApeObject ape_object_array_getvalue(ApeObject object, ApeSize ix);
bool ape_object_array_setat(ApeObject object, ApeInt ix, ApeObject val);
bool ape_object_array_pushvalue(ApeObject object, ApeObject val);
bool ape_object_array_popvalue(ApeObject object, ApeObject *dest);
ApeSize ape_object_array_getlength(ApeObject object);
bool ape_object_array_removeat(ApeObject object, ApeInt ix);
bool ape_object_array_pushstring(ApeContext *ctx, ApeObject obj, const char *string);
ApeValArray *ape_object_array_getarray(ApeObject object);
void ape_builtins_install_array(ApeVM *vm);
/* libmod.c */
ApeModule *ape_make_module(ApeContext *ctx, const char *name);
void *ape_module_destroy(ApeContext *ctx, ApeModule *module);
ApeModule *ape_module_copy(ApeContext *ctx, ApeModule *src);
const char *ape_module_getname(const char *path);
bool ape_module_addsymbol(ApeModule *module, const ApeSymbol *symbol);
/* libmath.c */
void ape_builtins_install_math(ApeVM *vm);
/* libfunction.c */
ApeObject ape_object_make_function(ApeContext *ctx, const char *name, ApeAstCompResult *cres, bool wdata, ApeInt nloc, ApeInt nargs, ApeSize fvcount);
ApeObject ape_object_make_nativefuncmemory(ApeContext *ctx, const char *name, ApeNativeFuncPtr fn, void *data, ApeSize dlen);
const char *ape_object_function_getname(ApeObject obj);
ApeObject ape_object_function_getfreeval(ApeObject obj, ApeInt ix);
void ape_object_function_setfreeval(ApeObject obj, ApeInt ix, ApeObject val);
/* builtins.c */
void ape_builtins_setup_namespace(ApeVM *vm, const char *nsname, ApeNativeItem *fnarray);
void ape_builtins_install_vm(ApeVM *vm);
void ape_builtins_install_object(ApeVM *vm);
void ape_builtins_install(ApeVM *vm);
ApeSize ape_builtins_count(void);
ApeNativeFuncPtr ape_builtins_getfunc(ApeSize ix);
const char *ape_builtins_getname(ApeSize ix);
/* writer.c */
ApeWriter *ape_make_writer(ApeContext *ctx);
ApeWriter *ape_make_writerdefault(ApeContext *ctx);
ApeWriter *ape_make_writercapacity(ApeContext *ctx, ApeSize capacity);
ApeWriter *ape_make_writerio(ApeContext *ctx, FILE *hnd, bool alsoclose, bool alsoflush);
void ape_writer_destroy(ApeWriter *buf);
bool ape_writer_appendlen(ApeWriter *buf, const char *str, ApeSize str_len);
bool ape_writer_append(ApeWriter *buf, const char *str);
bool ape_writer_appendf(ApeWriter *buf, const char *fmt, ...);
const char *ape_writer_getdata(const ApeWriter *buf);
const char *ape_writer_getstring(const ApeWriter *buf);
ApeSize ape_writer_getlength(const ApeWriter *buf);
char *ape_writer_getstringanddestroy(ApeWriter *buf);
bool ape_writer_failed(ApeWriter *buf);
bool ape_writer_grow(ApeWriter *buf, ApeSize new_capacity);
