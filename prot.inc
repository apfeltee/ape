/* libobject.c */
_Bool object_value_isnumber(ApeObject_t o);
_Bool object_value_isnumeric(ApeObject_t obj);
_Bool object_value_isnull(ApeObject_t obj);
_Bool object_value_iscallable(ApeObject_t obj);
_Bool object_value_isallocated(ApeObject_t object);
_Bool object_value_ishashable(ApeObject_t obj);
_Bool object_value_asbool(ApeObject_t obj);
ApeFloat_t object_value_asnumber(ApeObject_t obj);
ApeFunction_t *object_value_asfunction(ApeObject_t object);
ApeNativeFunction_t *object_value_asnativefunction(ApeObject_t obj);
ApeExternalData_t *object_value_asexternal(ApeObject_t object);
ApeObjectType_t object_value_type(ApeObject_t obj);
const char *object_value_typename(const ApeObjectType_t type);
uint64_t object_value_typetag(ApeObjectType_t type);
ApeObject_t object_make_from_data(ApeObjectType_t type, ApeObjectData_t *data);
ApeObject_t object_make_number(ApeFloat_t val);
ApeObject_t object_make_bool(_Bool val);
ApeObject_t object_make_null(void);
ApeObject_t object_make_external(ApeGCMemory_t *mem, void *data);
void object_data_deinit(ApeObjectData_t *data);
ApeGCMemory_t *object_value_getmem(ApeObject_t obj);
char *object_value_typeunionname(ApeAllocator_t *alloc, const ApeObjectType_t type);
char *object_value_serialize(ApeAllocator_t *alloc, ApeObject_t object, ApeSize_t *lendest);
_Bool object_value_setexternaldata(ApeObject_t object, void *ext_data);
_Bool object_value_setexternalcopy(ApeObject_t object, ApeDataCallback_t copy_fn);
ApeObject_t object_get_kv_pair_at(ApeGCMemory_t *mem, ApeObject_t object, int ix);
ApeObject_t object_value_internal_copydeep(ApeGCMemory_t *mem, ApeObject_t obj, ApeValDictionary_t *copies);
_Bool object_value_wrapequals(const ApeObject_t *a_ptr, const ApeObject_t *b_ptr);
unsigned long object_value_hash(ApeObject_t *obj_ptr);
ApeObject_t object_value_copydeep(ApeGCMemory_t *mem, ApeObject_t obj);
ApeObject_t object_value_copyflat(ApeGCMemory_t *mem, ApeObject_t obj);
ApeFloat_t object_value_compare(ApeObject_t a, ApeObject_t b, _Bool *out_ok);
_Bool object_value_equals(ApeObject_t a, ApeObject_t b);
_Bool object_value_setexternaldestroy(ApeObject_t object, ApeDataCallback_t destroy_fn);
ApeObjectData_t *object_value_allocated_data(ApeObject_t object);
/* error.c */
ApeObject_t object_make_error(ApeGCMemory_t *mem, const char *error);
ApeObject_t object_make_error_no_copy(ApeGCMemory_t *mem, char *error);
void errorlist_initerrors(ApeErrorList_t *errors);
void errorlist_destroy(ApeErrorList_t *errors);
void errorlist_add(ApeErrorList_t *errors, ApeErrorType_t type, ApePosition_t pos, const char *message);
void errorlist_addformat(ApeErrorList_t *errors, ApeErrorType_t type, ApePosition_t pos, const char *format, ...);
void errorlist_clear(ApeErrorList_t *errors);
ApeSize_t errorlist_count(const ApeErrorList_t *errors);
const ApeError_t *errorlist_getat(const ApeErrorList_t *errors, int ix);
ApeError_t *errorlist_lasterror(ApeErrorList_t *errors);
_Bool errorlist_haserrors(const ApeErrorList_t *errors);
const char *error_getmessage(const ApeError_t *ae);
const char *error_getfile(const ApeError_t *ae);
const char *error_getsource(const ApeError_t *error);
int error_getline(const ApeError_t *ae);
int error_getcolumn(const ApeError_t *ae);
ApeErrorType_t error_gettype(const ApeError_t *ae);
const char *error_gettypestring(const ApeError_t *error);
const ApeTraceback_t *error_gettraceback(const ApeError_t *ae);
const char *object_value_geterrormessage(ApeObject_t object);
void object_value_seterrortraceback(ApeObject_t object, ApeTraceback_t *traceback);
ApeTraceback_t *object_value_geterrortraceback(ApeObject_t object);
/* vm.c */
ApeAllocator_t allocator_make(ApeMemAllocFunc_t malloc_fn, ApeMemFreeFunc_t free_fn, void *ctx);
void *allocator_malloc(ApeAllocator_t *allocator, size_t size);
void allocator_free(ApeAllocator_t *allocator, void *ptr);
ApeCompiledFile_t *compiled_file_make(ApeAllocator_t *alloc, const char *path);
void *compiled_file_destroy(ApeCompiledFile_t *file);
ApeGlobalStore_t *global_store_make(ApeAllocator_t *alloc, ApeGCMemory_t *mem);
void global_store_destroy(ApeGlobalStore_t *store);
const ApeSymbol_t *global_store_get_symbol(ApeGlobalStore_t *store, const char *name);
_Bool global_store_set(ApeGlobalStore_t *store, const char *name, ApeObject_t object);
ApeObject_t global_store_get_object_at(ApeGlobalStore_t *store, int ix, _Bool *out_ok);
ApeObject_t *global_store_get_object_data(ApeGlobalStore_t *store);
ApeSize_t global_store_get_object_count(ApeGlobalStore_t *store);
ApeSymbol_t *symbol_make(ApeAllocator_t *alloc, const char *name, ApeSymbolType_t type, int index, _Bool assignable);
void *symbol_destroy(ApeSymbol_t *symbol);
ApeSymbol_t *symbol_copy(ApeSymbol_t *symbol);
ApeSymbolTable_t *symbol_table_make(ApeAllocator_t *alloc, ApeSymbolTable_t *outer, ApeGlobalStore_t *global_store, int module_global_offset);
void symbol_table_destroy(ApeSymbolTable_t *table);
ApeSymbolTable_t *symbol_table_copy(ApeSymbolTable_t *table);
_Bool symbol_table_add_module_symbol(ApeSymbolTable_t *st, ApeSymbol_t *symbol);
const ApeSymbol_t *symbol_table_define(ApeSymbolTable_t *table, const char *name, _Bool assignable);
const ApeSymbol_t *symbol_table_define_free(ApeSymbolTable_t *st, const ApeSymbol_t *original);
const ApeSymbol_t *symbol_table_define_function_name(ApeSymbolTable_t *st, const char *name, _Bool assignable);
const ApeSymbol_t *symbol_table_define_this(ApeSymbolTable_t *st);
const ApeSymbol_t *symbol_table_resolve(ApeSymbolTable_t *table, const char *name);
_Bool symbol_table_symbol_is_defined(ApeSymbolTable_t *table, const char *name);
_Bool symbol_table_push_block_scope(ApeSymbolTable_t *table);
void symbol_table_pop_block_scope(ApeSymbolTable_t *table);
ApeBlockScope_t *symbol_table_get_block_scope(ApeSymbolTable_t *table);
_Bool symbol_table_is_module_global_scope(ApeSymbolTable_t *table);
_Bool symbol_table_is_top_block_scope(ApeSymbolTable_t *table);
_Bool symbol_table_is_top_global_scope(ApeSymbolTable_t *table);
ApeSize_t symbol_table_get_module_global_symbol_count(const ApeSymbolTable_t *table);
const ApeSymbol_t *symbol_table_get_module_global_symbol_at(const ApeSymbolTable_t *table, int ix);
ApeBlockScope_t *block_scope_make(ApeAllocator_t *alloc, int offset);
void *block_scope_destroy(ApeBlockScope_t *scope);
ApeBlockScope_t *block_scope_copy(ApeBlockScope_t *scope);
ApeOpcodeDefinition_t *opcode_lookup(ApeOpByte_t op);
const char *opcode_get_name(ApeOpByte_t op);
int code_make(ApeOpByte_t op, ApeSize_t operands_count, uint64_t *operands, ApeArray_t *res);
ApeCompilationScope_t *compilation_scope_make(ApeAllocator_t *alloc, ApeCompilationScope_t *outer);
void compilation_scope_destroy(ApeCompilationScope_t *scope);
ApeCompilationResult_t *compilation_scope_orphan_result(ApeCompilationScope_t *scope);
ApeCompilationResult_t *compilation_result_make(ApeAllocator_t *alloc, ApeUShort_t *bytecode, ApePosition_t *src_positions, int count);
void compilation_result_destroy(ApeCompilationResult_t *res);
ApeExpression_t *optimise_expression(ApeExpression_t *expr);
ApeExpression_t *optimise_infix_expression(ApeExpression_t *expr);
ApeExpression_t *optimise_prefix_expression(ApeExpression_t *expr);
ApeModule_t *module_make(ApeAllocator_t *alloc, const char *name);
void *module_destroy(ApeModule_t *module);
ApeModule_t *module_copy(ApeModule_t *src);
const char *get_module_name(const char *path);
_Bool module_add_symbol(ApeModule_t *module, const ApeSymbol_t *symbol);
ApeGCMemory_t *gcmem_make(ApeAllocator_t *alloc);
void gcmem_destroy(ApeGCMemory_t *mem);
ApeObjectData_t *gcmem_alloc_object_data(ApeGCMemory_t *mem, ApeObjectType_t type);
ApeObjectData_t *gcmem_get_object_data_from_pool(ApeGCMemory_t *mem, ApeObjectType_t type);
void gc_unmark_all(ApeGCMemory_t *mem);
void gc_mark_objects(ApeObject_t *objects, ApeSize_t count);
void gc_mark_object(ApeObject_t obj);
void gc_sweep(ApeGCMemory_t *mem);
int gc_should_sweep(ApeGCMemory_t *mem);
ApeObjectDataPool_t *get_pool_for_type(ApeGCMemory_t *mem, ApeObjectType_t type);
_Bool can_data_be_put_in_pool(ApeGCMemory_t *mem, ApeObjectData_t *data);
ApeTraceback_t *traceback_make(ApeAllocator_t *alloc);
void traceback_destroy(ApeTraceback_t *traceback);
_Bool traceback_append(ApeTraceback_t *traceback, const char *function_name, ApePosition_t pos);
_Bool traceback_append_from_vm(ApeTraceback_t *traceback, ApeVM_t *vm);
const char *traceback_item_get_filepath(ApeTracebackItem_t *item);
_Bool frame_init(ApeFrame_t *frame, ApeObject_t function_obj, int base_pointer);
ApeOpcodeValue_t frame_read_opcode(ApeFrame_t *frame);
uint64_t frame_read_uint64(ApeFrame_t *frame);
uint16_t frame_read_uint16(ApeFrame_t *frame);
ApeUShort_t frame_read_uint8(ApeFrame_t *frame);
ApePosition_t frame_src_position(const ApeFrame_t *frame);
ApeObject_t vm_get_last_popped(ApeVM_t *vm);
_Bool vm_has_errors(ApeVM_t *vm);
_Bool vm_set_global(ApeVM_t *vm, ApeSize_t ix, ApeObject_t val);
ApeObject_t vm_get_global(ApeVM_t *vm, ApeSize_t ix);
void vmpriv_pushstack(ApeVM_t *vm, ApeObject_t obj);
ApeObject_t vmpriv_popstack(ApeVM_t *vm);
ApeObject_t vmpriv_getstack(ApeVM_t *vm, int nth_item);
_Bool vmpriv_pushframe(ApeVM_t *vm, ApeFrame_t frame);
_Bool vmpriv_popframe(ApeVM_t *vm);
void vmpriv_collectgarbage(ApeVM_t *vm, ApeArray_t *constants);
_Bool vmpriv_callobject(ApeVM_t *vm, ApeObject_t callee, int num_args);
ApeObject_t vmpriv_callnativefunction(ApeVM_t *vm, ApeObject_t callee, ApePosition_t src_pos, int argc, ApeObject_t *args);
_Bool vmpriv_checkassign(ApeVM_t *vm, ApeObject_t old_value, ApeObject_t new_value);
ApeVM_t *vm_make(ApeAllocator_t *alloc, const ApeConfig_t *config, ApeGCMemory_t *mem, ApeErrorList_t *errors, ApeGlobalStore_t *global_store);
void vm_destroy(ApeVM_t *vm);
void vm_reset(ApeVM_t *vm);
_Bool vm_run(ApeVM_t *vm, ApeCompilationResult_t *comp_res, ApeArray_t *constants);
_Bool vmpriv_append_string(ApeVM_t *vm, ApeObject_t left, ApeObject_t right, ApeObjectType_t lefttype, ApeObjectType_t righttype);
_Bool vm_execute_function(ApeVM_t *vm, ApeObject_t function, ApeArray_t *constants);
/* util.c */
char *util_stringfmt(ApeAllocator_t *alloc, const char *format, ...);
uint64_t util_double_to_uint64(ApeFloat_t val);
ApeFloat_t util_uint64_to_double(uint64_t val);
_Bool util_timer_supported(void);
ApeTimer_t util_timer_start(void);
ApeFloat_t util_timer_getelapsed(const ApeTimer_t *timer);
char *util_strndup(ApeAllocator_t *alloc, const char *string, size_t n);
char *util_strdup(ApeAllocator_t *alloc, const char *string);
unsigned long util_hashstring(const void *ptr, size_t len);
unsigned long util_hashdouble(ApeFloat_t val);
unsigned int util_upperpoweroftwo(unsigned int v);
char *util_default_readfile(void *ctx, const char *filename);
size_t util_default_writefile(void *ctx, const char *path, const char *string, size_t string_size);
size_t util_default_stdoutwrite(void *ctx, const void *data, size_t size);
void *util_default_malloc(void *ctx, size_t size);
void util_default_free(void *ctx, void *ptr);
ApePtrArray_t *util_split_string(ApeAllocator_t *alloc, const char *str, const char *delimiter);
char *util_join(ApeAllocator_t *alloc, ApePtrArray_t *items, const char *with);
char *util_canonicalisepath(ApeAllocator_t *alloc, const char *path);
_Bool util_is_absolutepath(const char *path);
_Bool util_strequal(const char *a, const char *b);
/* context.c */
ApeContext_t *context_make(void);
ApeContext_t *context_make_ex(ApeMemAllocFunc_t malloc_fn, ApeMemFreeFunc_t free_fn, void *ctx);
void context_destroy(ApeContext_t *ape);
void context_freeallocated(ApeContext_t *ape, void *ptr);
void context_setreplmode(ApeContext_t *ape, _Bool enabled);
_Bool context_settimeout(ApeContext_t *ape, ApeFloat_t max_execution_time_ms);
void context_setstdoutwrite(ApeContext_t *ape, ApeIOStdoutWriteFunc_t stdout_write, void *context);
void context_setfilewrite(ApeContext_t *ape, ApeIOWriteFunc_t file_write, void *context);
void context_setfileread(ApeContext_t *ape, ApeIOReadFunc_t file_read, void *context);
ApeObject_t context_executesource(ApeContext_t *ape, const char *code);
ApeObject_t context_executefile(ApeContext_t *ape, const char *path);
_Bool context_haserrors(const ApeContext_t *ape);
ApeSize_t context_errorcount(const ApeContext_t *ape);
void context_clearerrors(ApeContext_t *ape);
const ApeError_t *context_geterror(const ApeContext_t *ape, int index);
_Bool context_setnativefunction(ApeContext_t *ape, const char *name, ApeWrappedNativeFunc_t fn, void *data);
_Bool context_setglobal(ApeContext_t *ape, const char *name, ApeObject_t obj);
char *context_errortostring(ApeContext_t *ape, const ApeError_t *err);
void context_deinit(ApeContext_t *ape);
ApeObject_t context_makenamednative(ApeContext_t *ape, const char *name, ApeWrappedNativeFunc_t fn, void *data);
void context_resetstate(ApeContext_t *ape);
void context_setdefaultconfig(ApeContext_t *ape);
/* libmap.c */
ApeValDictionary_t *valdict_make_(ApeAllocator_t *alloc, ApeSize_t key_size, ApeSize_t val_size);
ApeValDictionary_t *valdict_makecapacity(ApeAllocator_t *alloc, ApeSize_t min_capacity, ApeSize_t key_size, ApeSize_t val_size);
void valdict_destroy(ApeValDictionary_t *dict);
void valdict_sethashfunction(ApeValDictionary_t *dict, ApeDataHashFunc_t hash_fn);
void valdict_setequalsfunction(ApeValDictionary_t *dict, ApeDataEqualsFunc_t equals_fn);
_Bool valdict_set(ApeValDictionary_t *dict, void *key, void *value);
void *valdict_get(const ApeValDictionary_t *dict, const void *key);
void *valdict_getkeyat(const ApeValDictionary_t *dict, ApeSize_t ix);
void *valdict_getvalueat(const ApeValDictionary_t *dict, ApeSize_t ix);
_Bool valdict_setvalueat(const ApeValDictionary_t *dict, ApeSize_t ix, const void *value);
ApeSize_t valdict_count(const ApeValDictionary_t *dict);
void valdict_clear(ApeValDictionary_t *dict);
_Bool valdict_init(ApeValDictionary_t *dict, ApeAllocator_t *alloc, ApeSize_t key_size, ApeSize_t val_size, ApeSize_t initial_capacity);
void valdict_deinit(ApeValDictionary_t *dict);
ApeSize_t valdict_getcellindex(const ApeValDictionary_t *dict, const void *key, unsigned long hash, _Bool *out_found);
_Bool valdict_growandrehash(ApeValDictionary_t *dict);
_Bool valdict_setkeyat(ApeValDictionary_t *dict, ApeSize_t ix, void *key);
_Bool valdict_keysareequal(const ApeValDictionary_t *dict, const void *a, const void *b);
unsigned long valdict_hashkey(const ApeValDictionary_t *dict, const void *key);
void valdict_destroywithitems(ApeValDictionary_t *dict);
void valdict_setcopyfunc(ApeValDictionary_t *dict, ApeDataCallback_t fn);
void valdict_setdeletefunc(ApeValDictionary_t *dict, ApeDataCallback_t fn);
ApeValDictionary_t *valdict_copywithitems(ApeValDictionary_t *dict);
ApeStrDictionary_t *strdict_make(ApeAllocator_t *alloc, ApeDataCallback_t copy_fn, ApeDataCallback_t destroy_fn);
void strdict_destroy(ApeStrDictionary_t *dict);
void strdict_destroywithitems(ApeStrDictionary_t *dict);
ApeStrDictionary_t *strdict_copywithitems(ApeStrDictionary_t *dict);
_Bool strdict_set(ApeStrDictionary_t *dict, const char *key, void *value);
void *strdict_get(const ApeStrDictionary_t *dict, const char *key);
void *strdict_getvalueat(const ApeStrDictionary_t *dict, ApeSize_t ix);
const char *strdict_getkeyat(const ApeStrDictionary_t *dict, ApeSize_t ix);
ApeSize_t strdict_count(const ApeStrDictionary_t *dict);
_Bool strdict_init(ApeStrDictionary_t *dict, ApeAllocator_t *alloc, ApeSize_t initial_capacity, ApeDataCallback_t copy_fn, ApeDataCallback_t destroy_fn);
void strdict_deinit(ApeStrDictionary_t *dict, _Bool free_keys);
ApeSize_t strdict_getcellindex(const ApeStrDictionary_t *dict, const char *key, unsigned long hash, _Bool *out_found);
_Bool strdict_growandrehash(ApeStrDictionary_t *dict);
_Bool strdict_setinternal(ApeStrDictionary_t *dict, const char *ckey, char *mkey, void *value);
ApeObject_t object_make_map(ApeGCMemory_t *mem);
ApeObject_t object_make_mapcapacity(ApeGCMemory_t *mem, unsigned capacity);
ApeSize_t object_map_getlength(ApeObject_t object);
ApeObject_t object_map_getkeyat(ApeObject_t object, ApeSize_t ix);
ApeObject_t object_map_getvalueat(ApeObject_t object, ApeSize_t ix);
_Bool object_map_setvalue(ApeObject_t object, ApeObject_t key, ApeObject_t val);
ApeObject_t object_map_getvalueobject(ApeObject_t object, ApeObject_t key);
_Bool object_map_setnamedvalue(ApeObject_t obj, const char *key, ApeObject_t value);
_Bool object_map_setnamedstring(ApeObject_t obj, const char *key, const char *string);
_Bool object_map_setnamednumber(ApeObject_t obj, const char *key, ApeFloat_t number);
_Bool object_map_setnamedbool(ApeObject_t obj, const char *key, _Bool value);
/* main.c */
int main(int argc, char *argv[]);
/* ccparse.c */
ApeExpression_t *expression_make_ident(ApeAllocator_t *alloc, ApeIdent_t *ident);
ApeExpression_t *expression_make_number_literal(ApeAllocator_t *alloc, ApeFloat_t val);
ApeExpression_t *expression_make_bool_literal(ApeAllocator_t *alloc, _Bool val);
ApeExpression_t *expression_make_string_literal(ApeAllocator_t *alloc, char *value);
ApeExpression_t *expression_make_null_literal(ApeAllocator_t *alloc);
ApeExpression_t *expression_make_array_literal(ApeAllocator_t *alloc, ApePtrArray_t *values);
ApeExpression_t *expression_make_map_literal(ApeAllocator_t *alloc, ApePtrArray_t *keys, ApePtrArray_t *values);
ApeExpression_t *expression_make_prefix(ApeAllocator_t *alloc, ApeOperator_t op, ApeExpression_t *right);
ApeExpression_t *expression_make_infix(ApeAllocator_t *alloc, ApeOperator_t op, ApeExpression_t *left, ApeExpression_t *right);
ApeExpression_t *expression_make_fn_literal(ApeAllocator_t *alloc, ApePtrArray_t *params, ApeCodeblock_t *body);
ApeExpression_t *expression_make_call(ApeAllocator_t *alloc, ApeExpression_t *function, ApePtrArray_t *args);
ApeExpression_t *expression_make_index(ApeAllocator_t *alloc, ApeExpression_t *left, ApeExpression_t *index);
ApeExpression_t *expression_make_assign(ApeAllocator_t *alloc, ApeExpression_t *dest, ApeExpression_t *source, _Bool is_postfix);
ApeExpression_t *expression_make_logical(ApeAllocator_t *alloc, ApeOperator_t op, ApeExpression_t *left, ApeExpression_t *right);
ApeExpression_t *expression_make_ternary(ApeAllocator_t *alloc, ApeExpression_t *test, ApeExpression_t *if_true, ApeExpression_t *if_false);
void *expression_destroy(ApeExpression_t *expr);
ApeExpression_t *expression_copy(ApeExpression_t *expr);
ApeStatement_t *statement_make_define(ApeAllocator_t *alloc, ApeIdent_t *name, ApeExpression_t *value, _Bool assignable);
ApeStatement_t *statement_make_if(ApeAllocator_t *alloc, ApePtrArray_t *cases, ApeCodeblock_t *alternative);
ApeStatement_t *statement_make_return(ApeAllocator_t *alloc, ApeExpression_t *value);
ApeStatement_t *statement_make_expression(ApeAllocator_t *alloc, ApeExpression_t *value);
ApeStatement_t *statement_make_while_loop(ApeAllocator_t *alloc, ApeExpression_t *test, ApeCodeblock_t *body);
ApeStatement_t *statement_make_break(ApeAllocator_t *alloc);
ApeStatement_t *statement_make_foreach(ApeAllocator_t *alloc, ApeIdent_t *iterator, ApeExpression_t *source, ApeCodeblock_t *body);
ApeStatement_t *statement_make_for_loop(ApeAllocator_t *alloc, ApeStatement_t *init, ApeExpression_t *test, ApeExpression_t *update, ApeCodeblock_t *body);
ApeStatement_t *statement_make_continue(ApeAllocator_t *alloc);
ApeStatement_t *statement_make_block(ApeAllocator_t *alloc, ApeCodeblock_t *block);
ApeStatement_t *statement_make_import(ApeAllocator_t *alloc, char *path);
ApeStatement_t *statement_make_recover(ApeAllocator_t *alloc, ApeIdent_t *error_ident, ApeCodeblock_t *body);
void *statement_destroy(ApeStatement_t *stmt);
ApeStatement_t *statement_copy(const ApeStatement_t *stmt);
ApeCodeblock_t *code_block_make(ApeAllocator_t *alloc, ApePtrArray_t *statements);
void *code_block_destroy(ApeCodeblock_t *block);
ApeCodeblock_t *code_block_copy(ApeCodeblock_t *block);
void *ident_destroy(ApeIdent_t *ident);
ApeIfCase_t *if_case_make(ApeAllocator_t *alloc, ApeExpression_t *test, ApeCodeblock_t *consequence);
void *if_case_destroy(ApeIfCase_t *cond);
ApeIfCase_t *if_case_copy(ApeIfCase_t *if_case);
ApeExpression_t *expression_make(ApeAllocator_t *alloc, ApeExprType_t type);
ApeStatement_t *statement_make(ApeAllocator_t *alloc, ApeStatementType_t type);
ApeParser_t *parser_make(ApeAllocator_t *alloc, const ApeConfig_t *config, ApeErrorList_t *errors);
void parser_destroy(ApeParser_t *parser);
ApePtrArray_t *parser_parse_all(ApeParser_t *parser, const char *input, ApeCompiledFile_t *file);
ApeStatement_t *parse_statement(ApeParser_t *p);
ApeStatement_t *parse_define_statement(ApeParser_t *p);
ApeStatement_t *parse_if_statement(ApeParser_t *p);
ApeStatement_t *parse_return_statement(ApeParser_t *p);
ApeStatement_t *parse_expression_statement(ApeParser_t *p);
ApeStatement_t *parse_while_loop_statement(ApeParser_t *p);
ApeStatement_t *parse_break_statement(ApeParser_t *p);
ApeStatement_t *parse_continue_statement(ApeParser_t *p);
ApeStatement_t *parse_block_statement(ApeParser_t *p);
ApeStatement_t *parse_import_statement(ApeParser_t *p);
ApeStatement_t *parse_recover_statement(ApeParser_t *p);
ApeStatement_t *parse_for_loop_statement(ApeParser_t *p);
ApeStatement_t *parse_foreach(ApeParser_t *p);
ApeStatement_t *parse_classic_for_loop(ApeParser_t *p);
ApeStatement_t *parse_function_statement(ApeParser_t *p);
ApeCodeblock_t *parse_code_block(ApeParser_t *p);
ApeExpression_t *parse_expression(ApeParser_t *p, ApePrecedence_t prec);
ApeExpression_t *parse_identifier(ApeParser_t *p);
ApeExpression_t *parse_number_literal(ApeParser_t *p);
ApeExpression_t *parse_bool_literal(ApeParser_t *p);
ApeExpression_t *parse_string_literal(ApeParser_t *p);
ApeExpression_t *parse_template_string_literal(ApeParser_t *p);
ApeExpression_t *parse_null_literal(ApeParser_t *p);
ApeExpression_t *parse_array_literal(ApeParser_t *p);
ApeExpression_t *parse_map_literal(ApeParser_t *p);
ApeExpression_t *parse_prefix_expression(ApeParser_t *p);
ApeExpression_t *parse_infix_expression(ApeParser_t *p, ApeExpression_t *left);
ApeExpression_t *parse_grouped_expression(ApeParser_t *p);
ApeExpression_t *parse_function_literal(ApeParser_t *p);
_Bool parse_function_parameters(ApeParser_t *p, ApePtrArray_t *out_params);
ApeExpression_t *parse_call_expression(ApeParser_t *p, ApeExpression_t *left);
ApePtrArray_t *parse_expression_list(ApeParser_t *p, ApeTokenType_t start_token, ApeTokenType_t end_token, _Bool trailing_comma_allowed);
ApeExpression_t *parse_index_expression(ApeParser_t *p, ApeExpression_t *left);
ApeExpression_t *parse_assign_expression(ApeParser_t *p, ApeExpression_t *left);
ApeExpression_t *parse_logical_expression(ApeParser_t *p, ApeExpression_t *left);
ApeExpression_t *parse_ternary_expression(ApeParser_t *p, ApeExpression_t *left);
ApeExpression_t *parse_incdec_prefix_expression(ApeParser_t *p);
ApeExpression_t *parse_incdec_postfix_expression(ApeParser_t *p, ApeExpression_t *left);
ApeExpression_t *parse_dot_expression(ApeParser_t *p, ApeExpression_t *left);
/* libstring.c */
ApeObject_t object_make_stringlen(ApeGCMemory_t *mem, const char *string, ApeSize_t len);
ApeObject_t object_make_string(ApeGCMemory_t *mem, const char *string);
ApeObject_t object_make_stringcapacity(ApeGCMemory_t *mem, ApeSize_t capacity);
const char *object_string_getdata(ApeObject_t object);
char *object_string_getinternalobjdata(ApeObjectData_t *data);
_Bool object_string_reservecapacity(ApeObjectData_t *data, ApeSize_t capacity);
ApeSize_t object_string_getlength(ApeObject_t object);
void object_string_setlength(ApeObject_t object, ApeSize_t len);
char *object_string_getmutable(ApeObject_t object);
_Bool object_string_append(ApeObject_t obj, const char *src, ApeSize_t len);
unsigned long object_string_gethash(ApeObject_t obj);
ApeStringBuffer_t *strbuf_make(ApeAllocator_t *alloc);
ApeStringBuffer_t *strbuf_makecapacity(ApeAllocator_t *alloc, ApeSize_t capacity);
void strbuf_destroy(ApeStringBuffer_t *buf);
_Bool strbuf_appendn(ApeStringBuffer_t *buf, const char *str, ApeSize_t str_len);
_Bool strbuf_append(ApeStringBuffer_t *buf, const char *str);
_Bool strbuf_appendf(ApeStringBuffer_t *buf, const char *fmt, ...);
const char *strbuf_getdata(const ApeStringBuffer_t *buf);
ApeSize_t strbuf_getlength(const ApeStringBuffer_t *buf);
char *strbuf_getstringanddestroy(ApeStringBuffer_t *buf);
_Bool strbuf_failed(ApeStringBuffer_t *buf);
_Bool strbuf_grow(ApeStringBuffer_t *buf, ApeSize_t new_capacity);
/* tostring.c */
char *statements_tostring(ApeAllocator_t *alloc, ApePtrArray_t *statements);
void statement_tostring(const ApeStatement_t *stmt, ApeStringBuffer_t *buf);
void expression_tostring(ApeExpression_t *expr, ApeStringBuffer_t *buf);
void codeblock_tostring(const ApeCodeblock_t *stmt, ApeStringBuffer_t *buf);
const char *operator_tostring(ApeOperator_t op);
const char *expressiontype_tostring(ApeExprType_t type);
void code_tostring(ApeUShort_t *code, ApePosition_t *source_positions, size_t code_size, ApeStringBuffer_t *res);
void object_tostring(ApeObject_t obj, ApeStringBuffer_t *buf, _Bool quote_str);
_Bool traceback_tostring(const ApeTraceback_t *traceback, ApeStringBuffer_t *buf);
const char *ape_errortype_tostring(ApeErrorType_t type);
const char *tokentype_tostring(ApeTokenType_t type);
/* ccom.c */
ApeCompiler_t *compiler_make(ApeAllocator_t *alloc, const ApeConfig_t *config, ApeGCMemory_t *mem, ApeErrorList_t *errors, ApePtrArray_t *files, ApeGlobalStore_t *global_store);
void compiler_destroy(ApeCompiler_t *comp);
ApeCompilationResult_t *compiler_compile(ApeCompiler_t *comp, const char *code);
ApeCompilationResult_t *compiler_compile_file(ApeCompiler_t *comp, const char *path);
ApeSymbolTable_t *compiler_get_symbol_table(ApeCompiler_t *comp);
ApeArray_t *compiler_get_constants(const ApeCompiler_t *comp);
_Bool compiler_init(ApeCompiler_t *comp, ApeAllocator_t *alloc, const ApeConfig_t *config, ApeGCMemory_t *mem, ApeErrorList_t *errors, ApePtrArray_t *files, ApeGlobalStore_t *global_store);
void compiler_deinit(ApeCompiler_t *comp);
_Bool compiler_init_shallow_copy(ApeCompiler_t *copy, ApeCompiler_t *src);
/* libfunction.c */
ApeObject_t object_make_function(ApeGCMemory_t *mem, const char *name, ApeCompilationResult_t *comp_res, _Bool owns_data, ApeInt_t num_locals, ApeInt_t num_args, ApeSize_t free_vals_count);
ApeObject_t object_make_native_function_memory(ApeGCMemory_t *mem, const char *name, ApeNativeFunc_t fn, void *data, ApeSize_t data_len);
_Bool function_freevalsallocated(ApeFunction_t *fun);
const char *object_function_getname(ApeObject_t obj);
ApeObject_t object_function_getfreeval(ApeObject_t obj, ApeInt_t ix);
void object_set_function_free_val(ApeObject_t obj, ApeInt_t ix, ApeObject_t val);
/* cclex.c */
void token_init(ApeToken_t *tok, ApeTokenType_t type, const char *literal, int len);
char *token_duplicate_literal(ApeAllocator_t *alloc, const ApeToken_t *tok);
_Bool lexer_init(ApeLexer_t *lex, ApeAllocator_t *alloc, ApeErrorList_t *errs, const char *input, ApeCompiledFile_t *file);
_Bool lexer_failed(ApeLexer_t *lex);
void lexer_continue_template_string(ApeLexer_t *lex);
_Bool lexer_cur_token_is(ApeLexer_t *lex, ApeTokenType_t type);
_Bool lexer_peek_token_is(ApeLexer_t *lex, ApeTokenType_t type);
_Bool lexer_next_token(ApeLexer_t *lex);
_Bool lexer_previous_token(ApeLexer_t *lex);
ApeToken_t lexer_next_token_internal(ApeLexer_t *lex);
_Bool lexer_expect_current(ApeLexer_t *lex, ApeTokenType_t type);
/* libarray.c */
ApeArray_t *array_make_(ApeAllocator_t *alloc, ApeSize_t element_size);
ApeArray_t *array_makecapacity(ApeAllocator_t *alloc, ApeSize_t capacity, ApeSize_t element_size);
void array_destroy(ApeArray_t *arr);
ApeArray_t *array_copy(const ApeArray_t *arr);
_Bool array_add(ApeArray_t *arr, const void *value);
_Bool array_push(ApeArray_t *arr, const void *value);
_Bool array_pop(ApeArray_t *arr, void *out_value);
void *array_top(ApeArray_t *arr);
_Bool array_set(ApeArray_t *arr, ApeSize_t ix, void *value);
void *array_get(ApeArray_t *arr, ApeSize_t ix);
ApeSize_t array_count(const ApeArray_t *arr);
_Bool array_removeat(ApeArray_t *arr, ApeSize_t ix);
void array_clear(ApeArray_t *arr);
void *array_data(ApeArray_t *arr);
void array_orphandata(ApeArray_t *arr);
_Bool array_initcapacity(ApeArray_t *arr, ApeAllocator_t *alloc, ApeSize_t capacity, ApeSize_t element_size);
void array_deinit(ApeArray_t *arr);
ApePtrArray_t *ptrarray_make(ApeAllocator_t *alloc);
ApePtrArray_t *ptrarray_makecapacity(ApeAllocator_t *alloc, ApeSize_t capacity);
void ptrarray_destroy(ApePtrArray_t *arr);
void ptrarray_destroywithitems(ApePtrArray_t *arr, ApeDataCallback_t destroy_fn);
ApePtrArray_t *ptrarray_copywithitems(ApePtrArray_t *arr, ApeDataCallback_t copy_fn, ApeDataCallback_t destroy_fn);
_Bool ptrarray_add(ApePtrArray_t *arr, void *ptr);
void *ptrarray_get(ApePtrArray_t *arr, ApeSize_t ix);
_Bool ptrarray_push(ApePtrArray_t *arr, void *ptr);
void *ptrarray_pop(ApePtrArray_t *arr);
void *ptrarray_top(ApePtrArray_t *arr);
ApeSize_t ptrarray_count(const ApePtrArray_t *arr);
_Bool ptrarray_removeat(ApePtrArray_t *arr, ApeSize_t ix);
void ptrarray_clear(ApePtrArray_t *arr);
void ptrarray_clearanddestroyitems(ApePtrArray_t *arr, ApeDataCallback_t destroy_fn);
ApeObject_t object_make_array(ApeGCMemory_t *mem);
ApeObject_t object_make_arraycapacity(ApeGCMemory_t *mem, unsigned capacity);
ApeObject_t object_array_getvalue(ApeObject_t object, ApeSize_t ix);
_Bool object_array_setat(ApeObject_t object, ApeInt_t ix, ApeObject_t val);
_Bool object_array_pushvalue(ApeObject_t object, ApeObject_t val);
ApeSize_t object_array_getlength(ApeObject_t object);
_Bool object_array_removeat(ApeObject_t object, ApeInt_t ix);
_Bool object_array_pushstring(ApeObject_t obj, const char *string);
ApeArray_t *object_array_getarray(ApeObject_t object);
/* builtins.c */
void builtins_install(ApeVM_t *vm);
ApeSize_t builtins_count(void);
ApeNativeFunc_t builtins_get_fn(ApeSize_t ix);
const char *builtins_get_name(ApeSize_t ix);
ApeNativeFunc_t builtin_get_object(ApeObjectType_t objt, const char *idxname);
