/* cclexer.c */
void ape_lexer_token_init(ApeAstToken_t *tok, ApeAstTokType_t type, const char *literal, int len);
char *ape_lexer_tokendupliteral(ApeContext_t *ctx, const ApeAstToken_t *tok);
bool ape_lexer_init(ApeAstLexer_t *lex, ApeContext_t *ctx, ApeErrorList_t *errs, const char *input, ApeAstCompFile_t *file);
bool ape_lexer_failed(ApeAstLexer_t *lex);
void ape_lexer_continuetemplatestring(ApeAstLexer_t *lex);
bool ape_lexer_currenttokenis(ApeAstLexer_t *lex, ApeAstTokType_t type);
bool ape_lexer_peektokenis(ApeAstLexer_t *lex, ApeAstTokType_t type);
bool ape_lexer_nexttoken(ApeAstLexer_t *lex);
bool ape_lexer_previous_token(ApeAstLexer_t *lex);
ApeAstToken_t ape_lexer_internalnexttoken(ApeAstLexer_t *lex);
bool ape_lexer_expectcurrent(ApeAstLexer_t *lex, ApeAstTokType_t type);
/* mempool.c */
int wrap_munmap(void *addr, size_t length);
void ape_mempool_debugprintv(ApeMemPool_t *mp, const char *fmt, va_list va);
void ape_mempool_debugprintf(ApeMemPool_t *mp, const char *fmt, ...);
void **ape_mempool_newpool(ApeMemPool_t *mp, ApeSize_t sz, ApeSize_t total_sz);
ApeMemPool_t *ape_mempool_initdebughandle(int min2, int max2, FILE *hnd, bool mustclose);
ApeMemPool_t *ape_mempool_init(ApeSize_t min2, ApeSize_t max2);
void ape_mempool_destroy(ApeMemPool_t *mp);
bool ape_mempool_setdebughandle(ApeMemPool_t *mp, FILE *handle, bool mustclose);
bool ape_mempool_setdebugfile(ApeMemPool_t *mp, const char *path);
void *ape_mempool_alloc(ApeMemPool_t *mp, ApeSize_t sz);
void ape_mempool_free(ApeMemPool_t *mp, void *p);
void ape_mempool_repool(ApeMemPool_t *mp, void *p, ApeSize_t sz);
void *ape_mempool_realloc(ApeMemPool_t *mp, void *p, ApeSize_t old_sz, ApeSize_t new_sz);
/* libobject.c */
ApeObject_t ape_object_make_number(ApeContext_t *ctx, ApeFloat_t val);
ApeObject_t ape_object_make_bool(ApeContext_t *ctx, bool val);
ApeObject_t ape_object_make_null(ApeContext_t *ctx);
ApeObject_t ape_object_make_string(ApeContext_t *ctx, const char *string);
ApeObject_t ape_object_make_stringlen(ApeContext_t *ctx, const char *string, ApeSize_t len);
ApeObject_t ape_object_make_stringcapacity(ApeContext_t *ctx, ApeSize_t capacity);
ApeObject_t ape_object_make_array(ApeContext_t *ctx);
ApeObject_t ape_object_make_arraycapacity(ApeContext_t *ctx, unsigned capacity);
ApeObject_t ape_object_make_map(ApeContext_t *ctx);
ApeObject_t ape_object_make_mapcapacity(ApeContext_t *ctx, unsigned capacity);
ApeObject_t ape_object_make_function(ApeContext_t *ctx, const char *name, ApeAstCompResult_t *cres, bool wdata, ApeInt_t nloc, ApeInt_t nargs, ApeSize_t fvcount);
ApeObject_t ape_object_make_nativefuncmemory(ApeContext_t *ctx, const char *name, ApeNativeFuncPtr_t fn, void *data, ApeSize_t dlen);
ApeObject_t ape_object_make_external(ApeContext_t *ctx, void *ptr);
bool ape_object_value_ishashable(ApeObject_t obj);
void ape_tostring_quotechar(ApeWriter_t *buf, int ch);
void ape_tostring_quotestring(ApeWriter_t *buf, const char *str, ApeSize_t len, bool withquotes);
void ape_tostring_object(ApeWriter_t *buf, ApeObject_t obj, bool quote_str);
const char *ape_object_value_typename(const ApeObjType_t type);
void ape_object_data_deinit(ApeContext_t *ctx, ApeGCObjData_t *data);
char *ape_object_value_typeunionname(ApeContext_t *ctx, const ApeObjType_t type);
char *ape_object_value_serialize(ApeContext_t *ctx, ApeObject_t object, ApeSize_t *lendest);
bool ape_object_extern_setdestroyfunc(ApeObject_t object, ApeDataCallback_t destroy_fn);
bool ape_object_extern_setdata(ApeObject_t object, void *ext_data);
bool ape_object_extern_setcopyfunc(ApeObject_t object, ApeDataCallback_t copy_fn);
ApeObject_t ape_object_getkvpairat(ApeContext_t *ctx, ApeObject_t object, int ix);
ApeObject_t ape_object_value_internalcopydeep(ApeContext_t *ctx, ApeObject_t obj, ApeValDict_t *copies);
ApeObject_t ape_object_value_copydeep(ApeContext_t *ctx, ApeObject_t obj);
ApeObject_t ape_object_value_copyflat(ApeContext_t *ctx, ApeObject_t obj);
bool ape_object_value_wrapequals(const ApeObject_t *a_ptr, const ApeObject_t *b_ptr);
unsigned long ape_object_value_hash(ApeObject_t *obj_ptr);
ApeFloat_t ape_object_value_asnumerica(ApeObject_t obj, ApeObjType_t t);
ApeFloat_t ape_object_value_asnumeric(ApeObject_t obj);
ApeFloat_t ape_object_value_compare(ApeObject_t a, ApeObject_t b, bool *out_ok);
bool ape_object_value_equals(ApeObject_t a, ApeObject_t b);
/* context.c */
ApeContext_t *ape_make_context(void);
ApeContext_t *ape_make_contextex(ApeMemAllocFunc_t malloc_fn, ApeMemFreeFunc_t free_fn, void *optr);
void ape_context_destroy(ApeContext_t *ctx);
void ape_context_deinit(ApeContext_t *ctx);
void ape_context_freeallocated(ApeContext_t *ctx, void *ptr);
void ape_context_debugvalue(ApeContext_t *ctx, const char *name, ApeObject_t val);
bool ape_context_settimeout(ApeContext_t *ctx, ApeFloat_t max_execution_time_ms);
void ape_context_setstdoutwrite(ApeContext_t *ctx, ApeIOStdoutWriteFunc_t stdout_write, void *context);
void ape_context_setfilewrite(ApeContext_t *ctx, ApeIOWriteFunc_t file_write, void *context);
void ape_context_setfileread(ApeContext_t *ctx, ApeIOReadFunc_t file_read, void *context);
void ape_context_dumpast(ApeContext_t *ctx, ApePtrArray_t *statements);
void ape_context_dumpbytecode(ApeContext_t *ctx, ApeAstCompResult_t *cres);
ApeObject_t ape_context_executesource(ApeContext_t *ctx, const char *code, bool alsoreset);
ApeObject_t ape_context_executefile(ApeContext_t *ctx, const char *path);
bool ape_context_haserrors(ApeContext_t *ctx);
ApeSize_t ape_context_errorcount(ApeContext_t *ctx);
void ape_context_clearerrors(ApeContext_t *ctx);
ApeError_t *ape_context_geterror(ApeContext_t *ctx, int index);
bool ape_context_setglobal(ApeContext_t *ctx, const char *name, ApeObject_t obj);
char *ape_context_errortostring(ApeContext_t *ctx, ApeError_t *err);
ApeObject_t ape_context_makenamednative(ApeContext_t *ctx, const char *name, ApeWrappedNativeFunc_t fn, void *data);
bool ape_context_setnativefunction(ApeContext_t *ctx, const char *name, ApeWrappedNativeFunc_t fn, void *data);
void ape_context_resetstate(ApeContext_t *ctx);
void ape_context_setdefaultconfig(ApeContext_t *ctx);
/* libpseudo.c */
ApePseudoClass_t *ape_make_pseudoclass(ApeContext_t *ctx, ApeStrDict_t *dictref, const char *classname);
void *ape_pseudoclass_destroy(ApeContext_t *ctx, ApePseudoClass_t *psc);
bool ape_pseudoclass_setmethod(ApePseudoClass_t *psc, const char *name, ApeObjMemberItem_t *itm);
ApeObjMemberItem_t *ape_pseudoclass_getmethodbyhash(ApePseudoClass_t *psc, const char *name, unsigned long hash);
ApeObjMemberItem_t *ape_pseudoclass_getmethodbyname(ApePseudoClass_t *psc, const char *name);
ApePseudoClass_t *ape_context_make_pseudoclass(ApeContext_t *ctx, ApeStrDict_t *dictref, ApeObjType_t typ, const char *classname);
ApePseudoClass_t *ape_context_findpseudoclassbytype(ApeContext_t *ctx, ApeObjType_t typ);
ApeObjMemberItem_t *ape_builtin_find_objectfunc(ApeContext_t *ctx, ApeStrDict_t *dict, const char *idxname, unsigned long idxhash);
ApeObjMemberItem_t *builtin_get_object(ApeContext_t *ctx, ApeObjType_t objt, const char *idxname, unsigned long idxhash);
/* vm.c */
ApeOpcodeDef_t *ape_vm_opcodefind(ApeOpByte_t op);
const char *ape_vm_opcodename(ApeOpByte_t op);
void ape_vm_adderrorv(ApeVM_t *vm, ApeErrorType_t etype, const char *fmt, va_list va);
void ape_vm_adderror(ApeVM_t *vm, ApeErrorType_t etype, const char *fmt, ...);
ApeGlobalStore_t *ape_make_globalstore(ApeContext_t *ctx, ApeGCMemory_t *mem);
void ape_globalstore_destroy(ApeGlobalStore_t *store);
ApeSymbol_t *ape_globalstore_getsymbol(ApeGlobalStore_t *store, const char *name);
bool ape_globalstore_set(ApeGlobalStore_t *store, const char *name, ApeObject_t object);
ApeObject_t ape_globalstore_getat(ApeGlobalStore_t *store, int ix, bool *out_ok);
ApeObject_t *ape_globalstore_getobjectdata(ApeGlobalStore_t *store);
ApeSize_t ape_globalstore_getobjectcount(ApeGlobalStore_t *store);
int ape_make_code(ApeOpByte_t op, ApeSize_t operands_count, ApeOpByte_t *operands, ApeValArray_t *res);
ApeOpcodeValue_t ape_frame_readopcode(ApeFrame_t *frame);
ApeOpByte_t ape_frame_readuint64(ApeFrame_t *frame);
uint16_t ape_frame_readuint16(ApeFrame_t *frame);
ApeUShort_t ape_frame_readuint8(ApeFrame_t *frame);
ApePosition_t ape_frame_srcposition(const ApeFrame_t *frame);
ApeObject_t ape_vm_getlastpopped(ApeVM_t *vm);
bool ape_vm_haserrors(ApeVM_t *vm);
bool ape_vm_setglobal(ApeVM_t *vm, ApeSize_t ix, ApeObject_t val);
ApeObject_t ape_vm_getglobal(ApeVM_t *vm, ApeSize_t ix);
void ape_vm_setstackpointer(ApeVM_t *vm, int new_sp);
void ape_vm_pushstack(ApeVM_t *vm, ApeObject_t obj);
ApeObject_t ape_vm_popstack(ApeVM_t *vm);
ApeObject_t ape_vm_getstack(ApeVM_t *vm, int nth_item);
void ape_vm_pushthisstack(ApeVM_t *vm, ApeObject_t obj);
ApeObject_t ape_vm_popthisstack(ApeVM_t *vm);
ApeObject_t ape_vm_getthisstack(ApeVM_t *vm, int nth_item);
void ape_vm_dumpstack(ApeVM_t *vm);
ApeObject_t ape_vm_callnativefunction(ApeVM_t *vm, ApeObject_t callee, ApePosition_t src_pos, int argc, ApeObject_t *args);
bool ape_vm_callobjectargs(ApeVM_t *vm, ApeObject_t callee, ApeInt_t nargs, ApeObject_t *args);
bool ape_vm_callobjectstack(ApeVM_t *vm, ApeObject_t callee, ApeInt_t nargs);
bool ape_vm_checkassign(ApeVM_t *vm, ApeObject_t oldval, ApeObject_t newval);
bool ape_vm_tryoverloadoperator(ApeVM_t *vm, ApeObject_t left, ApeObject_t right, ApeOpByte_t op, bool *out_overload_found);
ApeVM_t *ape_make_vm(ApeContext_t *ctx, const ApeConfig_t *config, ApeGCMemory_t *mem, ApeErrorList_t *errors, ApeGlobalStore_t *global_store);
void ape_vm_destroy(ApeVM_t *vm);
void ape_vm_reset(ApeVM_t *vm);
bool ape_frame_init(ApeFrame_t *frame, ApeObject_t function_obj, int bptr);
ApeFrame_t *ape_frame_update(ApeVM_t *vm, ApeFrame_t *rt, ApeFrame_t *from);
ApeFrame_t *ape_frame_copyalloc(ApeVM_t *vm, ApeFrame_t *from);
bool ape_vm_pushframe(ApeVM_t *vm, ApeFrame_t frame);
bool ape_vm_popframe(ApeVM_t *vm);
void ape_vm_collectgarbage(ApeVM_t *vm, ApeValArray_t *constants, bool alsostack);
bool ape_vm_run(ApeVM_t *vm, ApeAstCompResult_t *comp_res, ApeValArray_t *constants);
ApeObject_t ape_object_string_copy(ApeContext_t *ctx, ApeObject_t obj);
bool ape_vm_appendstring(ApeVM_t *vm, ApeObject_t left, ApeObject_t right, ApeObjType_t lefttype, ApeObjType_t righttype);
bool ape_vm_getindex(ApeVM_t *vm, ApeObject_t left, ApeObject_t index, ApeObjType_t lefttype, ApeObjType_t indextype);
bool ape_vm_math(ApeVM_t *vm, ApeObject_t left, ApeObject_t right, ApeOpcodeValue_t opcode);
bool ape_vm_executefunction(ApeVM_t *vm, ApeObject_t function, ApeValArray_t *constants);
/* ccparse.c */
ApeAstParser_t *ape_ast_make_parser(ApeContext_t *ctx, const ApeConfig_t *config, ApeErrorList_t *errors);
void ape_parser_destroy(ApeAstParser_t *parser);
ApePtrArray_t *ape_parser_parseall(ApeAstParser_t *parser, const char *input, ApeAstCompFile_t *file);
ApeAstIdentExpr_t *ape_ast_make_ident(ApeContext_t *ctx, ApeAstToken_t tok);
ApeAstExpression_t *ape_ast_make_expression(ApeContext_t *ctx, ApeAstExprType_t type);
ApeAstExpression_t *ape_ast_make_identexpr(ApeContext_t *ctx, ApeAstIdentExpr_t *ident);
ApeAstExpression_t *ape_ast_make_literalnumberexpr(ApeContext_t *ctx, ApeFloat_t val);
ApeAstExpression_t *ape_ast_make_literalboolexpr(ApeContext_t *ctx, bool val);
ApeAstExpression_t *ape_ast_make_literalstringexpr(ApeContext_t *ctx, char *value, ApeSize_t len, bool wasallocd);
ApeAstExpression_t *ape_ast_make_literalnullexpr(ApeContext_t *ctx);
ApeAstExpression_t *ape_ast_make_literalarrayexpr(ApeContext_t *ctx, ApePtrArray_t *values);
ApeAstExpression_t *ape_ast_make_literalmapexpr(ApeContext_t *ctx, ApePtrArray_t *keys, ApePtrArray_t *values);
ApeAstExpression_t *ape_ast_make_prefixexpr(ApeContext_t *ctx, ApeOperator_t op, ApeAstExpression_t *right);
ApeAstExpression_t *ape_ast_make_infixexpr(ApeContext_t *ctx, ApeOperator_t op, ApeAstExpression_t *left, ApeAstExpression_t *right);
ApeAstExpression_t *ape_ast_make_literalfuncexpr(ApeContext_t *ctx, ApePtrArray_t *params, ApeAstBlockExpr_t *body);
ApeAstExpression_t *ape_ast_make_callexpr(ApeContext_t *ctx, ApeAstExpression_t *function, ApePtrArray_t *args);
ApeAstExpression_t *ape_ast_make_indexexpr(ApeContext_t *ctx, ApeAstExpression_t *left, ApeAstExpression_t *index);
ApeAstExpression_t *ape_ast_make_assignexpr(ApeContext_t *ctx, ApeAstExpression_t *dest, ApeAstExpression_t *source, bool ispostfix);
ApeAstExpression_t *ape_ast_make_logicalexpr(ApeContext_t *ctx, ApeOperator_t op, ApeAstExpression_t *left, ApeAstExpression_t *right);
ApeAstExpression_t *ape_ast_make_ternaryexpr(ApeContext_t *ctx, ApeAstExpression_t *test, ApeAstExpression_t *iftrue, ApeAstExpression_t *iffalse);
ApeAstExpression_t *ape_ast_make_definestmt(ApeContext_t *ctx, ApeAstIdentExpr_t *name, ApeAstExpression_t *value, bool assignable);
ApeAstExpression_t *ape_ast_make_ifstmt(ApeContext_t *ctx, ApePtrArray_t *cases, ApeAstBlockExpr_t *alternative);
ApeAstExpression_t *ape_ast_make_returnstmt(ApeContext_t *ctx, ApeAstExpression_t *value);
ApeAstExpression_t *ape_ast_make_expressionstmt(ApeContext_t *ctx, ApeAstExpression_t *value);
ApeAstExpression_t *ape_ast_make_whilestmt(ApeContext_t *ctx, ApeAstExpression_t *test, ApeAstBlockExpr_t *body);
ApeAstExpression_t *ape_ast_make_breakstmt(ApeContext_t *ctx);
ApeAstExpression_t *ape_ast_make_foreachstmt(ApeContext_t *ctx, ApeAstIdentExpr_t *iterator, ApeAstExpression_t *source, ApeAstBlockExpr_t *body);
ApeAstExpression_t *ape_ast_make_forstmt(ApeContext_t *ctx, ApeAstExpression_t *init, ApeAstExpression_t *test, ApeAstExpression_t *update, ApeAstBlockExpr_t *body);
ApeAstExpression_t *ape_ast_make_continuestmt(ApeContext_t *ctx);
ApeAstExpression_t *ape_ast_make_blockstmt(ApeContext_t *ctx, ApeAstBlockExpr_t *block);
ApeAstExpression_t *ape_ast_make_includestmt(ApeContext_t *ctx, char *path);
ApeAstExpression_t *ape_ast_make_recoverstmt(ApeContext_t *ctx, ApeAstIdentExpr_t *errorident, ApeAstBlockExpr_t *body);
ApeAstBlockExpr_t *ape_ast_make_codeblock(ApeContext_t *ctx, ApePtrArray_t *statements);
ApeAstIdentExpr_t *ape_ast_copy_ident(ApeContext_t *ctx, ApeAstIdentExpr_t *ident);
ApeAstBlockExpr_t *ape_ast_copy_codeblock(ApeContext_t *ctx, ApeAstBlockExpr_t *block);
ApeAstIfCaseExpr_t *ape_ast_copy_ifcase(ApeContext_t *ctx, ApeAstIfCaseExpr_t *ifcase);
ApeAstExpression_t *ape_ast_copy_expr(ApeContext_t *ctx, ApeAstExpression_t *expr);
ApeAstIfCaseExpr_t *ape_ast_make_ifcase(ApeContext_t *ctx, ApeAstExpression_t *test, ApeAstBlockExpr_t *consequence);
void *ape_ast_destroy_ifcase(ApeContext_t *ctx, ApeAstIfCaseExpr_t *cond);
void *ape_ast_destroy_expr(ApeContext_t *ctx, ApeAstExpression_t *expr);
void *ape_ast_destroy_codeblock(ApeAstBlockExpr_t *block);
void *ape_ast_destroy_ident(ApeContext_t *ctx, ApeAstIdentExpr_t *ident);
ApeAstExpression_t *ape_parser_parsestmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parsedefinestmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseifstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parsereturnstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseexprstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parsewhileloopstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parsebreakstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parsecontinuestmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseblockstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseincludestmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parserecoverstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseforloopstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseforeachstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseclassicforstmt(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parsefuncstmt(ApeAstParser_t *p);
ApeAstBlockExpr_t *ape_parser_parsecodeblock(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseexpr(ApeAstParser_t *p, ApeAstPrecedence_t prec);
ApeAstExpression_t *ape_parser_parseident(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralnumber(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralbool(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralstring(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteraltplstring(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralnull(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralarray(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralmap(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseprefixexpr(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseinfixexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstExpression_t *ape_parser_parsegroupedexpr(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseliteralfunc(ApeAstParser_t *p);
bool ape_parser_parsefuncparams(ApeAstParser_t *p, ApePtrArray_t *outparams);
ApeAstExpression_t *ape_parser_parsecallexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApePtrArray_t *ape_parser_parseexprlist(ApeAstParser_t *p, ApeAstTokType_t starttoken, ApeAstTokType_t endtoken, bool trailingcommaallowed);
ApeAstExpression_t *ape_parser_parseindexexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstExpression_t *ape_parser_parseassignexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstExpression_t *ape_parser_parselogicalexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstExpression_t *ape_parser_parseternaryexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstExpression_t *ape_parser_parseincdecprefixexpr(ApeAstParser_t *p);
ApeAstExpression_t *ape_parser_parseincdecpostfixexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstExpression_t *ape_parser_parsedotexpr(ApeAstParser_t *p, ApeAstExpression_t *left);
ApeAstPrecedence_t ape_parser_getprecedence(ApeAstTokType_t tk);
ApeOperator_t ape_parser_tokentooperator(ApeAstTokType_t tk);
char ape_parser_escapechar(const char c);
char *ape_ast_processandcopystring(ApeAllocator_t *alloc, const char *input, size_t len, ApeSize_t *destlen);
ApeAstExpression_t *ape_ast_wrapexprinfunccall(ApeContext_t *ctx, ApeAstExpression_t *expr, const char *functionname);
/* ccoptimize.c */
ApeAstExpression_t *ape_optimizer_optexpr(ApeAstExpression_t *expr);
ApeAstExpression_t *ape_optimizer_optinfixexpr(ApeAstExpression_t *expr);
ApeAstExpression_t *ape_optimizer_optprefixexpr(ApeAstExpression_t *expr);
/* libio.c */
void ape_builtins_install_io(ApeVM_t *vm);
/* ccutils.c */
ApeAstCompFile_t *ape_make_compfile(ApeContext_t *ctx, const char *path);
void *ape_compfile_destroy(ApeContext_t *ctx, ApeAstCompFile_t *file);
ApeAstCompScope_t *ape_make_compscope(ApeContext_t *ctx, ApeAstCompScope_t *outer);
void ape_compscope_destroy(ApeAstCompScope_t *scope);
ApeAstCompResult_t *ape_compscope_orphanresult(ApeAstCompScope_t *scope);
ApeAstCompResult_t *ape_make_compresult(ApeContext_t *ctx, ApeUShort_t *bytecode, ApePosition_t *src_positions, int count);
void ape_compresult_destroy(ApeAstCompResult_t *res);
ApeAstBlockScope_t *ape_make_blockscope(ApeContext_t *ctx, int offset);
void *ape_blockscope_destroy(ApeContext_t *ctx, ApeAstBlockScope_t *scope);
ApeAstBlockScope_t *ape_blockscope_copy(ApeContext_t *ctx, ApeAstBlockScope_t *scope);
/* error.c */
ApeTraceback_t *ape_make_traceback(ApeContext_t *ctx);
void ape_traceback_destroy(ApeTraceback_t *traceback);
bool ape_traceback_append(ApeTraceback_t *traceback, const char *function_name, ApePosition_t pos);
bool ape_traceback_appendfromvm(ApeTraceback_t *traceback, ApeVM_t *vm);
const char *ape_traceback_itemgetfilepath(ApeTracebackItem_t *item);
bool ape_tostring_traceback(ApeWriter_t *buf, ApeTraceback_t *traceback);
const char *ape_tostring_errortype(ApeErrorType_t type);
ApeErrorType_t ape_error_gettype(ApeError_t *error);
const char *ape_error_gettypestring(ApeError_t *error);
ApeObject_t ape_object_make_error(ApeContext_t *ctx, const char *error);
ApeObject_t ape_object_make_error_nocopy(ApeContext_t *ctx, char *error);
void ape_errorlist_initerrors(ApeErrorList_t *errors);
void ape_errorlist_destroy(ApeErrorList_t *errors);
void ape_errorlist_add(ApeErrorList_t *errors, ApeErrorType_t type, ApePosition_t pos, const char *message);
void ape_errorlist_addformat(ApeErrorList_t *errors, ApeErrorType_t type, ApePosition_t pos, const char *format, ...);
void ape_errorlist_addformatv(ApeErrorList_t *errors, ApeErrorType_t type, ApePosition_t pos, const char *format, va_list va);
void ape_errorlist_clear(ApeErrorList_t *errors);
ApeSize_t ape_errorlist_count(ApeErrorList_t *errors);
ApeError_t *ape_errorlist_getat(ApeErrorList_t *errors, ApeInt_t ix);
ApeError_t *ape_errorlist_lasterror(ApeErrorList_t *errors);
bool ape_errorlist_haserrors(ApeErrorList_t *errors);
const char *ape_error_getmessage(ApeError_t *error);
const char *ape_error_getfile(ApeError_t *error);
const char *ape_error_getsource(ApeError_t *error);
int ape_error_getline(ApeError_t *error);
int ape_error_getcolumn(ApeError_t *error);
ApeTraceback_t *ape_error_gettraceback(ApeError_t *error);
const char *ape_object_value_geterrormessage(ApeObject_t object);
void ape_object_value_seterrortraceback(ApeObject_t object, ApeTraceback_t *traceback);
ApeTraceback_t *ape_object_value_geterrortraceback(ApeObject_t object);
/* tostring.c */
const char *ape_tostring_operator(ApeOperator_t op);
const char *ape_tostring_exprtype(ApeAstExprType_t type);
bool ape_tostring_exprlist(ApeWriter_t *buf, ApePtrArray_t *statements);
bool ape_tostring_expression(ApeWriter_t *buf, ApeAstExpression_t *expr);
bool ape_tostring_codeblock(ApeWriter_t *buf, ApeAstBlockExpr_t *stmt);
bool ape_tostring_compresult(ApeWriter_t *buf, ApeAstCompResult_t *res, bool sparse);
bool ape_tostring_bytecode(ApeWriter_t *buf, ApeUShort_t *code, ApePosition_t *source_positions, size_t code_size, bool sparse);
const char *ape_tostring_tokentype(ApeAstTokType_t type);
/* ccsymtab.c */
ApeSymbol_t *ape_make_symbol(ApeContext_t *ctx, const char *name, ApeSymbolType_t type, ApeSize_t index, bool assignable);
void *ape_symbol_destroy(ApeContext_t *ctx, ApeSymbol_t *symbol);
ApeSymbol_t *ape_symbol_copy(ApeContext_t *ctx, ApeSymbol_t *symbol);
ApeSymTable_t *ape_make_symtable(ApeContext_t *ctx, ApeSymTable_t *outer, ApeGlobalStore_t *global_store, int mgo);
void ape_symtable_destroy(ApeSymTable_t *table);
ApeSymTable_t *ape_symtable_copy(ApeContext_t *ctx, ApeSymTable_t *table);
bool ape_symtable_setsymbol(ApeSymTable_t *table, ApeSymbol_t *symbol);
int ape_symtable_nextsymbolindex(ApeSymTable_t *table);
int ape_symtable_count(ApeSymTable_t *table);
bool ape_symtable_addmodulesymbol(ApeSymTable_t *st, ApeSymbol_t *symbol);
ApeSymbol_t *ape_symtable_define(ApeSymTable_t *table, const char *name, bool assignable);
ApeSymbol_t *ape_symtable_deffree(ApeSymTable_t *st, ApeSymbol_t *original);
ApeSymbol_t *ape_symtable_definefuncname(ApeSymTable_t *st, const char *name, bool assignable);
ApeSymbol_t *ape_symtable_definethis(ApeSymTable_t *st);
ApeSymbol_t *ape_symtable_resolve(ApeSymTable_t *table, const char *name);
bool ape_symtable_symbol_is_defined(ApeSymTable_t *table, const char *name);
bool ape_symtable_pushblockscope(ApeSymTable_t *table);
void ape_symtable_popblockscope(ApeSymTable_t *table);
ApeAstBlockScope_t *ape_symtable_getblockscope(ApeSymTable_t *table);
bool ape_symtable_ismoduleglobalscope(ApeSymTable_t *table);
bool ape_symtable_istopblockscope(ApeSymTable_t *table);
bool ape_symtable_istopglobalscope(ApeSymTable_t *table);
ApeSize_t ape_symtable_getmoduleglobalsymbolcount(const ApeSymTable_t *table);
const ApeSymbol_t *ape_symtable_getmoduleglobalsymbolat(const ApeSymTable_t *table, int ix);
/* memgc.c */
void *ds_extmalloc(size_t size, void *userptr);
void *ds_extrealloc(void *ptr, size_t oldsz, size_t newsz, void *userptr);
void ds_extfree(void *ptr, void *userptr);
void poolinit(ApeContext_t *ctx, ApeGCObjPool_t *pool);
void pooldestroy(ApeContext_t *ctx, ApeGCObjPool_t *pool);
void poolput(ApeGCObjPool_t *pool, ApeInt_t idx, ApeGCObjData_t *data);
ApeGCObjData_t *poolget(ApeGCObjPool_t *pool, ApeInt_t idx);
void *ape_mem_defaultmalloc(ApeContext_t *ctx, void *userptr, size_t size);
void ape_mem_defaultfree(ApeContext_t *ctx, void *userptr, void *objptr);
void *wrap_alloc(ApeAllocator_t *alloc, size_t size);
void wrap_free(ApeAllocator_t *alloc, void *ptr);
void *ape_allocator_alloc_real(ApeAllocator_t *alloc, const char *str, const char *func, const char *file, int line, ApeInt_t size);
void ape_allocator_free(ApeAllocator_t *alloc, void *ptr);
void *ape_allocator_realloc(ApeAllocator_t *alloc, void *ptr, size_t oldsz, size_t newsz);
ApeAllocator_t *ape_make_allocator(ApeContext_t *ctx, ApeAllocator_t *dest, ApeMemAllocFunc_t malloc_fn, ApeMemFreeFunc_t free_fn, void *optr);
bool ape_allocator_setdebughandle(ApeAllocator_t *alloc, FILE *hnd, bool mustclose);
bool ape_allocator_setdebugfile(ApeAllocator_t *alloc, const char *path);
void ape_allocator_destroy(ApeAllocator_t *alloc);
ApeGCMemory_t *ape_make_gcmem(ApeContext_t *ctx);
void ape_gcmem_destroy(ApeGCMemory_t *mem);
ApeGCObjData_t *ape_gcmem_allocobjdata(ApeGCMemory_t *mem, ApeObjType_t type);
bool ape_gcmem_canputinpool(ApeGCMemory_t *mem, ApeGCObjData_t *data);
ApeGCObjPool_t *ape_gcmem_getpoolfor(ApeGCMemory_t *mem, ApeObjType_t type);
ApeGCObjData_t *ape_gcmem_getfrompool(ApeGCMemory_t *mem, ApeObjType_t type);
void ape_gcmem_unmarkall(ApeGCMemory_t *mem);
void ape_gcmem_markobjlist(ApeObject_t *objects, ApeSize_t count);
void ape_gcmem_markobject(ApeObject_t obj);
void ape_gcmem_sweep(ApeGCMemory_t *mem);
int ape_gcmem_shouldsweep(ApeGCMemory_t *mem);
/* ccompile.c */
void ape_compiler_setsymtable(ApeAstCompiler_t *comp, ApeSymTable_t *table);
ApeValArray_t *ape_compiler_getconstants(ApeAstCompiler_t *comp);
ApeSymTable_t *ape_compiler_getsymboltable(ApeAstCompiler_t *comp);
ApeSymbol_t *ape_compiler_definesym(ApeAstCompiler_t *comp, ApePosition_t pos, const char *name, bool assignable, bool canshadow);
ApeAstCompiler_t *ape_compiler_make(ApeContext_t *ctx, const ApeConfig_t *cfg, ApeGCMemory_t *mem, ApeErrorList_t *el, ApePtrArray_t *files, ApeGlobalStore_t *gs);
void ape_compiler_destroy(ApeAstCompiler_t *comp);
bool ape_compiler_compilecode(ApeAstCompiler_t *comp, const char *code);
ApeAstCompResult_t *ape_compiler_compilesource(ApeAstCompiler_t *comp, const char *code);
ApeAstCompResult_t *ape_compiler_compilefile(ApeAstCompiler_t *comp, const char *path);
bool ape_compiler_init(ApeAstCompiler_t *comp, ApeContext_t *ctx, const ApeConfig_t *cfg, ApeGCMemory_t *mem, ApeErrorList_t *el, ApePtrArray_t *fl, ApeGlobalStore_t *gs);
void ape_compiler_deinit(ApeAstCompiler_t *comp);
bool ape_compiler_initshallowcopy(ApeAstCompiler_t *copy, ApeAstCompiler_t *src);
ApeInt_t ape_compiler_emit(ApeAstCompiler_t *comp, ApeOpByte_t op, ApeSize_t operandscount, ApeOpByte_t *operands);
ApeAstCompScope_t *ape_compiler_getcompscope(ApeAstCompiler_t *comp);
bool ape_compiler_pushcompscope(ApeAstCompiler_t *comp);
void ape_compiler_popcompscope(ApeAstCompiler_t *comp);
bool ape_compiler_pushsymtable(ApeAstCompiler_t *comp, ApeInt_t globaloffset);
void ape_compiler_popsymtable(ApeAstCompiler_t *comp);
ApeOpByte_t ape_compiler_getlastopcode(ApeAstCompiler_t *comp);
bool ape_compiler_compilestmtlist(ApeAstCompiler_t *comp, ApePtrArray_t *statements);
bool ape_compiler_includemodule(ApeAstCompiler_t *comp, ApeAstExpression_t *includestmt);
bool ape_compiler_compilestatement(ApeAstCompiler_t *comp, ApeAstExpression_t *stmt);
bool ape_compiler_compileexpression(ApeAstCompiler_t *comp, ApeAstExpression_t *expr);
bool ape_compiler_compilecodeblock(ApeAstCompiler_t *comp, ApeAstBlockExpr_t *block);
ApeInt_t ape_compiler_addconstant(ApeAstCompiler_t *comp, ApeObject_t obj);
void ape_compiler_moduint16operand(ApeAstCompiler_t *comp, ApeInt_t ip, ApeOpByte_t operand);
bool ape_compiler_lastopcodeis(ApeAstCompiler_t *comp, ApeOpByte_t op);
bool ape_compiler_readsym(ApeAstCompiler_t *comp, ApeSymbol_t *symbol);
bool ape_compiler_writesym(ApeAstCompiler_t *comp, ApeSymbol_t *symbol, bool define);
bool ape_compiler_pushbreakip(ApeAstCompiler_t *comp, ApeInt_t ip);
void ape_compiler_popbreakip(ApeAstCompiler_t *comp);
ApeInt_t ape_compiler_getbreakip(ApeAstCompiler_t *comp);
bool ape_compiler_pushcontip(ApeAstCompiler_t *comp, ApeInt_t ip);
void ape_compiler_popcontip(ApeAstCompiler_t *comp);
ApeInt_t ape_compiler_getcontip(ApeAstCompiler_t *comp);
ApeInt_t ape_compiler_getip(ApeAstCompiler_t *comp);
ApeValArray_t *ape_compiler_getsrcpositions(ApeAstCompiler_t *comp);
ApeValArray_t *ape_compiler_getbytecode(ApeAstCompiler_t *comp);
ApeAstFileScope_t *ape_compiler_makefilescope(ApeAstCompiler_t *comp, ApeAstCompFile_t *file);
void ape_compiler_destroyfilescope(ApeAstFileScope_t *scope);
bool ape_compiler_pushfilescope(ApeAstCompiler_t *comp, const char *filepath);
void ape_compiler_popfilescope(ApeAstCompiler_t *comp);
void ape_compiler_setcompscope(ApeAstCompiler_t *comp, ApeAstCompScope_t *scope);
/* util.c */
uint64_t pack754(long double f, unsigned bits, unsigned expbits);
long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
ApeFloat_t ape_util_uinttofloat(ApeUInt_t val);
ApeUInt_t ape_util_floattouint(ApeFloat_t val);
char *ape_util_stringfmt(ApeContext_t *ctx, const char *format, ...);
bool ape_util_timersupported(void);
ApeTimer_t ape_util_timerstart(void);
ApeFloat_t ape_util_timergetelapsed(const ApeTimer_t *timer);
char *ape_util_strndup(ApeContext_t *ctx, const char *string, size_t n);
char *ape_util_strdup(ApeContext_t *ctx, const char *string);
unsigned long ape_util_hashstring(const void *ptr, size_t len);
unsigned long ape_util_hashfloat(ApeFloat_t val);
unsigned int ape_util_upperpoweroftwo(unsigned int v);
char *ape_util_default_readfile(void *ptr, const char *filename);
size_t ape_util_default_writefile(void *ctx, const char *path, const char *string, size_t string_size);
size_t ape_util_default_stdoutwrite(void *ctx, const void *data, size_t size);
ApePtrArray_t *ape_util_splitstring(ApeContext_t *ctx, const char *str, const char *delimiter);
char *ape_util_joinarray(ApeContext_t *ctx, ApePtrArray_t *items, const char *with);
char *ape_util_canonicalisepath(ApeContext_t *ctx, const char *path);
bool ape_util_isabspath(const char *path);
bool ape_util_strequal(const char *a, const char *b);
/* libmap.c */
ApeValDict_t *ape_make_valdict(ApeContext_t *ctx, ApeSize_t ksz, ApeSize_t vsz);
ApeValDict_t *ape_make_valdictcapacity(ApeContext_t *ctx, ApeSize_t min_capacity, ApeSize_t ksz, ApeSize_t vsz);
bool ape_valdict_init(ApeContext_t *ctx, ApeValDict_t *dict, ApeSize_t ksz, ApeSize_t vsz, ApeSize_t initial_capacity);
void ape_valdict_deinit(ApeValDict_t *dict);
void ape_valdict_destroy(ApeValDict_t *dict);
void ape_valdict_destroywithitems(ApeContext_t *ctx, ApeValDict_t *dict);
void ape_valdict_sethashfunction(ApeValDict_t *dict, ApeDataHashFunc_t hash_fn);
void ape_valdict_setequalsfunction(ApeValDict_t *dict, ApeDataEqualsFunc_t equals_fn);
bool ape_valdict_set(ApeValDict_t *dict, void *key, void *value);
void *ape_valdict_getbyhash(const ApeValDict_t *dict, const void *key, unsigned long hash);
void *ape_valdict_getbykey(const ApeValDict_t *dict, const void *key);
ApeSize_t ape_valdict_getcellindex(const ApeValDict_t *dict, const void *key, unsigned long hash, bool *out_found);
bool ape_valdict_growandrehash(ApeValDict_t *dict);
bool ape_valdict_setkeyat(ApeValDict_t *dict, ApeSize_t ix, void *key);
bool ape_valdict_keysareequal(const ApeValDict_t *dict, const void *a, const void *b);
unsigned long ape_valdict_hashkey(const ApeValDict_t *dict, const void *key);
void ape_valdict_setcopyfunc(ApeValDict_t *dict, ApeDataCallback_t fn);
void ape_valdict_setdeletefunc(ApeValDict_t *dict, ApeDataCallback_t fn);
ApeValDict_t *ape_valdict_copywithitems(ApeContext_t *ctx, ApeValDict_t *dict);
ApeStrDict_t *ape_make_strdict(ApeContext_t *ctx, ApeDataCallback_t copy_fn, ApeDataCallback_t destroy_fn);
bool ape_strdict_init(ApeStrDict_t *dict, ApeContext_t *ctx, ApeSize_t initial_capacity, ApeDataCallback_t copy_fn, ApeDataCallback_t destroy_fn);
void ape_strdict_deinit(ApeStrDict_t *dict, bool free_keys);
void ape_strdict_destroy(ApeStrDict_t *dict);
void ape_strdict_destroywithitems(ApeContext_t *ctx, ApeStrDict_t *dict);
ApeStrDict_t *ape_strdict_copywithitems(ApeContext_t *ctx, ApeStrDict_t *dict);
bool ape_strdict_set(ApeStrDict_t *dict, const char *key, void *value);
ApeSize_t ape_strdict_getcellindex(const ApeStrDict_t *dict, const char *key, unsigned long keyhash, bool *out_found);
void *ape_strdict_getbyhash(const ApeStrDict_t *dict, const char *key, unsigned long hash);
void *ape_strdict_getbyname(const ApeStrDict_t *dict, const char *key);
void *ape_strdict_getvalueat(const ApeStrDict_t *dict, ApeSize_t ix);
const char *ape_strdict_getkeyat(const ApeStrDict_t *dict, ApeSize_t ix);
ApeSize_t ape_strdict_count(const ApeStrDict_t *dict);
bool ape_strdict_growandrehash(ApeStrDict_t *dict);
bool ape_strdict_setinternal(ApeStrDict_t *dict, const char *ckey, char *mkey, void *value);
ApeSize_t ape_object_map_getlength(ApeObject_t object);
ApeObject_t ape_object_map_getkeyat(ApeObject_t object, ApeSize_t ix);
ApeObject_t ape_object_map_getvalueat(ApeObject_t object, ApeSize_t ix);
bool ape_object_map_setvalue(ApeObject_t object, ApeObject_t key, ApeObject_t val);
ApeObject_t ape_object_map_getvalueobject(ApeObject_t object, ApeObject_t key);
bool ape_object_map_setnamedvalue(ApeContext_t *ctx, ApeObject_t obj, const char *key, ApeObject_t value);
bool ape_object_map_setnamedstring(ApeContext_t *ctx, ApeObject_t obj, const char *key, const char *string);
bool ape_object_map_setnamednumber(ApeContext_t *ctx, ApeObject_t obj, const char *key, ApeFloat_t number);
bool ape_object_map_setnamedbool(ApeContext_t *ctx, ApeObject_t obj, const char *key, bool value);
/* main.c */
void print_types(void);
bool casecmplen(const char *s1, size_t l1, const char *s2, size_t l2);
bool casecmp(const char *s1, const char *s2);
bool icontains(const char **strlist, const char *findme);
int main(int argc, char *argv[]);
/* libstring.c */
char *ape_object_string_getinternalobjdata(ApeGCObjData_t *data);
const char *ape_object_string_getdata(ApeObject_t object);
char *ape_object_string_getmutable(ApeObject_t object);
bool ape_object_string_reservecapacity(ApeContext_t *ctx, ApeGCObjData_t *data, ApeSize_t capacity);
ApeSize_t ape_object_string_getlength(ApeObject_t object);
void ape_object_string_setlength(ApeObject_t object, ApeSize_t len);
bool ape_object_string_append(ApeContext_t *ctx, ApeObject_t obj, const char *src, ApeSize_t len);
unsigned long ape_object_string_gethash(ApeObject_t obj);
ApeObject_t ape_builtins_stringformat(ApeContext_t *ctx, const char *fmt, ApeSize_t fmtlen, ApeSize_t argc, ApeObject_t *args);
void ape_builtins_install_string(ApeVM_t *vm);
/* libarray.c */
ApeValArray_t *ape_make_valarray(ApeContext_t *ctx, ApeSize_t elsz);
ApeValArray_t *ape_make_valarraycapacity(ApeContext_t *ctx, ApeSize_t capacity, ApeSize_t elsz);
bool ape_valarray_initcapacity(ApeValArray_t *arr, ApeContext_t *ctx, ApeSize_t capacity);
void ape_valarray_deinit(ApeValArray_t *arr);
void ape_valarray_destroy(ApeValArray_t *arr);
ApeSize_t ape_valarray_count(ApeValArray_t *arr);
ApeSize_t ape_valarray_capacity(ApeValArray_t *arr);
ApeSize_t ape_valarray_size(ApeValArray_t *arr);
bool ape_valarray_canappend(ApeValArray_t *arr);
bool ape_valarray_push(ApeValArray_t *arr, void *value);
void *ape_valarray_get(ApeValArray_t *arr, ApeSize_t ix);
bool ape_valarray_set(ApeValArray_t *arr, ApeSize_t ix, void *value);
void *ape_valarray_pop(ApeValArray_t *arr);
bool ape_valarray_popinto(ApeValArray_t *arr, void *out_value);
void *ape_valarray_top(ApeValArray_t *arr);
ApeValArray_t *ape_valarray_copy(ApeContext_t *ctx, ApeValArray_t *arr);
bool ape_valarray_removeat(ApeValArray_t *arr, ApeSize_t ix);
void ape_valarray_clear(ApeValArray_t *arr);
void *ape_valarray_data(ApeValArray_t *arr);
void ape_valarray_orphandata(ApeValArray_t *arr);
ApePtrArray_t *ape_make_ptrarray(ApeContext_t *ctx);
ApePtrArray_t *ape_make_ptrarraycapacity(ApeContext_t *ctx, ApeSize_t capacity);
void ape_ptrarray_destroy(ApePtrArray_t *arr);
void ape_ptrarray_destroywithitems(ApeContext_t *ctx, ApePtrArray_t *arr, ApeDataCallback_t destroyfn);
void ape_ptrarray_clearanddestroyitems(ApeContext_t *ctx, ApePtrArray_t *arr, ApeDataCallback_t destroyfn);
ApePtrArray_t *ape_ptrarray_copywithitems(ApeContext_t *ctx, ApePtrArray_t *arr, ApeDataCallback_t copyfn, ApeDataCallback_t destroyfn);
ApeSize_t ape_ptrarray_count(ApePtrArray_t *arr);
void *ape_ptrarray_pop(ApePtrArray_t *arr);
void *ape_ptrarray_top(ApePtrArray_t *arr);
bool ape_ptrarray_push(ApePtrArray_t *arr, void *ptr);
void *ape_ptrarray_get(ApePtrArray_t *arr, ApeSize_t ix);
bool ape_ptrarray_removeat(ApePtrArray_t *arr, ApeSize_t ix);
void ape_ptrarray_clear(ApePtrArray_t *arr);
ApeObject_t ape_object_array_getvalue(ApeObject_t object, ApeSize_t ix);
bool ape_object_array_setat(ApeObject_t object, ApeInt_t ix, ApeObject_t val);
bool ape_object_array_pushvalue(ApeObject_t object, ApeObject_t val);
bool ape_object_array_popvalue(ApeObject_t object, ApeObject_t *dest);
ApeSize_t ape_object_array_getlength(ApeObject_t object);
bool ape_object_array_removeat(ApeObject_t object, ApeInt_t ix);
bool ape_object_array_pushstring(ApeContext_t *ctx, ApeObject_t obj, const char *string);
ApeValArray_t *ape_object_array_getarray(ApeObject_t object);
void ape_builtins_install_array(ApeVM_t *vm);
/* libmod.c */
ApeModule_t *ape_make_module(ApeContext_t *ctx, const char *name);
void *ape_module_destroy(ApeContext_t *ctx, ApeModule_t *module);
ApeModule_t *ape_module_copy(ApeContext_t *ctx, ApeModule_t *src);
const char *ape_module_getname(const char *path);
bool ape_module_addsymbol(ApeModule_t *module, const ApeSymbol_t *symbol);
/* libmath.c */
void ape_builtins_install_math(ApeVM_t *vm);
/* libfunction.c */
const char *ape_object_function_getname(ApeObject_t obj);
ApeObject_t ape_object_function_getfreeval(ApeObject_t obj, ApeInt_t ix);
void ape_object_function_setfreeval(ApeObject_t obj, ApeInt_t ix, ApeObject_t val);
/* builtins.c */
void ape_builtins_setup_namespace(ApeVM_t *vm, const char *nsname, ApeNativeItem_t *fnarray);
void ape_builtins_install_vm(ApeVM_t *vm);
void ape_builtins_install_object(ApeVM_t *vm);
void ape_builtins_install(ApeVM_t *vm);
ApeSize_t ape_builtins_count(void);
ApeNativeFuncPtr_t ape_builtins_getfunc(ApeSize_t ix);
const char *ape_builtins_getname(ApeSize_t ix);
/* writer.c */
ApeWriter_t *ape_make_writer(ApeContext_t *ctx);
ApeWriter_t *ape_make_writerdefault(ApeContext_t *ctx);
ApeWriter_t *ape_make_writercapacity(ApeContext_t *ctx, ApeSize_t capacity);
ApeWriter_t *ape_make_writerio(ApeContext_t *ctx, FILE *hnd, bool alsoclose, bool alsoflush);
void ape_writer_destroy(ApeWriter_t *buf);
bool ape_writer_appendlen(ApeWriter_t *buf, const char *str, ApeSize_t str_len);
bool ape_writer_append(ApeWriter_t *buf, const char *str);
bool ape_writer_appendf(ApeWriter_t *buf, const char *fmt, ...);
const char *ape_writer_getdata(const ApeWriter_t *buf);
const char *ape_writer_getstring(const ApeWriter_t *buf);
ApeSize_t ape_writer_getlength(const ApeWriter_t *buf);
char *ape_writer_getstringanddestroy(ApeWriter_t *buf);
bool ape_writer_failed(ApeWriter_t *buf);
bool ape_writer_grow(ApeWriter_t *buf, ApeSize_t new_capacity);
