"do not edit this file directly, edit testinput.inc!";
var _check_result = 0;
const trailing_comma_array = [
    1,
    2,
    3,
]
println("Object.length(trailing_comma_array)=", Object.length(trailing_comma_array));
_check_result = (Object.length(trailing_comma_array) == 3); println(`checking (${"Object.length(trailing_comma_array)"} ${"=="} ${3}) = ${_check_result}`); assert(_check_result);
const trailing_comma_dict = {
    a: 1,
    b: 2,
    c: 3,
}
_check_result = (Object.length(trailing_comma_dict) == 3); println(`checking (${"Object.length(trailing_comma_dict)"} ${"=="} ${3}) = ${_check_result}`); assert(_check_result);
function test_gc_fail(a, b, c) { const x = []; const y = []; const z = []; }
test_gc_fail(1, 2, 3)
test_gc_fail(1, 2, 3)
function fun() {
    const arr = [1, 2, 3]
    const dict = {"a": 1, "b": 2}
    const str = "lorem ipsum"
    dict["a"] = 1
    const res = function(a, b, c) {
        const res_str = tostring(a) + tostring(b) + tostring(c)
        return res_str;
    }
    return res(1, 2, 3)
}
println(fun())
function make_person(name) {
    return {
        name: name,
        hello: function() {
            println("hello " + this.name)
        },
        make_hello: function()
        {
            return "hello "+ this.name
        }
    }
}
const person = make_person("Krzysztof")
person.hello()
_check_result = (Object.keys({"a": 1, "b": 2})[1] == "b"); println(`checking (${"Object.keys({\"a\": 1, \"b\": 2})[1]"} ${"=="} ${"b"}) = ${_check_result}`); assert(_check_result);
_check_result = (tostring(1) == "1"); println(`checking (${"tostring(1)"} ${"=="} ${"1"}) = ${_check_result}`); assert(_check_result);
const popular_names = ["Krzysztof", "Zbigniew", "Grzegorz"]
for (name in popular_names) {
    println(name)
    if (name == "Zbigniew") {
        break
    }
}
{
    println("args: ", 1, [1, 2, 3], {"a": 1}, "lorem", true, function() {}, println)
    if (true) {}
    if (false) {}
    var i = 0
    var j = 0
    while ((i+=1) < 10) { break; }
    while ((j+=1) < 10) { }
}
const val = 123
_check_result = ("abc"[0] == "a"); println(`checking (${"\"abc\"[0]"} ${"=="} ${"a"}) = ${_check_result}`); assert(_check_result);
_check_result = ("abc"[0] != "b"); println(`checking (${"\"abc\"[0]"} ${"!="} ${"b"}) = ${_check_result}`); assert(_check_result);
function contains_item(to_find, items) {
    for (item in items) {
        if (item == to_find) {
            return true
        }
    }
    return false
}
const cities = ["Kraków", "Warsaw", "Gdańsk"]
if (contains_item("Kraków", cities)) {
    println("found!")
}
function block_test() {
    var x = 0
    {
        x = 1
    }
    return x
}
_check_result = (block_test() == 1); println(`checking (${"block_test()"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
const big_array = array(1000)
_check_result = (Object.length(big_array) == 1000); println(`checking (${"Object.length(big_array)"} ${"=="} ${1000}) = ${_check_result}`); assert(_check_result);
function return_no_semicolon() { return }
function vec2(x, y) {
    return {
        x: x,
        y: y,
        __operator_add__: function(a, b) {
            return vec2(a.x + b.x, a.y + b.y)
        },
        __operator_sub__: function(a, b) {
            return vec2(a.x - b.x, a.y - b.y)
        },
        __operator_minus__: function(a) { return vec2(-a.x, -a.y) },
        __operator_mul__: function(a, b) {
            if (Object.isnumber(a)) {
                return vec2(b.x * a, b.y * a)
            }
            else if (Object.isnumber(b) == true)
            {
                return vec2(a.x * b, a.y * b)
            }
            else {
                return vec2(a.x * b.x, a.y * b.y)
            }
        },
    }
}
const va = vec2(1, 2)
const vb = vec2(3, 4)
var v = va + vb
_check_result = (v.x == 4); println(`checking (${"v.x"} ${"=="} ${4}) = ${_check_result}`); assert(_check_result);
_check_result = (v.y == 6); println(`checking (${"v.y"} ${"=="} ${6}) = ${_check_result}`); assert(_check_result);
v = va * 2
_check_result = (v.x == 2); println(`checking (${"v.x"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (v.y == 4); println(`checking (${"v.y"} ${"=="} ${4}) = ${_check_result}`); assert(_check_result);
v = -va
_check_result = (v.x == -1); println(`checking (${"v.x"} ${"=="} ${-1}) = ${_check_result}`); assert(_check_result);
_check_result = (v.y == -2); println(`checking (${"v.y"} ${"=="} ${-2}) = ${_check_result}`); assert(_check_result);
_check_result = ((1|2) == 3); println(`checking (${"(1|2)"} ${"=="} ${3}) = ${_check_result}`); assert(_check_result);
_check_result = ((1&2) == 0); println(`checking (${"(1&2)"} ${"=="} ${0}) = ${_check_result}`); assert(_check_result);
_check_result = ((1^3) == 2); println(`checking (${"(1^3)"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (( 1 << 16) == 65536); println(`checking (${"( 1 << 16)"} ${"=="} ${65536}) = ${_check_result}`); assert(_check_result);
_check_result = ((-1 << 2) == -4); println(`checking (${"(-1 << 2)"} ${"=="} ${-4}) = ${_check_result}`); assert(_check_result);
_check_result = (( 8 >> 1) == 4); println(`checking (${"( 8 >> 1)"} ${"=="} ${4}) = ${_check_result}`); assert(_check_result);
_check_result = ((-8 >> 1) == -4); println(`checking (${"(-8 >> 1)"} ${"=="} ${-4}) = ${_check_result}`); assert(_check_result);
function recover_test_1() {
    recover (e) {
        return 1
    }
    return 2
}
_check_result = (recover_test_1() == 2); println(`checking (${"recover_test_1()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
function recover_test_2() {
    recover (e) {
        return 1
    }
    return crash()
}
_check_result = (recover_test_2() == 1); println(`checking (${"recover_test_2()"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
function recover_test_3() {
    recover (e) {
        return 1
    }
    recover (e) {
        return 2
    }
    function recover_inner() {
        return crash()
    }
    return recover_inner()
}
_check_result = (recover_test_3() == 2); println(`checking (${"recover_test_3()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
function recover_test_4() {
    recover (e) {
        return 2
    }
    function recover_test_inner() {
        recover (e) {
            return crash()
        }
        return crash()
    }
    return recover_test_inner()
}
_check_result = (recover_test_4() == 2); println(`checking (${"recover_test_4()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
var this_test = {
    inner: {
        name: "lorem",
        get_name: function() {
            return this.name
        }
    },
    get_inner_name: function() {
        return this.inner.get_name()
    }
}
_check_result = (this_test.get_inner_name() == "lorem"); println(`checking (${"this_test.get_inner_name()"} ${"=="} ${"lorem"}) = ${_check_result}`); assert(_check_result);
function add(x, y) { return x + y }
var templ_var = 3
_check_result = (`foo${templ_var}bar` == "foo3bar"); println(`checking (${"`foo${templ_var}bar`"} ${"=="} ${"foo3bar"}) = ${_check_result}`); assert(_check_result);
_check_result = (`lorem${add(`${add(`x`, "y")}`, `z`)}ipsum` == "loremxyzipsum"); println(`checking (${"`lorem${add(`${add(`x`, \"y\")}`, `z`)}ipsum`"} ${"=="} ${"loremxyzipsum"}) = ${_check_result}`); assert(_check_result);
_check_result = (`${4 * 2}` == "8"); println(`checking (${"`${4 * 2}`"} ${"=="} ${"8"}) = ${_check_result}`); assert(_check_result);
_check_result = (`${{}}` == "{}"); println(`checking (${"`${{}}`"} ${"=="} ${"{}"}) = ${_check_result}`); assert(_check_result);
_check_result = (`foo\${x}bar` == "foo${x}bar"); println(`checking (${"`foo\${x}bar`"} ${"=="} ${"foo${x}bar"}) = ${_check_result}`); assert(_check_result);
_check_result = (`${1} ${2}` == "1 2"); println(`checking (${"`${1} ${2}`"} ${"=="} ${"1 2"}) = ${_check_result}`); assert(_check_result);
function test_ternary(x) {
    var res = x == 1 ? 1 : 2;
    return res;
}
_check_result = (test_ternary(1) == 1); println(`checking (${"test_ternary(1)"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
_check_result = (test_ternary(3) == 2); println(`checking (${"test_ternary(3)"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = ((true ? true ? 1 : 2 : 3) == 1); println(`checking (${"(true ? true ? 1 : 2 : 3)"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
_check_result = ((true ? false ? 1 : 2 : 3) == 2); println(`checking (${"(true ? false ? 1 : 2 : 3)"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (add(true ? 1 : 2, true ? 3 : 5) == 4); println(`checking (${"add(true ? 1 : 2, true ? 3 : 5)"} ${"=="} ${4}) = ${_check_result}`); assert(_check_result);
_check_result = (add(true ? 1 : 2, 3) == 4); println(`checking (${"add(true ? 1 : 2, 3)"} ${"=="} ${4}) = ${_check_result}`); assert(_check_result);
_check_result = (add(1, true ? 2 : 3) == 3); println(`checking (${"add(1, true ? 2 : 3)"} ${"=="} ${3}) = ${_check_result}`); assert(_check_result);
var test_obj = {
    fun: function() { return 2}
}
_check_result = (test_obj.fun() == 2); println(`checking (${"test_obj.fun()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (test_obj["fun"] != 2); println(`checking (${"test_obj[\"fun\"]"} ${"!="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (test_obj["fun"]() == 2); println(`checking (${"test_obj[\"fun\"]()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
function get_test_arr() {
    var test_arr = [
        function() { return 0 },
        function() { return 1 },
        function() { return 2 },
    ]
    return test_arr
}
var fun_i = 0
_check_result = (get_test_arr()[fun_i++]() == 0); println(`checking (${"get_test_arr()[fun_i++]()"} ${"=="} ${0}) = ${_check_result}`); assert(_check_result);
_check_result = (get_test_arr()[fun_i++]() == 1); println(`checking (${"get_test_arr()[fun_i++]()"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
_check_result = (get_test_arr()[fun_i++]() == 2); println(`checking (${"get_test_arr()[fun_i++]()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (get_test_arr()[--fun_i]() == 2); println(`checking (${"get_test_arr()[--fun_i]()"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
_check_result = (get_test_arr()[--fun_i]() == 1); println(`checking (${"get_test_arr()[--fun_i]()"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
_check_result = (get_test_arr()[--fun_i]() == 0); println(`checking (${"get_test_arr()[--fun_i]()"} ${"=="} ${0}) = ${_check_result}`); assert(_check_result);
{
    var a = 10
    var b = a++ + ++a + ++a +a
    _check_result = (b == 48); println(`checking (${"b"} ${"=="} ${48}) = ${_check_result}`); assert(_check_result);
}
{
    var a = 0
    var b = 0
    _check_result = ((a-- - --b) == 1); println(`checking (${"(a-- - --b)"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
}
{
    var obj = { foo: 1 }
    obj.foo++
    _check_result = (obj.foo == 2); println(`checking (${"obj.foo"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
    _check_result = (obj.foo++ == 2); println(`checking (${"obj.foo++"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
    _check_result = (obj.foo == 3); println(`checking (${"obj.foo"} ${"=="} ${3}) = ${_check_result}`); assert(_check_result);
    _check_result = (--obj.foo == 2); println(`checking (${"--obj.foo"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
    _check_result = (obj.foo-- == 2); println(`checking (${"obj.foo--"} ${"=="} ${2}) = ${_check_result}`); assert(_check_result);
    _check_result = (obj.foo == 1); println(`checking (${"obj.foo"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
}
_check_result = (1 == 1); println(`checking (${"1"} ${"=="} ${1}) = ${_check_result}`); assert(_check_result);
_check_result = (1 != "1"); println(`checking (${"1"} ${"!="} ${"1"}) = ${_check_result}`); assert(_check_result);
_check_result = (1 != {}); println(`checking (${"1"} ${"!="} ${{}}) = ${_check_result}`); assert(_check_result);
_check_result = ("a" + "b" == "ab"); println(`checking (${"\"a\" + \"b\""} ${"=="} ${"ab"}) = ${_check_result}`); assert(_check_result);
{
    var n = 256
    var str = ""
    for (var i = 0; i < n; i++) {
        str += "x"
    }
    println("str = ", Object.length(str))
    for (var i = 0; i < n; i++) {
        assert(str[i] == "x")
    }
}
_check_result = (reverse("abc") == "cba"); println(`checking (${"reverse(\"abc\")"} ${"=="} ${"cba"}) = ${_check_result}`); assert(_check_result);
_check_result = (reverse("abcd") == "dcba"); println(`checking (${"reverse(\"abcd\")"} ${"=="} ${"dcba"}) = ${_check_result}`); assert(_check_result);
_check_result = (slice("abc", 1) == "bc"); println(`checking (${"slice(\"abc\", 1)"} ${"=="} ${"bc"}) = ${_check_result}`); assert(_check_result);
_check_result = (slice("abc", -1) == "c"); println(`checking (${"slice(\"abc\", -1)"} ${"=="} ${"c"}) = ${_check_result}`); assert(_check_result);
_check_result = (concat("abc", "def") == "abcdef"); println(`checking (${"concat(\"abc\", \"def\")"} ${"=="} ${"abcdef"}) = ${_check_result}`); assert(_check_result);
println("all is well")
